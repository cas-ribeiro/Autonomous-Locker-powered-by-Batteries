
Test123.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001abc  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08001c48  08001c48  00011c48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001c88  08001c88  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001c88  08001c88  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001c88  08001c88  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001c88  08001c88  00011c88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001c8c  08001c8c  00011c8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001c90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000000c  08001c9c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  08001c9c  0002002c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000073be  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000016e2  00000000  00000000  0002743d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000006f8  00000000  00000000  00028b20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000520  00000000  00000000  00029218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00001412  00000000  00000000  00029738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00007b16  00000000  00000000  0002ab4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000baa69  00000000  00000000  00032660  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000019e4  00000000  00000000  000ed0cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  000eeab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08001c30 	.word	0x08001c30

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	08001c30 	.word	0x08001c30

080001cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80001cc:	b480      	push	{r7}
 80001ce:	b083      	sub	sp, #12
 80001d0:	af00      	add	r7, sp, #0
 80001d2:	4603      	mov	r3, r0
 80001d4:	6039      	str	r1, [r7, #0]
 80001d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001dc:	2b00      	cmp	r3, #0
 80001de:	db0a      	blt.n	80001f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80001e0:	683b      	ldr	r3, [r7, #0]
 80001e2:	b2da      	uxtb	r2, r3
 80001e4:	490c      	ldr	r1, [pc, #48]	; (8000218 <__NVIC_SetPriority+0x4c>)
 80001e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001ea:	0112      	lsls	r2, r2, #4
 80001ec:	b2d2      	uxtb	r2, r2
 80001ee:	440b      	add	r3, r1
 80001f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80001f4:	e00a      	b.n	800020c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80001f6:	683b      	ldr	r3, [r7, #0]
 80001f8:	b2da      	uxtb	r2, r3
 80001fa:	4908      	ldr	r1, [pc, #32]	; (800021c <__NVIC_SetPriority+0x50>)
 80001fc:	79fb      	ldrb	r3, [r7, #7]
 80001fe:	f003 030f 	and.w	r3, r3, #15
 8000202:	3b04      	subs	r3, #4
 8000204:	0112      	lsls	r2, r2, #4
 8000206:	b2d2      	uxtb	r2, r2
 8000208:	440b      	add	r3, r1
 800020a:	761a      	strb	r2, [r3, #24]
}
 800020c:	bf00      	nop
 800020e:	370c      	adds	r7, #12
 8000210:	46bd      	mov	sp, r7
 8000212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000216:	4770      	bx	lr
 8000218:	e000e100 	.word	0xe000e100
 800021c:	e000ed00 	.word	0xe000ed00

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b090      	sub	sp, #64	; 0x40
 8000224:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000226:	f000 fa64 	bl	80006f2 <HAL_Init>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800022a:	4b51      	ldr	r3, [pc, #324]	; (8000370 <main+0x150>)
 800022c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800022e:	4a50      	ldr	r2, [pc, #320]	; (8000370 <main+0x150>)
 8000230:	f043 0304 	orr.w	r3, r3, #4
 8000234:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000236:	4b4e      	ldr	r3, [pc, #312]	; (8000370 <main+0x150>)
 8000238:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800023a:	f003 0304 	and.w	r3, r3, #4
 800023e:	617b      	str	r3, [r7, #20]
 8000240:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000242:	4b4b      	ldr	r3, [pc, #300]	; (8000370 <main+0x150>)
 8000244:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000246:	4a4a      	ldr	r2, [pc, #296]	; (8000370 <main+0x150>)
 8000248:	f043 0301 	orr.w	r3, r3, #1
 800024c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800024e:	4b48      	ldr	r3, [pc, #288]	; (8000370 <main+0x150>)
 8000250:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000252:	f003 0301 	and.w	r3, r3, #1
 8000256:	613b      	str	r3, [r7, #16]
 8000258:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800025a:	4b45      	ldr	r3, [pc, #276]	; (8000370 <main+0x150>)
 800025c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800025e:	4a44      	ldr	r2, [pc, #272]	; (8000370 <main+0x150>)
 8000260:	f043 0302 	orr.w	r3, r3, #2
 8000264:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000266:	4b42      	ldr	r3, [pc, #264]	; (8000370 <main+0x150>)
 8000268:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800026a:	f003 0302 	and.w	r3, r3, #2
 800026e:	60fb      	str	r3, [r7, #12]
 8000270:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000272:	4b3f      	ldr	r3, [pc, #252]	; (8000370 <main+0x150>)
 8000274:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000276:	4a3e      	ldr	r2, [pc, #248]	; (8000370 <main+0x150>)
 8000278:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800027c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800027e:	4b3c      	ldr	r3, [pc, #240]	; (8000370 <main+0x150>)
 8000280:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000282:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000286:	60bb      	str	r3, [r7, #8]
 8000288:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800028a:	f000 f877 	bl	800037c <SystemClock_Config>
  /* Disable Prefetch Buffer */
  __HAL_FLASH_PREFETCH_BUFFER_DISABLE();
 800028e:	4b39      	ldr	r3, [pc, #228]	; (8000374 <main+0x154>)
 8000290:	681b      	ldr	r3, [r3, #0]
 8000292:	4a38      	ldr	r2, [pc, #224]	; (8000374 <main+0x154>)
 8000294:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000298:	6013      	str	r3, [r2, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800029a:	4b35      	ldr	r3, [pc, #212]	; (8000370 <main+0x150>)
 800029c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800029e:	4a34      	ldr	r2, [pc, #208]	; (8000370 <main+0x150>)
 80002a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80002a4:	6593      	str	r3, [r2, #88]	; 0x58
 80002a6:	4b32      	ldr	r3, [pc, #200]	; (8000370 <main+0x150>)
 80002a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80002aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80002ae:	607b      	str	r3, [r7, #4]
 80002b0:	687b      	ldr	r3, [r7, #4]
  __HAL_FLASH_SLEEP_POWERDOWN_ENABLE();
 80002b2:	4b30      	ldr	r3, [pc, #192]	; (8000374 <main+0x154>)
 80002b4:	681b      	ldr	r3, [r3, #0]
 80002b6:	4a2f      	ldr	r2, [pc, #188]	; (8000374 <main+0x154>)
 80002b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80002bc:	6013      	str	r3, [r2, #0]


  /* Reset all RCC Sleep and Stop modes register to */
  /* improve power consumption                      */
  RCC->AHB1SMENR  = 0x0;
 80002be:	4b2c      	ldr	r3, [pc, #176]	; (8000370 <main+0x150>)
 80002c0:	2200      	movs	r2, #0
 80002c2:	669a      	str	r2, [r3, #104]	; 0x68
  RCC->AHB2SMENR  = 0x0;
 80002c4:	4b2a      	ldr	r3, [pc, #168]	; (8000370 <main+0x150>)
 80002c6:	2200      	movs	r2, #0
 80002c8:	66da      	str	r2, [r3, #108]	; 0x6c
  RCC->AHB3SMENR  = 0x0;
 80002ca:	4b29      	ldr	r3, [pc, #164]	; (8000370 <main+0x150>)
 80002cc:	2200      	movs	r2, #0
 80002ce:	671a      	str	r2, [r3, #112]	; 0x70

  RCC->APB1SMENR1 = 0x0;
 80002d0:	4b27      	ldr	r3, [pc, #156]	; (8000370 <main+0x150>)
 80002d2:	2200      	movs	r2, #0
 80002d4:	679a      	str	r2, [r3, #120]	; 0x78
  RCC->APB1SMENR2 = 0x0;
 80002d6:	4b26      	ldr	r3, [pc, #152]	; (8000370 <main+0x150>)
 80002d8:	2200      	movs	r2, #0
 80002da:	67da      	str	r2, [r3, #124]	; 0x7c
  RCC->APB2SMENR  = 0x0;
 80002dc:	4b24      	ldr	r3, [pc, #144]	; (8000370 <main+0x150>)
 80002de:	2200      	movs	r2, #0
 80002e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
//  Lock_StructInit(&LockerStruct[0], Lock1_Pin1_GPIOx, Lock1_Pin1,
//                  Lock1_Pin2_GPIOx, Lock1_Pin2);



  GPIO_InitStruct2.Pin = GPIO_PIN_3;
 80002e4:	2308      	movs	r3, #8
 80002e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct2.Mode = GPIO_MODE_OUTPUT_PP;
 80002e8:	2301      	movs	r3, #1
 80002ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct2.Pull  = GPIO_PULLUP;
 80002ec:	2301      	movs	r3, #1
 80002ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct2.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80002f0:	2303      	movs	r3, #3
 80002f2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct2);
 80002f4:	f107 0318 	add.w	r3, r7, #24
 80002f8:	4619      	mov	r1, r3
 80002fa:	481f      	ldr	r0, [pc, #124]	; (8000378 <main+0x158>)
 80002fc:	f000 fbc4 	bl	8000a88 <HAL_GPIO_Init>


  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 8000300:	2108      	movs	r1, #8
 8000302:	481d      	ldr	r0, [pc, #116]	; (8000378 <main+0x158>)
 8000304:	f000 fd2a 	bl	8000d5c <HAL_GPIO_TogglePin>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	    /* Insert 5 seconds delay */
	    HAL_Delay(5000);
 8000308:	f241 3088 	movw	r0, #5000	; 0x1388
 800030c:	f000 fa66 	bl	80007dc <HAL_Delay>
	    SystemPower_Config();
 8000310:	f000 f896 	bl	8000440 <SystemPower_Config>

	    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000314:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000318:	62fb      	str	r3, [r7, #44]	; 0x2c
	    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800031a:	2301      	movs	r3, #1
 800031c:	637b      	str	r3, [r7, #52]	; 0x34
	    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800031e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000322:	633b      	str	r3, [r7, #48]	; 0x30
	    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000324:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000328:	4619      	mov	r1, r3
 800032a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800032e:	f000 fbab 	bl	8000a88 <HAL_GPIO_Init>
	    /* Configure PA.12 (Arduino D2) as input with External interrupt */

	    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 8000332:	2108      	movs	r1, #8
 8000334:	4810      	ldr	r0, [pc, #64]	; (8000378 <main+0x158>)
 8000336:	f000 fd11 	bl	8000d5c <HAL_GPIO_TogglePin>
	    NVIC_SetPriority((IRQn_Type)(EXTI15_10_IRQn), 0x03);
 800033a:	2103      	movs	r1, #3
 800033c:	2028      	movs	r0, #40	; 0x28
 800033e:	f7ff ff45 	bl	80001cc <__NVIC_SetPriority>
	    HAL_NVIC_EnableIRQ((IRQn_Type)(EXTI15_10_IRQn));
 8000342:	2028      	movs	r0, #40	; 0x28
 8000344:	f000 fb85 	bl	8000a52 <HAL_NVIC_EnableIRQ>

	    SystemClock_Decrease();
 8000348:	f000 f8f2 	bl	8000530 <SystemClock_Decrease>
	    HAL_SuspendTick();
 800034c:	f000 fa6a 	bl	8000824 <HAL_SuspendTick>

	    HAL_PWR_EnterSLEEPMode(PWR_LOWPOWERREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8000350:	2101      	movs	r1, #1
 8000352:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000356:	f000 fd4f 	bl	8000df8 <HAL_PWR_EnterSLEEPMode>


	    HAL_PWREx_DisableLowPowerRunMode();
 800035a:	f000 fdf5 	bl	8000f48 <HAL_PWREx_DisableLowPowerRunMode>

	    SystemClock_Config();
 800035e:	f000 f80d 	bl	800037c <SystemClock_Config>
	    HAL_ResumeTick();
 8000362:	f000 fa6f 	bl	8000844 <HAL_ResumeTick>
	    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 8000366:	2108      	movs	r1, #8
 8000368:	4803      	ldr	r0, [pc, #12]	; (8000378 <main+0x158>)
 800036a:	f000 fcf7 	bl	8000d5c <HAL_GPIO_TogglePin>
	    HAL_Delay(5000);
 800036e:	e7cb      	b.n	8000308 <main+0xe8>
 8000370:	40021000 	.word	0x40021000
 8000374:	40022000 	.word	0x40022000
 8000378:	48000400 	.word	0x48000400

0800037c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800037c:	b580      	push	{r7, lr}
 800037e:	b096      	sub	sp, #88	; 0x58
 8000380:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000382:	f107 0314 	add.w	r3, r7, #20
 8000386:	2244      	movs	r2, #68	; 0x44
 8000388:	2100      	movs	r1, #0
 800038a:	4618      	mov	r0, r3
 800038c:	f001 fc24 	bl	8001bd8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000390:	463b      	mov	r3, r7
 8000392:	2200      	movs	r2, #0
 8000394:	601a      	str	r2, [r3, #0]
 8000396:	605a      	str	r2, [r3, #4]
 8000398:	609a      	str	r2, [r3, #8]
 800039a:	60da      	str	r2, [r3, #12]
 800039c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800039e:	f44f 7000 	mov.w	r0, #512	; 0x200
 80003a2:	f000 fd6b 	bl	8000e7c <HAL_PWREx_ControlVoltageScaling>
 80003a6:	4603      	mov	r3, r0
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	d001      	beq.n	80003b0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80003ac:	f000 f90a 	bl	80005c4 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80003b0:	f000 fd12 	bl	8000dd8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80003b4:	4b21      	ldr	r3, [pc, #132]	; (800043c <SystemClock_Config+0xc0>)
 80003b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80003ba:	4a20      	ldr	r2, [pc, #128]	; (800043c <SystemClock_Config+0xc0>)
 80003bc:	f023 0318 	bic.w	r3, r3, #24
 80003c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80003c4:	2314      	movs	r3, #20
 80003c6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80003c8:	2301      	movs	r3, #1
 80003ca:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80003cc:	2301      	movs	r3, #1
 80003ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80003d0:	2300      	movs	r3, #0
 80003d2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80003d4:	2360      	movs	r3, #96	; 0x60
 80003d6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003d8:	2302      	movs	r3, #2
 80003da:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80003dc:	2301      	movs	r3, #1
 80003de:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80003e0:	2301      	movs	r3, #1
 80003e2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 80003e4:	2310      	movs	r3, #16
 80003e6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80003e8:	2307      	movs	r3, #7
 80003ea:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80003ec:	2302      	movs	r3, #2
 80003ee:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80003f0:	2302      	movs	r3, #2
 80003f2:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003f4:	f107 0314 	add.w	r3, r7, #20
 80003f8:	4618      	mov	r0, r3
 80003fa:	f000 fddd 	bl	8000fb8 <HAL_RCC_OscConfig>
 80003fe:	4603      	mov	r3, r0
 8000400:	2b00      	cmp	r3, #0
 8000402:	d001      	beq.n	8000408 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000404:	f000 f8de 	bl	80005c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000408:	230f      	movs	r3, #15
 800040a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800040c:	2303      	movs	r3, #3
 800040e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000410:	2300      	movs	r3, #0
 8000412:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000414:	2300      	movs	r3, #0
 8000416:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000418:	2300      	movs	r3, #0
 800041a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800041c:	463b      	mov	r3, r7
 800041e:	2101      	movs	r1, #1
 8000420:	4618      	mov	r0, r3
 8000422:	f001 f9dd 	bl	80017e0 <HAL_RCC_ClockConfig>
 8000426:	4603      	mov	r3, r0
 8000428:	2b00      	cmp	r3, #0
 800042a:	d001      	beq.n	8000430 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 800042c:	f000 f8ca 	bl	80005c4 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000430:	f001 fbc2 	bl	8001bb8 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000434:	bf00      	nop
 8000436:	3758      	adds	r7, #88	; 0x58
 8000438:	46bd      	mov	sp, r7
 800043a:	bd80      	pop	{r7, pc}
 800043c:	40021000 	.word	0x40021000

08000440 <SystemPower_Config>:
  *            + Code running from Internal FLASH
  * @param  None
  * @retval None
  */
static void SystemPower_Config(void)
{
 8000440:	b580      	push	{r7, lr}
 8000442:	b08a      	sub	sp, #40	; 0x28
 8000444:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

/* Enable GPIOs clock */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000446:	4b36      	ldr	r3, [pc, #216]	; (8000520 <SystemPower_Config+0xe0>)
 8000448:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800044a:	4a35      	ldr	r2, [pc, #212]	; (8000520 <SystemPower_Config+0xe0>)
 800044c:	f043 0301 	orr.w	r3, r3, #1
 8000450:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000452:	4b33      	ldr	r3, [pc, #204]	; (8000520 <SystemPower_Config+0xe0>)
 8000454:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000456:	f003 0301 	and.w	r3, r3, #1
 800045a:	613b      	str	r3, [r7, #16]
 800045c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800045e:	4b30      	ldr	r3, [pc, #192]	; (8000520 <SystemPower_Config+0xe0>)
 8000460:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000462:	4a2f      	ldr	r2, [pc, #188]	; (8000520 <SystemPower_Config+0xe0>)
 8000464:	f043 0302 	orr.w	r3, r3, #2
 8000468:	64d3      	str	r3, [r2, #76]	; 0x4c
 800046a:	4b2d      	ldr	r3, [pc, #180]	; (8000520 <SystemPower_Config+0xe0>)
 800046c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800046e:	f003 0302 	and.w	r3, r3, #2
 8000472:	60fb      	str	r3, [r7, #12]
 8000474:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000476:	4b2a      	ldr	r3, [pc, #168]	; (8000520 <SystemPower_Config+0xe0>)
 8000478:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800047a:	4a29      	ldr	r2, [pc, #164]	; (8000520 <SystemPower_Config+0xe0>)
 800047c:	f043 0304 	orr.w	r3, r3, #4
 8000480:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000482:	4b27      	ldr	r3, [pc, #156]	; (8000520 <SystemPower_Config+0xe0>)
 8000484:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000486:	f003 0304 	and.w	r3, r3, #4
 800048a:	60bb      	str	r3, [r7, #8]
 800048c:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800048e:	4b24      	ldr	r3, [pc, #144]	; (8000520 <SystemPower_Config+0xe0>)
 8000490:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000492:	4a23      	ldr	r2, [pc, #140]	; (8000520 <SystemPower_Config+0xe0>)
 8000494:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000498:	64d3      	str	r3, [r2, #76]	; 0x4c
 800049a:	4b21      	ldr	r3, [pc, #132]	; (8000520 <SystemPower_Config+0xe0>)
 800049c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800049e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80004a2:	607b      	str	r3, [r7, #4]
 80004a4:	687b      	ldr	r3, [r7, #4]
    /* Configure all GPIO port pins in Analog Input mode (floating input trigger OFF) */
    /* Note: Debug using ST-Link is not possible during the execution of this   */
    /*       example because communication between ST-link and the device       */
    /*       under test is done through UART. All GPIO pins are disabled (set   */
    /*       to analog input mode) including  UART I/O pins.           */
    GPIO_InitStructure.Pin = GPIO_PIN_All;
 80004a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80004aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Mode = GPIO_MODE_ANALOG;
 80004ac:	2303      	movs	r3, #3
 80004ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStructure.Pull = GPIO_NOPULL;
 80004b0:	2300      	movs	r3, #0
 80004b2:	61fb      	str	r3, [r7, #28]

    HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 80004b4:	f107 0314 	add.w	r3, r7, #20
 80004b8:	4619      	mov	r1, r3
 80004ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004be:	f000 fae3 	bl	8000a88 <HAL_GPIO_Init>
    HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80004c2:	f107 0314 	add.w	r3, r7, #20
 80004c6:	4619      	mov	r1, r3
 80004c8:	4816      	ldr	r0, [pc, #88]	; (8000524 <SystemPower_Config+0xe4>)
 80004ca:	f000 fadd 	bl	8000a88 <HAL_GPIO_Init>
    HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 80004ce:	f107 0314 	add.w	r3, r7, #20
 80004d2:	4619      	mov	r1, r3
 80004d4:	4814      	ldr	r0, [pc, #80]	; (8000528 <SystemPower_Config+0xe8>)
 80004d6:	f000 fad7 	bl	8000a88 <HAL_GPIO_Init>
    HAL_GPIO_Init(GPIOH, &GPIO_InitStructure);
 80004da:	f107 0314 	add.w	r3, r7, #20
 80004de:	4619      	mov	r1, r3
 80004e0:	4812      	ldr	r0, [pc, #72]	; (800052c <SystemPower_Config+0xec>)
 80004e2:	f000 fad1 	bl	8000a88 <HAL_GPIO_Init>

    /* Disable GPIOs clock */
    __HAL_RCC_GPIOA_CLK_DISABLE();
 80004e6:	4b0e      	ldr	r3, [pc, #56]	; (8000520 <SystemPower_Config+0xe0>)
 80004e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004ea:	4a0d      	ldr	r2, [pc, #52]	; (8000520 <SystemPower_Config+0xe0>)
 80004ec:	f023 0301 	bic.w	r3, r3, #1
 80004f0:	64d3      	str	r3, [r2, #76]	; 0x4c
    __HAL_RCC_GPIOB_CLK_DISABLE();
 80004f2:	4b0b      	ldr	r3, [pc, #44]	; (8000520 <SystemPower_Config+0xe0>)
 80004f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004f6:	4a0a      	ldr	r2, [pc, #40]	; (8000520 <SystemPower_Config+0xe0>)
 80004f8:	f023 0302 	bic.w	r3, r3, #2
 80004fc:	64d3      	str	r3, [r2, #76]	; 0x4c
    __HAL_RCC_GPIOC_CLK_DISABLE();
 80004fe:	4b08      	ldr	r3, [pc, #32]	; (8000520 <SystemPower_Config+0xe0>)
 8000500:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000502:	4a07      	ldr	r2, [pc, #28]	; (8000520 <SystemPower_Config+0xe0>)
 8000504:	f023 0304 	bic.w	r3, r3, #4
 8000508:	64d3      	str	r3, [r2, #76]	; 0x4c
    __HAL_RCC_GPIOH_CLK_DISABLE();
 800050a:	4b05      	ldr	r3, [pc, #20]	; (8000520 <SystemPower_Config+0xe0>)
 800050c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800050e:	4a04      	ldr	r2, [pc, #16]	; (8000520 <SystemPower_Config+0xe0>)
 8000510:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000514:	64d3      	str	r3, [r2, #76]	; 0x4c

}
 8000516:	bf00      	nop
 8000518:	3728      	adds	r7, #40	; 0x28
 800051a:	46bd      	mov	sp, r7
 800051c:	bd80      	pop	{r7, pc}
 800051e:	bf00      	nop
 8000520:	40021000 	.word	0x40021000
 8000524:	48000400 	.word	0x48000400
 8000528:	48000800 	.word	0x48000800
 800052c:	48001c00 	.word	0x48001c00

08000530 <SystemClock_Decrease>:
  *         to go down to 100 KHz
  * @param  None
  * @retval None
  */
void SystemClock_Decrease(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b096      	sub	sp, #88	; 0x58
 8000534:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000536:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800053a:	2200      	movs	r2, #0
 800053c:	601a      	str	r2, [r3, #0]
 800053e:	605a      	str	r2, [r3, #4]
 8000540:	609a      	str	r2, [r3, #8]
 8000542:	60da      	str	r2, [r3, #12]
 8000544:	611a      	str	r2, [r3, #16]
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000546:	463b      	mov	r3, r7
 8000548:	2244      	movs	r2, #68	; 0x44
 800054a:	2100      	movs	r1, #0
 800054c:	4618      	mov	r0, r3
 800054e:	f001 fb43 	bl	8001bd8 <memset>

  /* MSI is enabled after System reset, activate PLL with MSI as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000552:	2310      	movs	r3, #16
 8000554:	603b      	str	r3, [r7, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_OFF;
 8000556:	2300      	movs	r3, #0
 8000558:	607b      	str	r3, [r7, #4]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800055a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800055e:	60fb      	str	r3, [r7, #12]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000560:	2301      	movs	r3, #1
 8000562:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_0;
 8000564:	2300      	movs	r3, #0
 8000566:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000568:	2300      	movs	r3, #0
 800056a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800056c:	2300      	movs	r3, #0
 800056e:	62bb      	str	r3, [r7, #40]	; 0x28
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000570:	463b      	mov	r3, r7
 8000572:	4618      	mov	r0, r3
 8000574:	f000 fd20 	bl	8000fb8 <HAL_RCC_OscConfig>
 8000578:	4603      	mov	r3, r0
 800057a:	2b00      	cmp	r3, #0
 800057c:	d001      	beq.n	8000582 <SystemClock_Decrease+0x52>
  {
    /* Initialization Error */
    Error_Handler();
 800057e:	f000 f821 	bl	80005c4 <Error_Handler>
  }

  /* Select MSI as system clock source and configure the HCLK, PCLK1 and PCLK2
     clocks dividers */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_SYSCLK;
 8000582:	2301      	movs	r3, #1
 8000584:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000586:	2300      	movs	r3, #0
 8000588:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800058a:	2300      	movs	r3, #0
 800058c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800058e:	2300      	movs	r3, #0
 8000590:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000592:	2300      	movs	r3, #0
 8000594:	657b      	str	r3, [r7, #84]	; 0x54
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000596:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800059a:	2100      	movs	r1, #0
 800059c:	4618      	mov	r0, r3
 800059e:	f001 f91f 	bl	80017e0 <HAL_RCC_ClockConfig>
 80005a2:	4603      	mov	r3, r0
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d001      	beq.n	80005ac <SystemClock_Decrease+0x7c>
  {
    /* Initialization Error */
    Error_Handler();
 80005a8:	f000 f80c 	bl	80005c4 <Error_Handler>
  }

  /* Disable HSI to reduce power consumption since MSI is used from that point */
  __HAL_RCC_HSI_DISABLE();
 80005ac:	4b04      	ldr	r3, [pc, #16]	; (80005c0 <SystemClock_Decrease+0x90>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	4a03      	ldr	r2, [pc, #12]	; (80005c0 <SystemClock_Decrease+0x90>)
 80005b2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80005b6:	6013      	str	r3, [r2, #0]

}
 80005b8:	bf00      	nop
 80005ba:	3758      	adds	r7, #88	; 0x58
 80005bc:	46bd      	mov	sp, r7
 80005be:	bd80      	pop	{r7, pc}
 80005c0:	40021000 	.word	0x40021000

080005c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005c4:	b480      	push	{r7}
 80005c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005c8:	b672      	cpsid	i
}
 80005ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005cc:	e7fe      	b.n	80005cc <Error_Handler+0x8>
	...

080005d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	b083      	sub	sp, #12
 80005d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005d6:	4b0f      	ldr	r3, [pc, #60]	; (8000614 <HAL_MspInit+0x44>)
 80005d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80005da:	4a0e      	ldr	r2, [pc, #56]	; (8000614 <HAL_MspInit+0x44>)
 80005dc:	f043 0301 	orr.w	r3, r3, #1
 80005e0:	6613      	str	r3, [r2, #96]	; 0x60
 80005e2:	4b0c      	ldr	r3, [pc, #48]	; (8000614 <HAL_MspInit+0x44>)
 80005e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80005e6:	f003 0301 	and.w	r3, r3, #1
 80005ea:	607b      	str	r3, [r7, #4]
 80005ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005ee:	4b09      	ldr	r3, [pc, #36]	; (8000614 <HAL_MspInit+0x44>)
 80005f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80005f2:	4a08      	ldr	r2, [pc, #32]	; (8000614 <HAL_MspInit+0x44>)
 80005f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005f8:	6593      	str	r3, [r2, #88]	; 0x58
 80005fa:	4b06      	ldr	r3, [pc, #24]	; (8000614 <HAL_MspInit+0x44>)
 80005fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80005fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000602:	603b      	str	r3, [r7, #0]
 8000604:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000606:	bf00      	nop
 8000608:	370c      	adds	r7, #12
 800060a:	46bd      	mov	sp, r7
 800060c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000610:	4770      	bx	lr
 8000612:	bf00      	nop
 8000614:	40021000 	.word	0x40021000

08000618 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000618:	b480      	push	{r7}
 800061a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800061c:	e7fe      	b.n	800061c <NMI_Handler+0x4>

0800061e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800061e:	b480      	push	{r7}
 8000620:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000622:	e7fe      	b.n	8000622 <HardFault_Handler+0x4>

08000624 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000624:	b480      	push	{r7}
 8000626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000628:	e7fe      	b.n	8000628 <MemManage_Handler+0x4>

0800062a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800062a:	b480      	push	{r7}
 800062c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800062e:	e7fe      	b.n	800062e <BusFault_Handler+0x4>

08000630 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000630:	b480      	push	{r7}
 8000632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000634:	e7fe      	b.n	8000634 <UsageFault_Handler+0x4>

08000636 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000636:	b480      	push	{r7}
 8000638:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800063a:	bf00      	nop
 800063c:	46bd      	mov	sp, r7
 800063e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000642:	4770      	bx	lr

08000644 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000644:	b480      	push	{r7}
 8000646:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000648:	bf00      	nop
 800064a:	46bd      	mov	sp, r7
 800064c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000650:	4770      	bx	lr

08000652 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000652:	b480      	push	{r7}
 8000654:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000656:	bf00      	nop
 8000658:	46bd      	mov	sp, r7
 800065a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065e:	4770      	bx	lr

08000660 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000664:	f000 f89a 	bl	800079c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000668:	bf00      	nop
 800066a:	bd80      	pop	{r7, pc}

0800066c <EXTI15_10_IRQHandler>:
  * @brief  This function handles external lines 10 to 15 interrupt request.
  * @param  None
  * @retval None
  */
void EXTI15_10_IRQHandler(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8000670:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000674:	f000 fb8c 	bl	8000d90 <HAL_GPIO_EXTI_IRQHandler>
}
 8000678:	bf00      	nop
 800067a:	bd80      	pop	{r7, pc}

0800067c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800067c:	b480      	push	{r7}
 800067e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000680:	4b06      	ldr	r3, [pc, #24]	; (800069c <SystemInit+0x20>)
 8000682:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000686:	4a05      	ldr	r2, [pc, #20]	; (800069c <SystemInit+0x20>)
 8000688:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800068c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000690:	bf00      	nop
 8000692:	46bd      	mov	sp, r7
 8000694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000698:	4770      	bx	lr
 800069a:	bf00      	nop
 800069c:	e000ed00 	.word	0xe000ed00

080006a0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80006a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80006d8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80006a4:	f7ff ffea 	bl	800067c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006a8:	480c      	ldr	r0, [pc, #48]	; (80006dc <LoopForever+0x6>)
  ldr r1, =_edata
 80006aa:	490d      	ldr	r1, [pc, #52]	; (80006e0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80006ac:	4a0d      	ldr	r2, [pc, #52]	; (80006e4 <LoopForever+0xe>)
  movs r3, #0
 80006ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006b0:	e002      	b.n	80006b8 <LoopCopyDataInit>

080006b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006b6:	3304      	adds	r3, #4

080006b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006bc:	d3f9      	bcc.n	80006b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006be:	4a0a      	ldr	r2, [pc, #40]	; (80006e8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80006c0:	4c0a      	ldr	r4, [pc, #40]	; (80006ec <LoopForever+0x16>)
  movs r3, #0
 80006c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006c4:	e001      	b.n	80006ca <LoopFillZerobss>

080006c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006c8:	3204      	adds	r2, #4

080006ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006cc:	d3fb      	bcc.n	80006c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80006ce:	f001 fa8b 	bl	8001be8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80006d2:	f7ff fda5 	bl	8000220 <main>

080006d6 <LoopForever>:

LoopForever:
    b LoopForever
 80006d6:	e7fe      	b.n	80006d6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80006d8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80006dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006e0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80006e4:	08001c90 	.word	0x08001c90
  ldr r2, =_sbss
 80006e8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80006ec:	2000002c 	.word	0x2000002c

080006f0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80006f0:	e7fe      	b.n	80006f0 <ADC1_IRQHandler>

080006f2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006f2:	b580      	push	{r7, lr}
 80006f4:	b082      	sub	sp, #8
 80006f6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80006f8:	2300      	movs	r3, #0
 80006fa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006fc:	2003      	movs	r0, #3
 80006fe:	f000 f981 	bl	8000a04 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000702:	2000      	movs	r0, #0
 8000704:	f000 f80e 	bl	8000724 <HAL_InitTick>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d002      	beq.n	8000714 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800070e:	2301      	movs	r3, #1
 8000710:	71fb      	strb	r3, [r7, #7]
 8000712:	e001      	b.n	8000718 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000714:	f7ff ff5c 	bl	80005d0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000718:	79fb      	ldrb	r3, [r7, #7]
}
 800071a:	4618      	mov	r0, r3
 800071c:	3708      	adds	r7, #8
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
	...

08000724 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b084      	sub	sp, #16
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800072c:	2300      	movs	r3, #0
 800072e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000730:	4b17      	ldr	r3, [pc, #92]	; (8000790 <HAL_InitTick+0x6c>)
 8000732:	781b      	ldrb	r3, [r3, #0]
 8000734:	2b00      	cmp	r3, #0
 8000736:	d023      	beq.n	8000780 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000738:	4b16      	ldr	r3, [pc, #88]	; (8000794 <HAL_InitTick+0x70>)
 800073a:	681a      	ldr	r2, [r3, #0]
 800073c:	4b14      	ldr	r3, [pc, #80]	; (8000790 <HAL_InitTick+0x6c>)
 800073e:	781b      	ldrb	r3, [r3, #0]
 8000740:	4619      	mov	r1, r3
 8000742:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000746:	fbb3 f3f1 	udiv	r3, r3, r1
 800074a:	fbb2 f3f3 	udiv	r3, r2, r3
 800074e:	4618      	mov	r0, r3
 8000750:	f000 f98d 	bl	8000a6e <HAL_SYSTICK_Config>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d10f      	bne.n	800077a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	2b0f      	cmp	r3, #15
 800075e:	d809      	bhi.n	8000774 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000760:	2200      	movs	r2, #0
 8000762:	6879      	ldr	r1, [r7, #4]
 8000764:	f04f 30ff 	mov.w	r0, #4294967295
 8000768:	f000 f957 	bl	8000a1a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800076c:	4a0a      	ldr	r2, [pc, #40]	; (8000798 <HAL_InitTick+0x74>)
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	6013      	str	r3, [r2, #0]
 8000772:	e007      	b.n	8000784 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000774:	2301      	movs	r3, #1
 8000776:	73fb      	strb	r3, [r7, #15]
 8000778:	e004      	b.n	8000784 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800077a:	2301      	movs	r3, #1
 800077c:	73fb      	strb	r3, [r7, #15]
 800077e:	e001      	b.n	8000784 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000780:	2301      	movs	r3, #1
 8000782:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000784:	7bfb      	ldrb	r3, [r7, #15]
}
 8000786:	4618      	mov	r0, r3
 8000788:	3710      	adds	r7, #16
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	20000008 	.word	0x20000008
 8000794:	20000000 	.word	0x20000000
 8000798:	20000004 	.word	0x20000004

0800079c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80007a0:	4b06      	ldr	r3, [pc, #24]	; (80007bc <HAL_IncTick+0x20>)
 80007a2:	781b      	ldrb	r3, [r3, #0]
 80007a4:	461a      	mov	r2, r3
 80007a6:	4b06      	ldr	r3, [pc, #24]	; (80007c0 <HAL_IncTick+0x24>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	4413      	add	r3, r2
 80007ac:	4a04      	ldr	r2, [pc, #16]	; (80007c0 <HAL_IncTick+0x24>)
 80007ae:	6013      	str	r3, [r2, #0]
}
 80007b0:	bf00      	nop
 80007b2:	46bd      	mov	sp, r7
 80007b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b8:	4770      	bx	lr
 80007ba:	bf00      	nop
 80007bc:	20000008 	.word	0x20000008
 80007c0:	20000028 	.word	0x20000028

080007c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0
  return uwTick;
 80007c8:	4b03      	ldr	r3, [pc, #12]	; (80007d8 <HAL_GetTick+0x14>)
 80007ca:	681b      	ldr	r3, [r3, #0]
}
 80007cc:	4618      	mov	r0, r3
 80007ce:	46bd      	mov	sp, r7
 80007d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d4:	4770      	bx	lr
 80007d6:	bf00      	nop
 80007d8:	20000028 	.word	0x20000028

080007dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b084      	sub	sp, #16
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80007e4:	f7ff ffee 	bl	80007c4 <HAL_GetTick>
 80007e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80007ee:	68fb      	ldr	r3, [r7, #12]
 80007f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007f4:	d005      	beq.n	8000802 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80007f6:	4b0a      	ldr	r3, [pc, #40]	; (8000820 <HAL_Delay+0x44>)
 80007f8:	781b      	ldrb	r3, [r3, #0]
 80007fa:	461a      	mov	r2, r3
 80007fc:	68fb      	ldr	r3, [r7, #12]
 80007fe:	4413      	add	r3, r2
 8000800:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000802:	bf00      	nop
 8000804:	f7ff ffde 	bl	80007c4 <HAL_GetTick>
 8000808:	4602      	mov	r2, r0
 800080a:	68bb      	ldr	r3, [r7, #8]
 800080c:	1ad3      	subs	r3, r2, r3
 800080e:	68fa      	ldr	r2, [r7, #12]
 8000810:	429a      	cmp	r2, r3
 8000812:	d8f7      	bhi.n	8000804 <HAL_Delay+0x28>
  {
  }
}
 8000814:	bf00      	nop
 8000816:	bf00      	nop
 8000818:	3710      	adds	r7, #16
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	20000008 	.word	0x20000008

08000824 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8000828:	4b05      	ldr	r3, [pc, #20]	; (8000840 <HAL_SuspendTick+0x1c>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	4a04      	ldr	r2, [pc, #16]	; (8000840 <HAL_SuspendTick+0x1c>)
 800082e:	f023 0302 	bic.w	r3, r3, #2
 8000832:	6013      	str	r3, [r2, #0]
}
 8000834:	bf00      	nop
 8000836:	46bd      	mov	sp, r7
 8000838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083c:	4770      	bx	lr
 800083e:	bf00      	nop
 8000840:	e000e010 	.word	0xe000e010

08000844 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8000848:	4b05      	ldr	r3, [pc, #20]	; (8000860 <HAL_ResumeTick+0x1c>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	4a04      	ldr	r2, [pc, #16]	; (8000860 <HAL_ResumeTick+0x1c>)
 800084e:	f043 0302 	orr.w	r3, r3, #2
 8000852:	6013      	str	r3, [r2, #0]
}
 8000854:	bf00      	nop
 8000856:	46bd      	mov	sp, r7
 8000858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085c:	4770      	bx	lr
 800085e:	bf00      	nop
 8000860:	e000e010 	.word	0xe000e010

08000864 <__NVIC_SetPriorityGrouping>:
{
 8000864:	b480      	push	{r7}
 8000866:	b085      	sub	sp, #20
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	f003 0307 	and.w	r3, r3, #7
 8000872:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000874:	4b0c      	ldr	r3, [pc, #48]	; (80008a8 <__NVIC_SetPriorityGrouping+0x44>)
 8000876:	68db      	ldr	r3, [r3, #12]
 8000878:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800087a:	68ba      	ldr	r2, [r7, #8]
 800087c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000880:	4013      	ands	r3, r2
 8000882:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000884:	68fb      	ldr	r3, [r7, #12]
 8000886:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000888:	68bb      	ldr	r3, [r7, #8]
 800088a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800088c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000890:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000894:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000896:	4a04      	ldr	r2, [pc, #16]	; (80008a8 <__NVIC_SetPriorityGrouping+0x44>)
 8000898:	68bb      	ldr	r3, [r7, #8]
 800089a:	60d3      	str	r3, [r2, #12]
}
 800089c:	bf00      	nop
 800089e:	3714      	adds	r7, #20
 80008a0:	46bd      	mov	sp, r7
 80008a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a6:	4770      	bx	lr
 80008a8:	e000ed00 	.word	0xe000ed00

080008ac <__NVIC_GetPriorityGrouping>:
{
 80008ac:	b480      	push	{r7}
 80008ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008b0:	4b04      	ldr	r3, [pc, #16]	; (80008c4 <__NVIC_GetPriorityGrouping+0x18>)
 80008b2:	68db      	ldr	r3, [r3, #12]
 80008b4:	0a1b      	lsrs	r3, r3, #8
 80008b6:	f003 0307 	and.w	r3, r3, #7
}
 80008ba:	4618      	mov	r0, r3
 80008bc:	46bd      	mov	sp, r7
 80008be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c2:	4770      	bx	lr
 80008c4:	e000ed00 	.word	0xe000ed00

080008c8 <__NVIC_EnableIRQ>:
{
 80008c8:	b480      	push	{r7}
 80008ca:	b083      	sub	sp, #12
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	4603      	mov	r3, r0
 80008d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	db0b      	blt.n	80008f2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008da:	79fb      	ldrb	r3, [r7, #7]
 80008dc:	f003 021f 	and.w	r2, r3, #31
 80008e0:	4907      	ldr	r1, [pc, #28]	; (8000900 <__NVIC_EnableIRQ+0x38>)
 80008e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008e6:	095b      	lsrs	r3, r3, #5
 80008e8:	2001      	movs	r0, #1
 80008ea:	fa00 f202 	lsl.w	r2, r0, r2
 80008ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80008f2:	bf00      	nop
 80008f4:	370c      	adds	r7, #12
 80008f6:	46bd      	mov	sp, r7
 80008f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fc:	4770      	bx	lr
 80008fe:	bf00      	nop
 8000900:	e000e100 	.word	0xe000e100

08000904 <__NVIC_SetPriority>:
{
 8000904:	b480      	push	{r7}
 8000906:	b083      	sub	sp, #12
 8000908:	af00      	add	r7, sp, #0
 800090a:	4603      	mov	r3, r0
 800090c:	6039      	str	r1, [r7, #0]
 800090e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000910:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000914:	2b00      	cmp	r3, #0
 8000916:	db0a      	blt.n	800092e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000918:	683b      	ldr	r3, [r7, #0]
 800091a:	b2da      	uxtb	r2, r3
 800091c:	490c      	ldr	r1, [pc, #48]	; (8000950 <__NVIC_SetPriority+0x4c>)
 800091e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000922:	0112      	lsls	r2, r2, #4
 8000924:	b2d2      	uxtb	r2, r2
 8000926:	440b      	add	r3, r1
 8000928:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800092c:	e00a      	b.n	8000944 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800092e:	683b      	ldr	r3, [r7, #0]
 8000930:	b2da      	uxtb	r2, r3
 8000932:	4908      	ldr	r1, [pc, #32]	; (8000954 <__NVIC_SetPriority+0x50>)
 8000934:	79fb      	ldrb	r3, [r7, #7]
 8000936:	f003 030f 	and.w	r3, r3, #15
 800093a:	3b04      	subs	r3, #4
 800093c:	0112      	lsls	r2, r2, #4
 800093e:	b2d2      	uxtb	r2, r2
 8000940:	440b      	add	r3, r1
 8000942:	761a      	strb	r2, [r3, #24]
}
 8000944:	bf00      	nop
 8000946:	370c      	adds	r7, #12
 8000948:	46bd      	mov	sp, r7
 800094a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094e:	4770      	bx	lr
 8000950:	e000e100 	.word	0xe000e100
 8000954:	e000ed00 	.word	0xe000ed00

08000958 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000958:	b480      	push	{r7}
 800095a:	b089      	sub	sp, #36	; 0x24
 800095c:	af00      	add	r7, sp, #0
 800095e:	60f8      	str	r0, [r7, #12]
 8000960:	60b9      	str	r1, [r7, #8]
 8000962:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000964:	68fb      	ldr	r3, [r7, #12]
 8000966:	f003 0307 	and.w	r3, r3, #7
 800096a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800096c:	69fb      	ldr	r3, [r7, #28]
 800096e:	f1c3 0307 	rsb	r3, r3, #7
 8000972:	2b04      	cmp	r3, #4
 8000974:	bf28      	it	cs
 8000976:	2304      	movcs	r3, #4
 8000978:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800097a:	69fb      	ldr	r3, [r7, #28]
 800097c:	3304      	adds	r3, #4
 800097e:	2b06      	cmp	r3, #6
 8000980:	d902      	bls.n	8000988 <NVIC_EncodePriority+0x30>
 8000982:	69fb      	ldr	r3, [r7, #28]
 8000984:	3b03      	subs	r3, #3
 8000986:	e000      	b.n	800098a <NVIC_EncodePriority+0x32>
 8000988:	2300      	movs	r3, #0
 800098a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800098c:	f04f 32ff 	mov.w	r2, #4294967295
 8000990:	69bb      	ldr	r3, [r7, #24]
 8000992:	fa02 f303 	lsl.w	r3, r2, r3
 8000996:	43da      	mvns	r2, r3
 8000998:	68bb      	ldr	r3, [r7, #8]
 800099a:	401a      	ands	r2, r3
 800099c:	697b      	ldr	r3, [r7, #20]
 800099e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009a0:	f04f 31ff 	mov.w	r1, #4294967295
 80009a4:	697b      	ldr	r3, [r7, #20]
 80009a6:	fa01 f303 	lsl.w	r3, r1, r3
 80009aa:	43d9      	mvns	r1, r3
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009b0:	4313      	orrs	r3, r2
         );
}
 80009b2:	4618      	mov	r0, r3
 80009b4:	3724      	adds	r7, #36	; 0x24
 80009b6:	46bd      	mov	sp, r7
 80009b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009bc:	4770      	bx	lr
	...

080009c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	3b01      	subs	r3, #1
 80009cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80009d0:	d301      	bcc.n	80009d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009d2:	2301      	movs	r3, #1
 80009d4:	e00f      	b.n	80009f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009d6:	4a0a      	ldr	r2, [pc, #40]	; (8000a00 <SysTick_Config+0x40>)
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	3b01      	subs	r3, #1
 80009dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009de:	210f      	movs	r1, #15
 80009e0:	f04f 30ff 	mov.w	r0, #4294967295
 80009e4:	f7ff ff8e 	bl	8000904 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009e8:	4b05      	ldr	r3, [pc, #20]	; (8000a00 <SysTick_Config+0x40>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009ee:	4b04      	ldr	r3, [pc, #16]	; (8000a00 <SysTick_Config+0x40>)
 80009f0:	2207      	movs	r2, #7
 80009f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009f4:	2300      	movs	r3, #0
}
 80009f6:	4618      	mov	r0, r3
 80009f8:	3708      	adds	r7, #8
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	e000e010 	.word	0xe000e010

08000a04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b082      	sub	sp, #8
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a0c:	6878      	ldr	r0, [r7, #4]
 8000a0e:	f7ff ff29 	bl	8000864 <__NVIC_SetPriorityGrouping>
}
 8000a12:	bf00      	nop
 8000a14:	3708      	adds	r7, #8
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}

08000a1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a1a:	b580      	push	{r7, lr}
 8000a1c:	b086      	sub	sp, #24
 8000a1e:	af00      	add	r7, sp, #0
 8000a20:	4603      	mov	r3, r0
 8000a22:	60b9      	str	r1, [r7, #8]
 8000a24:	607a      	str	r2, [r7, #4]
 8000a26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000a2c:	f7ff ff3e 	bl	80008ac <__NVIC_GetPriorityGrouping>
 8000a30:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a32:	687a      	ldr	r2, [r7, #4]
 8000a34:	68b9      	ldr	r1, [r7, #8]
 8000a36:	6978      	ldr	r0, [r7, #20]
 8000a38:	f7ff ff8e 	bl	8000958 <NVIC_EncodePriority>
 8000a3c:	4602      	mov	r2, r0
 8000a3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a42:	4611      	mov	r1, r2
 8000a44:	4618      	mov	r0, r3
 8000a46:	f7ff ff5d 	bl	8000904 <__NVIC_SetPriority>
}
 8000a4a:	bf00      	nop
 8000a4c:	3718      	adds	r7, #24
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}

08000a52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a52:	b580      	push	{r7, lr}
 8000a54:	b082      	sub	sp, #8
 8000a56:	af00      	add	r7, sp, #0
 8000a58:	4603      	mov	r3, r0
 8000a5a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a60:	4618      	mov	r0, r3
 8000a62:	f7ff ff31 	bl	80008c8 <__NVIC_EnableIRQ>
}
 8000a66:	bf00      	nop
 8000a68:	3708      	adds	r7, #8
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}

08000a6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a6e:	b580      	push	{r7, lr}
 8000a70:	b082      	sub	sp, #8
 8000a72:	af00      	add	r7, sp, #0
 8000a74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a76:	6878      	ldr	r0, [r7, #4]
 8000a78:	f7ff ffa2 	bl	80009c0 <SysTick_Config>
 8000a7c:	4603      	mov	r3, r0
}
 8000a7e:	4618      	mov	r0, r3
 8000a80:	3708      	adds	r7, #8
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
	...

08000a88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	b087      	sub	sp, #28
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
 8000a90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a92:	2300      	movs	r3, #0
 8000a94:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a96:	e148      	b.n	8000d2a <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000a98:	683b      	ldr	r3, [r7, #0]
 8000a9a:	681a      	ldr	r2, [r3, #0]
 8000a9c:	2101      	movs	r1, #1
 8000a9e:	697b      	ldr	r3, [r7, #20]
 8000aa0:	fa01 f303 	lsl.w	r3, r1, r3
 8000aa4:	4013      	ands	r3, r2
 8000aa6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	f000 813a 	beq.w	8000d24 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ab0:	683b      	ldr	r3, [r7, #0]
 8000ab2:	685b      	ldr	r3, [r3, #4]
 8000ab4:	f003 0303 	and.w	r3, r3, #3
 8000ab8:	2b01      	cmp	r3, #1
 8000aba:	d005      	beq.n	8000ac8 <HAL_GPIO_Init+0x40>
 8000abc:	683b      	ldr	r3, [r7, #0]
 8000abe:	685b      	ldr	r3, [r3, #4]
 8000ac0:	f003 0303 	and.w	r3, r3, #3
 8000ac4:	2b02      	cmp	r3, #2
 8000ac6:	d130      	bne.n	8000b2a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	689b      	ldr	r3, [r3, #8]
 8000acc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000ace:	697b      	ldr	r3, [r7, #20]
 8000ad0:	005b      	lsls	r3, r3, #1
 8000ad2:	2203      	movs	r2, #3
 8000ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ad8:	43db      	mvns	r3, r3
 8000ada:	693a      	ldr	r2, [r7, #16]
 8000adc:	4013      	ands	r3, r2
 8000ade:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000ae0:	683b      	ldr	r3, [r7, #0]
 8000ae2:	68da      	ldr	r2, [r3, #12]
 8000ae4:	697b      	ldr	r3, [r7, #20]
 8000ae6:	005b      	lsls	r3, r3, #1
 8000ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8000aec:	693a      	ldr	r2, [r7, #16]
 8000aee:	4313      	orrs	r3, r2
 8000af0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	693a      	ldr	r2, [r7, #16]
 8000af6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	685b      	ldr	r3, [r3, #4]
 8000afc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000afe:	2201      	movs	r2, #1
 8000b00:	697b      	ldr	r3, [r7, #20]
 8000b02:	fa02 f303 	lsl.w	r3, r2, r3
 8000b06:	43db      	mvns	r3, r3
 8000b08:	693a      	ldr	r2, [r7, #16]
 8000b0a:	4013      	ands	r3, r2
 8000b0c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b0e:	683b      	ldr	r3, [r7, #0]
 8000b10:	685b      	ldr	r3, [r3, #4]
 8000b12:	091b      	lsrs	r3, r3, #4
 8000b14:	f003 0201 	and.w	r2, r3, #1
 8000b18:	697b      	ldr	r3, [r7, #20]
 8000b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b1e:	693a      	ldr	r2, [r7, #16]
 8000b20:	4313      	orrs	r3, r2
 8000b22:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	693a      	ldr	r2, [r7, #16]
 8000b28:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b2a:	683b      	ldr	r3, [r7, #0]
 8000b2c:	685b      	ldr	r3, [r3, #4]
 8000b2e:	f003 0303 	and.w	r3, r3, #3
 8000b32:	2b03      	cmp	r3, #3
 8000b34:	d017      	beq.n	8000b66 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	68db      	ldr	r3, [r3, #12]
 8000b3a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000b3c:	697b      	ldr	r3, [r7, #20]
 8000b3e:	005b      	lsls	r3, r3, #1
 8000b40:	2203      	movs	r2, #3
 8000b42:	fa02 f303 	lsl.w	r3, r2, r3
 8000b46:	43db      	mvns	r3, r3
 8000b48:	693a      	ldr	r2, [r7, #16]
 8000b4a:	4013      	ands	r3, r2
 8000b4c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000b4e:	683b      	ldr	r3, [r7, #0]
 8000b50:	689a      	ldr	r2, [r3, #8]
 8000b52:	697b      	ldr	r3, [r7, #20]
 8000b54:	005b      	lsls	r3, r3, #1
 8000b56:	fa02 f303 	lsl.w	r3, r2, r3
 8000b5a:	693a      	ldr	r2, [r7, #16]
 8000b5c:	4313      	orrs	r3, r2
 8000b5e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	693a      	ldr	r2, [r7, #16]
 8000b64:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b66:	683b      	ldr	r3, [r7, #0]
 8000b68:	685b      	ldr	r3, [r3, #4]
 8000b6a:	f003 0303 	and.w	r3, r3, #3
 8000b6e:	2b02      	cmp	r3, #2
 8000b70:	d123      	bne.n	8000bba <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000b72:	697b      	ldr	r3, [r7, #20]
 8000b74:	08da      	lsrs	r2, r3, #3
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	3208      	adds	r2, #8
 8000b7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b7e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000b80:	697b      	ldr	r3, [r7, #20]
 8000b82:	f003 0307 	and.w	r3, r3, #7
 8000b86:	009b      	lsls	r3, r3, #2
 8000b88:	220f      	movs	r2, #15
 8000b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b8e:	43db      	mvns	r3, r3
 8000b90:	693a      	ldr	r2, [r7, #16]
 8000b92:	4013      	ands	r3, r2
 8000b94:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000b96:	683b      	ldr	r3, [r7, #0]
 8000b98:	691a      	ldr	r2, [r3, #16]
 8000b9a:	697b      	ldr	r3, [r7, #20]
 8000b9c:	f003 0307 	and.w	r3, r3, #7
 8000ba0:	009b      	lsls	r3, r3, #2
 8000ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba6:	693a      	ldr	r2, [r7, #16]
 8000ba8:	4313      	orrs	r3, r2
 8000baa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000bac:	697b      	ldr	r3, [r7, #20]
 8000bae:	08da      	lsrs	r2, r3, #3
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	3208      	adds	r2, #8
 8000bb4:	6939      	ldr	r1, [r7, #16]
 8000bb6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000bc0:	697b      	ldr	r3, [r7, #20]
 8000bc2:	005b      	lsls	r3, r3, #1
 8000bc4:	2203      	movs	r2, #3
 8000bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bca:	43db      	mvns	r3, r3
 8000bcc:	693a      	ldr	r2, [r7, #16]
 8000bce:	4013      	ands	r3, r2
 8000bd0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	685b      	ldr	r3, [r3, #4]
 8000bd6:	f003 0203 	and.w	r2, r3, #3
 8000bda:	697b      	ldr	r3, [r7, #20]
 8000bdc:	005b      	lsls	r3, r3, #1
 8000bde:	fa02 f303 	lsl.w	r3, r2, r3
 8000be2:	693a      	ldr	r2, [r7, #16]
 8000be4:	4313      	orrs	r3, r2
 8000be6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	693a      	ldr	r2, [r7, #16]
 8000bec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000bee:	683b      	ldr	r3, [r7, #0]
 8000bf0:	685b      	ldr	r3, [r3, #4]
 8000bf2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	f000 8094 	beq.w	8000d24 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bfc:	4b52      	ldr	r3, [pc, #328]	; (8000d48 <HAL_GPIO_Init+0x2c0>)
 8000bfe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c00:	4a51      	ldr	r2, [pc, #324]	; (8000d48 <HAL_GPIO_Init+0x2c0>)
 8000c02:	f043 0301 	orr.w	r3, r3, #1
 8000c06:	6613      	str	r3, [r2, #96]	; 0x60
 8000c08:	4b4f      	ldr	r3, [pc, #316]	; (8000d48 <HAL_GPIO_Init+0x2c0>)
 8000c0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c0c:	f003 0301 	and.w	r3, r3, #1
 8000c10:	60bb      	str	r3, [r7, #8]
 8000c12:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000c14:	4a4d      	ldr	r2, [pc, #308]	; (8000d4c <HAL_GPIO_Init+0x2c4>)
 8000c16:	697b      	ldr	r3, [r7, #20]
 8000c18:	089b      	lsrs	r3, r3, #2
 8000c1a:	3302      	adds	r3, #2
 8000c1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c20:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000c22:	697b      	ldr	r3, [r7, #20]
 8000c24:	f003 0303 	and.w	r3, r3, #3
 8000c28:	009b      	lsls	r3, r3, #2
 8000c2a:	220f      	movs	r2, #15
 8000c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c30:	43db      	mvns	r3, r3
 8000c32:	693a      	ldr	r2, [r7, #16]
 8000c34:	4013      	ands	r3, r2
 8000c36:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000c3e:	d00d      	beq.n	8000c5c <HAL_GPIO_Init+0x1d4>
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	4a43      	ldr	r2, [pc, #268]	; (8000d50 <HAL_GPIO_Init+0x2c8>)
 8000c44:	4293      	cmp	r3, r2
 8000c46:	d007      	beq.n	8000c58 <HAL_GPIO_Init+0x1d0>
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	4a42      	ldr	r2, [pc, #264]	; (8000d54 <HAL_GPIO_Init+0x2cc>)
 8000c4c:	4293      	cmp	r3, r2
 8000c4e:	d101      	bne.n	8000c54 <HAL_GPIO_Init+0x1cc>
 8000c50:	2302      	movs	r3, #2
 8000c52:	e004      	b.n	8000c5e <HAL_GPIO_Init+0x1d6>
 8000c54:	2307      	movs	r3, #7
 8000c56:	e002      	b.n	8000c5e <HAL_GPIO_Init+0x1d6>
 8000c58:	2301      	movs	r3, #1
 8000c5a:	e000      	b.n	8000c5e <HAL_GPIO_Init+0x1d6>
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	697a      	ldr	r2, [r7, #20]
 8000c60:	f002 0203 	and.w	r2, r2, #3
 8000c64:	0092      	lsls	r2, r2, #2
 8000c66:	4093      	lsls	r3, r2
 8000c68:	693a      	ldr	r2, [r7, #16]
 8000c6a:	4313      	orrs	r3, r2
 8000c6c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000c6e:	4937      	ldr	r1, [pc, #220]	; (8000d4c <HAL_GPIO_Init+0x2c4>)
 8000c70:	697b      	ldr	r3, [r7, #20]
 8000c72:	089b      	lsrs	r3, r3, #2
 8000c74:	3302      	adds	r3, #2
 8000c76:	693a      	ldr	r2, [r7, #16]
 8000c78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000c7c:	4b36      	ldr	r3, [pc, #216]	; (8000d58 <HAL_GPIO_Init+0x2d0>)
 8000c7e:	689b      	ldr	r3, [r3, #8]
 8000c80:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	43db      	mvns	r3, r3
 8000c86:	693a      	ldr	r2, [r7, #16]
 8000c88:	4013      	ands	r3, r2
 8000c8a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	685b      	ldr	r3, [r3, #4]
 8000c90:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d003      	beq.n	8000ca0 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8000c98:	693a      	ldr	r2, [r7, #16]
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	4313      	orrs	r3, r2
 8000c9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000ca0:	4a2d      	ldr	r2, [pc, #180]	; (8000d58 <HAL_GPIO_Init+0x2d0>)
 8000ca2:	693b      	ldr	r3, [r7, #16]
 8000ca4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000ca6:	4b2c      	ldr	r3, [pc, #176]	; (8000d58 <HAL_GPIO_Init+0x2d0>)
 8000ca8:	68db      	ldr	r3, [r3, #12]
 8000caa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	43db      	mvns	r3, r3
 8000cb0:	693a      	ldr	r2, [r7, #16]
 8000cb2:	4013      	ands	r3, r2
 8000cb4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	685b      	ldr	r3, [r3, #4]
 8000cba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d003      	beq.n	8000cca <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8000cc2:	693a      	ldr	r2, [r7, #16]
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	4313      	orrs	r3, r2
 8000cc8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000cca:	4a23      	ldr	r2, [pc, #140]	; (8000d58 <HAL_GPIO_Init+0x2d0>)
 8000ccc:	693b      	ldr	r3, [r7, #16]
 8000cce:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000cd0:	4b21      	ldr	r3, [pc, #132]	; (8000d58 <HAL_GPIO_Init+0x2d0>)
 8000cd2:	685b      	ldr	r3, [r3, #4]
 8000cd4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	43db      	mvns	r3, r3
 8000cda:	693a      	ldr	r2, [r7, #16]
 8000cdc:	4013      	ands	r3, r2
 8000cde:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	685b      	ldr	r3, [r3, #4]
 8000ce4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d003      	beq.n	8000cf4 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8000cec:	693a      	ldr	r2, [r7, #16]
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	4313      	orrs	r3, r2
 8000cf2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000cf4:	4a18      	ldr	r2, [pc, #96]	; (8000d58 <HAL_GPIO_Init+0x2d0>)
 8000cf6:	693b      	ldr	r3, [r7, #16]
 8000cf8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000cfa:	4b17      	ldr	r3, [pc, #92]	; (8000d58 <HAL_GPIO_Init+0x2d0>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	43db      	mvns	r3, r3
 8000d04:	693a      	ldr	r2, [r7, #16]
 8000d06:	4013      	ands	r3, r2
 8000d08:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	685b      	ldr	r3, [r3, #4]
 8000d0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d003      	beq.n	8000d1e <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8000d16:	693a      	ldr	r2, [r7, #16]
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	4313      	orrs	r3, r2
 8000d1c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000d1e:	4a0e      	ldr	r2, [pc, #56]	; (8000d58 <HAL_GPIO_Init+0x2d0>)
 8000d20:	693b      	ldr	r3, [r7, #16]
 8000d22:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000d24:	697b      	ldr	r3, [r7, #20]
 8000d26:	3301      	adds	r3, #1
 8000d28:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	681a      	ldr	r2, [r3, #0]
 8000d2e:	697b      	ldr	r3, [r7, #20]
 8000d30:	fa22 f303 	lsr.w	r3, r2, r3
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	f47f aeaf 	bne.w	8000a98 <HAL_GPIO_Init+0x10>
  }
}
 8000d3a:	bf00      	nop
 8000d3c:	bf00      	nop
 8000d3e:	371c      	adds	r7, #28
 8000d40:	46bd      	mov	sp, r7
 8000d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d46:	4770      	bx	lr
 8000d48:	40021000 	.word	0x40021000
 8000d4c:	40010000 	.word	0x40010000
 8000d50:	48000400 	.word	0x48000400
 8000d54:	48000800 	.word	0x48000800
 8000d58:	40010400 	.word	0x40010400

08000d5c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b085      	sub	sp, #20
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
 8000d64:	460b      	mov	r3, r1
 8000d66:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	695b      	ldr	r3, [r3, #20]
 8000d6c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000d6e:	887a      	ldrh	r2, [r7, #2]
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	4013      	ands	r3, r2
 8000d74:	041a      	lsls	r2, r3, #16
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	43d9      	mvns	r1, r3
 8000d7a:	887b      	ldrh	r3, [r7, #2]
 8000d7c:	400b      	ands	r3, r1
 8000d7e:	431a      	orrs	r2, r3
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	619a      	str	r2, [r3, #24]
}
 8000d84:	bf00      	nop
 8000d86:	3714      	adds	r7, #20
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8e:	4770      	bx	lr

08000d90 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	4603      	mov	r3, r0
 8000d98:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000d9a:	4b08      	ldr	r3, [pc, #32]	; (8000dbc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000d9c:	695a      	ldr	r2, [r3, #20]
 8000d9e:	88fb      	ldrh	r3, [r7, #6]
 8000da0:	4013      	ands	r3, r2
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d006      	beq.n	8000db4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000da6:	4a05      	ldr	r2, [pc, #20]	; (8000dbc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000da8:	88fb      	ldrh	r3, [r7, #6]
 8000daa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000dac:	88fb      	ldrh	r3, [r7, #6]
 8000dae:	4618      	mov	r0, r3
 8000db0:	f000 f806 	bl	8000dc0 <HAL_GPIO_EXTI_Callback>
  }
}
 8000db4:	bf00      	nop
 8000db6:	3708      	adds	r7, #8
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	40010400 	.word	0x40010400

08000dc0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b083      	sub	sp, #12
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000dca:	bf00      	nop
 8000dcc:	370c      	adds	r7, #12
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr
	...

08000dd8 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000ddc:	4b05      	ldr	r3, [pc, #20]	; (8000df4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	4a04      	ldr	r2, [pc, #16]	; (8000df4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8000de2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000de6:	6013      	str	r3, [r2, #0]
}
 8000de8:	bf00      	nop
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop
 8000df4:	40007000 	.word	0x40007000

08000df8 <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
 8000e00:	460b      	mov	r3, r1
 8000e02:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d10c      	bne.n	8000e24 <HAL_PWR_EnterSLEEPMode+0x2c>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 8000e0a:	4b13      	ldr	r3, [pc, #76]	; (8000e58 <HAL_PWR_EnterSLEEPMode+0x60>)
 8000e0c:	695b      	ldr	r3, [r3, #20]
 8000e0e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000e12:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000e16:	d10e      	bne.n	8000e36 <HAL_PWR_EnterSLEEPMode+0x3e>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 8000e18:	f000 f896 	bl	8000f48 <HAL_PWREx_DisableLowPowerRunMode>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d009      	beq.n	8000e36 <HAL_PWR_EnterSLEEPMode+0x3e>
      {
        return ;
 8000e22:	e016      	b.n	8000e52 <HAL_PWR_EnterSLEEPMode+0x5a>
  }
  else
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF) == RESET)
 8000e24:	4b0c      	ldr	r3, [pc, #48]	; (8000e58 <HAL_PWR_EnterSLEEPMode+0x60>)
 8000e26:	695b      	ldr	r3, [r3, #20]
 8000e28:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000e2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000e30:	d001      	beq.n	8000e36 <HAL_PWR_EnterSLEEPMode+0x3e>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 8000e32:	f000 f879 	bl	8000f28 <HAL_PWREx_EnableLowPowerRunMode>
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8000e36:	4b09      	ldr	r3, [pc, #36]	; (8000e5c <HAL_PWR_EnterSLEEPMode+0x64>)
 8000e38:	691b      	ldr	r3, [r3, #16]
 8000e3a:	4a08      	ldr	r2, [pc, #32]	; (8000e5c <HAL_PWR_EnterSLEEPMode+0x64>)
 8000e3c:	f023 0304 	bic.w	r3, r3, #4
 8000e40:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8000e42:	78fb      	ldrb	r3, [r7, #3]
 8000e44:	2b01      	cmp	r3, #1
 8000e46:	d101      	bne.n	8000e4c <HAL_PWR_EnterSLEEPMode+0x54>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8000e48:	bf30      	wfi
 8000e4a:	e002      	b.n	8000e52 <HAL_PWR_EnterSLEEPMode+0x5a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8000e4c:	bf40      	sev
    __WFE();
 8000e4e:	bf20      	wfe
    __WFE();
 8000e50:	bf20      	wfe
  }

}
 8000e52:	3708      	adds	r7, #8
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	40007000 	.word	0x40007000
 8000e5c:	e000ed00 	.word	0xe000ed00

08000e60 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000e64:	4b04      	ldr	r3, [pc, #16]	; (8000e78 <HAL_PWREx_GetVoltageRange+0x18>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop
 8000e78:	40007000 	.word	0x40007000

08000e7c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b085      	sub	sp, #20
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000e8a:	d130      	bne.n	8000eee <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000e8c:	4b23      	ldr	r3, [pc, #140]	; (8000f1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000e94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000e98:	d038      	beq.n	8000f0c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e9a:	4b20      	ldr	r3, [pc, #128]	; (8000f1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000ea2:	4a1e      	ldr	r2, [pc, #120]	; (8000f1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000ea4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ea8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000eaa:	4b1d      	ldr	r3, [pc, #116]	; (8000f20 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	2232      	movs	r2, #50	; 0x32
 8000eb0:	fb02 f303 	mul.w	r3, r2, r3
 8000eb4:	4a1b      	ldr	r2, [pc, #108]	; (8000f24 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000eb6:	fba2 2303 	umull	r2, r3, r2, r3
 8000eba:	0c9b      	lsrs	r3, r3, #18
 8000ebc:	3301      	adds	r3, #1
 8000ebe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000ec0:	e002      	b.n	8000ec8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	3b01      	subs	r3, #1
 8000ec6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000ec8:	4b14      	ldr	r3, [pc, #80]	; (8000f1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000eca:	695b      	ldr	r3, [r3, #20]
 8000ecc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ed0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ed4:	d102      	bne.n	8000edc <HAL_PWREx_ControlVoltageScaling+0x60>
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d1f2      	bne.n	8000ec2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000edc:	4b0f      	ldr	r3, [pc, #60]	; (8000f1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000ede:	695b      	ldr	r3, [r3, #20]
 8000ee0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ee4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ee8:	d110      	bne.n	8000f0c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000eea:	2303      	movs	r3, #3
 8000eec:	e00f      	b.n	8000f0e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000eee:	4b0b      	ldr	r3, [pc, #44]	; (8000f1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000ef6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000efa:	d007      	beq.n	8000f0c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000efc:	4b07      	ldr	r3, [pc, #28]	; (8000f1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000f04:	4a05      	ldr	r2, [pc, #20]	; (8000f1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f06:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f0a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000f0c:	2300      	movs	r3, #0
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	3714      	adds	r7, #20
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop
 8000f1c:	40007000 	.word	0x40007000
 8000f20:	20000000 	.word	0x20000000
 8000f24:	431bde83 	.word	0x431bde83

08000f28 <HAL_PWREx_EnableLowPowerRunMode>:
  *        Setting RUN_PD in FLASH_ACR then appropriately reducing the clock frequency must
  *        be done before calling HAL_PWREx_EnableLowPowerRunMode() API.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 8000f2c:	4b05      	ldr	r3, [pc, #20]	; (8000f44 <HAL_PWREx_EnableLowPowerRunMode+0x1c>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4a04      	ldr	r2, [pc, #16]	; (8000f44 <HAL_PWREx_EnableLowPowerRunMode+0x1c>)
 8000f32:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f36:	6013      	str	r3, [r2, #0]
}
 8000f38:	bf00      	nop
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop
 8000f44:	40007000 	.word	0x40007000

08000f48 <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b083      	sub	sp, #12
 8000f4c:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 8000f4e:	4b17      	ldr	r3, [pc, #92]	; (8000fac <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	4a16      	ldr	r2, [pc, #88]	; (8000fac <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8000f54:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000f58:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000f5a:	4b15      	ldr	r3, [pc, #84]	; (8000fb0 <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	2232      	movs	r2, #50	; 0x32
 8000f60:	fb02 f303 	mul.w	r3, r2, r3
 8000f64:	4a13      	ldr	r2, [pc, #76]	; (8000fb4 <HAL_PWREx_DisableLowPowerRunMode+0x6c>)
 8000f66:	fba2 2303 	umull	r2, r3, r2, r3
 8000f6a:	0c9b      	lsrs	r3, r3, #18
 8000f6c:	3301      	adds	r3, #1
 8000f6e:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8000f70:	e002      	b.n	8000f78 <HAL_PWREx_DisableLowPowerRunMode+0x30>
  {
    wait_loop_index--;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	3b01      	subs	r3, #1
 8000f76:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8000f78:	4b0c      	ldr	r3, [pc, #48]	; (8000fac <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8000f7a:	695b      	ldr	r3, [r3, #20]
 8000f7c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000f80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000f84:	d102      	bne.n	8000f8c <HAL_PWREx_DisableLowPowerRunMode+0x44>
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d1f2      	bne.n	8000f72 <HAL_PWREx_DisableLowPowerRunMode+0x2a>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 8000f8c:	4b07      	ldr	r3, [pc, #28]	; (8000fac <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8000f8e:	695b      	ldr	r3, [r3, #20]
 8000f90:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000f94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000f98:	d101      	bne.n	8000f9e <HAL_PWREx_DisableLowPowerRunMode+0x56>
  {
    return HAL_TIMEOUT;
 8000f9a:	2303      	movs	r3, #3
 8000f9c:	e000      	b.n	8000fa0 <HAL_PWREx_DisableLowPowerRunMode+0x58>
  }

  return HAL_OK;
 8000f9e:	2300      	movs	r3, #0
}
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	370c      	adds	r7, #12
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000faa:	4770      	bx	lr
 8000fac:	40007000 	.word	0x40007000
 8000fb0:	20000000 	.word	0x20000000
 8000fb4:	431bde83 	.word	0x431bde83

08000fb8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b088      	sub	sp, #32
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d102      	bne.n	8000fcc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	f000 bc02 	b.w	80017d0 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000fcc:	4b96      	ldr	r3, [pc, #600]	; (8001228 <HAL_RCC_OscConfig+0x270>)
 8000fce:	689b      	ldr	r3, [r3, #8]
 8000fd0:	f003 030c 	and.w	r3, r3, #12
 8000fd4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000fd6:	4b94      	ldr	r3, [pc, #592]	; (8001228 <HAL_RCC_OscConfig+0x270>)
 8000fd8:	68db      	ldr	r3, [r3, #12]
 8000fda:	f003 0303 	and.w	r3, r3, #3
 8000fde:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	f003 0310 	and.w	r3, r3, #16
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	f000 80e4 	beq.w	80011b6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000fee:	69bb      	ldr	r3, [r7, #24]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d007      	beq.n	8001004 <HAL_RCC_OscConfig+0x4c>
 8000ff4:	69bb      	ldr	r3, [r7, #24]
 8000ff6:	2b0c      	cmp	r3, #12
 8000ff8:	f040 808b 	bne.w	8001112 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000ffc:	697b      	ldr	r3, [r7, #20]
 8000ffe:	2b01      	cmp	r3, #1
 8001000:	f040 8087 	bne.w	8001112 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001004:	4b88      	ldr	r3, [pc, #544]	; (8001228 <HAL_RCC_OscConfig+0x270>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	f003 0302 	and.w	r3, r3, #2
 800100c:	2b00      	cmp	r3, #0
 800100e:	d005      	beq.n	800101c <HAL_RCC_OscConfig+0x64>
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	699b      	ldr	r3, [r3, #24]
 8001014:	2b00      	cmp	r3, #0
 8001016:	d101      	bne.n	800101c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001018:	2301      	movs	r3, #1
 800101a:	e3d9      	b.n	80017d0 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	6a1a      	ldr	r2, [r3, #32]
 8001020:	4b81      	ldr	r3, [pc, #516]	; (8001228 <HAL_RCC_OscConfig+0x270>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	f003 0308 	and.w	r3, r3, #8
 8001028:	2b00      	cmp	r3, #0
 800102a:	d004      	beq.n	8001036 <HAL_RCC_OscConfig+0x7e>
 800102c:	4b7e      	ldr	r3, [pc, #504]	; (8001228 <HAL_RCC_OscConfig+0x270>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001034:	e005      	b.n	8001042 <HAL_RCC_OscConfig+0x8a>
 8001036:	4b7c      	ldr	r3, [pc, #496]	; (8001228 <HAL_RCC_OscConfig+0x270>)
 8001038:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800103c:	091b      	lsrs	r3, r3, #4
 800103e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001042:	4293      	cmp	r3, r2
 8001044:	d223      	bcs.n	800108e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	6a1b      	ldr	r3, [r3, #32]
 800104a:	4618      	mov	r0, r3
 800104c:	f000 fd54 	bl	8001af8 <RCC_SetFlashLatencyFromMSIRange>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001056:	2301      	movs	r3, #1
 8001058:	e3ba      	b.n	80017d0 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800105a:	4b73      	ldr	r3, [pc, #460]	; (8001228 <HAL_RCC_OscConfig+0x270>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	4a72      	ldr	r2, [pc, #456]	; (8001228 <HAL_RCC_OscConfig+0x270>)
 8001060:	f043 0308 	orr.w	r3, r3, #8
 8001064:	6013      	str	r3, [r2, #0]
 8001066:	4b70      	ldr	r3, [pc, #448]	; (8001228 <HAL_RCC_OscConfig+0x270>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	6a1b      	ldr	r3, [r3, #32]
 8001072:	496d      	ldr	r1, [pc, #436]	; (8001228 <HAL_RCC_OscConfig+0x270>)
 8001074:	4313      	orrs	r3, r2
 8001076:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001078:	4b6b      	ldr	r3, [pc, #428]	; (8001228 <HAL_RCC_OscConfig+0x270>)
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	69db      	ldr	r3, [r3, #28]
 8001084:	021b      	lsls	r3, r3, #8
 8001086:	4968      	ldr	r1, [pc, #416]	; (8001228 <HAL_RCC_OscConfig+0x270>)
 8001088:	4313      	orrs	r3, r2
 800108a:	604b      	str	r3, [r1, #4]
 800108c:	e025      	b.n	80010da <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800108e:	4b66      	ldr	r3, [pc, #408]	; (8001228 <HAL_RCC_OscConfig+0x270>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	4a65      	ldr	r2, [pc, #404]	; (8001228 <HAL_RCC_OscConfig+0x270>)
 8001094:	f043 0308 	orr.w	r3, r3, #8
 8001098:	6013      	str	r3, [r2, #0]
 800109a:	4b63      	ldr	r3, [pc, #396]	; (8001228 <HAL_RCC_OscConfig+0x270>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	6a1b      	ldr	r3, [r3, #32]
 80010a6:	4960      	ldr	r1, [pc, #384]	; (8001228 <HAL_RCC_OscConfig+0x270>)
 80010a8:	4313      	orrs	r3, r2
 80010aa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80010ac:	4b5e      	ldr	r3, [pc, #376]	; (8001228 <HAL_RCC_OscConfig+0x270>)
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	69db      	ldr	r3, [r3, #28]
 80010b8:	021b      	lsls	r3, r3, #8
 80010ba:	495b      	ldr	r1, [pc, #364]	; (8001228 <HAL_RCC_OscConfig+0x270>)
 80010bc:	4313      	orrs	r3, r2
 80010be:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80010c0:	69bb      	ldr	r3, [r7, #24]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d109      	bne.n	80010da <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	6a1b      	ldr	r3, [r3, #32]
 80010ca:	4618      	mov	r0, r3
 80010cc:	f000 fd14 	bl	8001af8 <RCC_SetFlashLatencyFromMSIRange>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80010d6:	2301      	movs	r3, #1
 80010d8:	e37a      	b.n	80017d0 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80010da:	f000 fc81 	bl	80019e0 <HAL_RCC_GetSysClockFreq>
 80010de:	4602      	mov	r2, r0
 80010e0:	4b51      	ldr	r3, [pc, #324]	; (8001228 <HAL_RCC_OscConfig+0x270>)
 80010e2:	689b      	ldr	r3, [r3, #8]
 80010e4:	091b      	lsrs	r3, r3, #4
 80010e6:	f003 030f 	and.w	r3, r3, #15
 80010ea:	4950      	ldr	r1, [pc, #320]	; (800122c <HAL_RCC_OscConfig+0x274>)
 80010ec:	5ccb      	ldrb	r3, [r1, r3]
 80010ee:	f003 031f 	and.w	r3, r3, #31
 80010f2:	fa22 f303 	lsr.w	r3, r2, r3
 80010f6:	4a4e      	ldr	r2, [pc, #312]	; (8001230 <HAL_RCC_OscConfig+0x278>)
 80010f8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80010fa:	4b4e      	ldr	r3, [pc, #312]	; (8001234 <HAL_RCC_OscConfig+0x27c>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	4618      	mov	r0, r3
 8001100:	f7ff fb10 	bl	8000724 <HAL_InitTick>
 8001104:	4603      	mov	r3, r0
 8001106:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001108:	7bfb      	ldrb	r3, [r7, #15]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d052      	beq.n	80011b4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800110e:	7bfb      	ldrb	r3, [r7, #15]
 8001110:	e35e      	b.n	80017d0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	699b      	ldr	r3, [r3, #24]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d032      	beq.n	8001180 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800111a:	4b43      	ldr	r3, [pc, #268]	; (8001228 <HAL_RCC_OscConfig+0x270>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	4a42      	ldr	r2, [pc, #264]	; (8001228 <HAL_RCC_OscConfig+0x270>)
 8001120:	f043 0301 	orr.w	r3, r3, #1
 8001124:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001126:	f7ff fb4d 	bl	80007c4 <HAL_GetTick>
 800112a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800112c:	e008      	b.n	8001140 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800112e:	f7ff fb49 	bl	80007c4 <HAL_GetTick>
 8001132:	4602      	mov	r2, r0
 8001134:	693b      	ldr	r3, [r7, #16]
 8001136:	1ad3      	subs	r3, r2, r3
 8001138:	2b02      	cmp	r3, #2
 800113a:	d901      	bls.n	8001140 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800113c:	2303      	movs	r3, #3
 800113e:	e347      	b.n	80017d0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001140:	4b39      	ldr	r3, [pc, #228]	; (8001228 <HAL_RCC_OscConfig+0x270>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f003 0302 	and.w	r3, r3, #2
 8001148:	2b00      	cmp	r3, #0
 800114a:	d0f0      	beq.n	800112e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800114c:	4b36      	ldr	r3, [pc, #216]	; (8001228 <HAL_RCC_OscConfig+0x270>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4a35      	ldr	r2, [pc, #212]	; (8001228 <HAL_RCC_OscConfig+0x270>)
 8001152:	f043 0308 	orr.w	r3, r3, #8
 8001156:	6013      	str	r3, [r2, #0]
 8001158:	4b33      	ldr	r3, [pc, #204]	; (8001228 <HAL_RCC_OscConfig+0x270>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	6a1b      	ldr	r3, [r3, #32]
 8001164:	4930      	ldr	r1, [pc, #192]	; (8001228 <HAL_RCC_OscConfig+0x270>)
 8001166:	4313      	orrs	r3, r2
 8001168:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800116a:	4b2f      	ldr	r3, [pc, #188]	; (8001228 <HAL_RCC_OscConfig+0x270>)
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	69db      	ldr	r3, [r3, #28]
 8001176:	021b      	lsls	r3, r3, #8
 8001178:	492b      	ldr	r1, [pc, #172]	; (8001228 <HAL_RCC_OscConfig+0x270>)
 800117a:	4313      	orrs	r3, r2
 800117c:	604b      	str	r3, [r1, #4]
 800117e:	e01a      	b.n	80011b6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001180:	4b29      	ldr	r3, [pc, #164]	; (8001228 <HAL_RCC_OscConfig+0x270>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4a28      	ldr	r2, [pc, #160]	; (8001228 <HAL_RCC_OscConfig+0x270>)
 8001186:	f023 0301 	bic.w	r3, r3, #1
 800118a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800118c:	f7ff fb1a 	bl	80007c4 <HAL_GetTick>
 8001190:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001192:	e008      	b.n	80011a6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001194:	f7ff fb16 	bl	80007c4 <HAL_GetTick>
 8001198:	4602      	mov	r2, r0
 800119a:	693b      	ldr	r3, [r7, #16]
 800119c:	1ad3      	subs	r3, r2, r3
 800119e:	2b02      	cmp	r3, #2
 80011a0:	d901      	bls.n	80011a6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80011a2:	2303      	movs	r3, #3
 80011a4:	e314      	b.n	80017d0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80011a6:	4b20      	ldr	r3, [pc, #128]	; (8001228 <HAL_RCC_OscConfig+0x270>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f003 0302 	and.w	r3, r3, #2
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d1f0      	bne.n	8001194 <HAL_RCC_OscConfig+0x1dc>
 80011b2:	e000      	b.n	80011b6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80011b4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f003 0301 	and.w	r3, r3, #1
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d073      	beq.n	80012aa <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80011c2:	69bb      	ldr	r3, [r7, #24]
 80011c4:	2b08      	cmp	r3, #8
 80011c6:	d005      	beq.n	80011d4 <HAL_RCC_OscConfig+0x21c>
 80011c8:	69bb      	ldr	r3, [r7, #24]
 80011ca:	2b0c      	cmp	r3, #12
 80011cc:	d10e      	bne.n	80011ec <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80011ce:	697b      	ldr	r3, [r7, #20]
 80011d0:	2b03      	cmp	r3, #3
 80011d2:	d10b      	bne.n	80011ec <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011d4:	4b14      	ldr	r3, [pc, #80]	; (8001228 <HAL_RCC_OscConfig+0x270>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d063      	beq.n	80012a8 <HAL_RCC_OscConfig+0x2f0>
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d15f      	bne.n	80012a8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80011e8:	2301      	movs	r3, #1
 80011ea:	e2f1      	b.n	80017d0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011f4:	d106      	bne.n	8001204 <HAL_RCC_OscConfig+0x24c>
 80011f6:	4b0c      	ldr	r3, [pc, #48]	; (8001228 <HAL_RCC_OscConfig+0x270>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	4a0b      	ldr	r2, [pc, #44]	; (8001228 <HAL_RCC_OscConfig+0x270>)
 80011fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001200:	6013      	str	r3, [r2, #0]
 8001202:	e025      	b.n	8001250 <HAL_RCC_OscConfig+0x298>
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800120c:	d114      	bne.n	8001238 <HAL_RCC_OscConfig+0x280>
 800120e:	4b06      	ldr	r3, [pc, #24]	; (8001228 <HAL_RCC_OscConfig+0x270>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	4a05      	ldr	r2, [pc, #20]	; (8001228 <HAL_RCC_OscConfig+0x270>)
 8001214:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001218:	6013      	str	r3, [r2, #0]
 800121a:	4b03      	ldr	r3, [pc, #12]	; (8001228 <HAL_RCC_OscConfig+0x270>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	4a02      	ldr	r2, [pc, #8]	; (8001228 <HAL_RCC_OscConfig+0x270>)
 8001220:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001224:	6013      	str	r3, [r2, #0]
 8001226:	e013      	b.n	8001250 <HAL_RCC_OscConfig+0x298>
 8001228:	40021000 	.word	0x40021000
 800122c:	08001c48 	.word	0x08001c48
 8001230:	20000000 	.word	0x20000000
 8001234:	20000004 	.word	0x20000004
 8001238:	4ba0      	ldr	r3, [pc, #640]	; (80014bc <HAL_RCC_OscConfig+0x504>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a9f      	ldr	r2, [pc, #636]	; (80014bc <HAL_RCC_OscConfig+0x504>)
 800123e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001242:	6013      	str	r3, [r2, #0]
 8001244:	4b9d      	ldr	r3, [pc, #628]	; (80014bc <HAL_RCC_OscConfig+0x504>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a9c      	ldr	r2, [pc, #624]	; (80014bc <HAL_RCC_OscConfig+0x504>)
 800124a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800124e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d013      	beq.n	8001280 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001258:	f7ff fab4 	bl	80007c4 <HAL_GetTick>
 800125c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800125e:	e008      	b.n	8001272 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001260:	f7ff fab0 	bl	80007c4 <HAL_GetTick>
 8001264:	4602      	mov	r2, r0
 8001266:	693b      	ldr	r3, [r7, #16]
 8001268:	1ad3      	subs	r3, r2, r3
 800126a:	2b64      	cmp	r3, #100	; 0x64
 800126c:	d901      	bls.n	8001272 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800126e:	2303      	movs	r3, #3
 8001270:	e2ae      	b.n	80017d0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001272:	4b92      	ldr	r3, [pc, #584]	; (80014bc <HAL_RCC_OscConfig+0x504>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800127a:	2b00      	cmp	r3, #0
 800127c:	d0f0      	beq.n	8001260 <HAL_RCC_OscConfig+0x2a8>
 800127e:	e014      	b.n	80012aa <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001280:	f7ff faa0 	bl	80007c4 <HAL_GetTick>
 8001284:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001286:	e008      	b.n	800129a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001288:	f7ff fa9c 	bl	80007c4 <HAL_GetTick>
 800128c:	4602      	mov	r2, r0
 800128e:	693b      	ldr	r3, [r7, #16]
 8001290:	1ad3      	subs	r3, r2, r3
 8001292:	2b64      	cmp	r3, #100	; 0x64
 8001294:	d901      	bls.n	800129a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001296:	2303      	movs	r3, #3
 8001298:	e29a      	b.n	80017d0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800129a:	4b88      	ldr	r3, [pc, #544]	; (80014bc <HAL_RCC_OscConfig+0x504>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d1f0      	bne.n	8001288 <HAL_RCC_OscConfig+0x2d0>
 80012a6:	e000      	b.n	80012aa <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f003 0302 	and.w	r3, r3, #2
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d060      	beq.n	8001378 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80012b6:	69bb      	ldr	r3, [r7, #24]
 80012b8:	2b04      	cmp	r3, #4
 80012ba:	d005      	beq.n	80012c8 <HAL_RCC_OscConfig+0x310>
 80012bc:	69bb      	ldr	r3, [r7, #24]
 80012be:	2b0c      	cmp	r3, #12
 80012c0:	d119      	bne.n	80012f6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80012c2:	697b      	ldr	r3, [r7, #20]
 80012c4:	2b02      	cmp	r3, #2
 80012c6:	d116      	bne.n	80012f6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80012c8:	4b7c      	ldr	r3, [pc, #496]	; (80014bc <HAL_RCC_OscConfig+0x504>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d005      	beq.n	80012e0 <HAL_RCC_OscConfig+0x328>
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	68db      	ldr	r3, [r3, #12]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d101      	bne.n	80012e0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80012dc:	2301      	movs	r3, #1
 80012de:	e277      	b.n	80017d0 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012e0:	4b76      	ldr	r3, [pc, #472]	; (80014bc <HAL_RCC_OscConfig+0x504>)
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	691b      	ldr	r3, [r3, #16]
 80012ec:	061b      	lsls	r3, r3, #24
 80012ee:	4973      	ldr	r1, [pc, #460]	; (80014bc <HAL_RCC_OscConfig+0x504>)
 80012f0:	4313      	orrs	r3, r2
 80012f2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80012f4:	e040      	b.n	8001378 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	68db      	ldr	r3, [r3, #12]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d023      	beq.n	8001346 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012fe:	4b6f      	ldr	r3, [pc, #444]	; (80014bc <HAL_RCC_OscConfig+0x504>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4a6e      	ldr	r2, [pc, #440]	; (80014bc <HAL_RCC_OscConfig+0x504>)
 8001304:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001308:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800130a:	f7ff fa5b 	bl	80007c4 <HAL_GetTick>
 800130e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001310:	e008      	b.n	8001324 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001312:	f7ff fa57 	bl	80007c4 <HAL_GetTick>
 8001316:	4602      	mov	r2, r0
 8001318:	693b      	ldr	r3, [r7, #16]
 800131a:	1ad3      	subs	r3, r2, r3
 800131c:	2b02      	cmp	r3, #2
 800131e:	d901      	bls.n	8001324 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001320:	2303      	movs	r3, #3
 8001322:	e255      	b.n	80017d0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001324:	4b65      	ldr	r3, [pc, #404]	; (80014bc <HAL_RCC_OscConfig+0x504>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800132c:	2b00      	cmp	r3, #0
 800132e:	d0f0      	beq.n	8001312 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001330:	4b62      	ldr	r3, [pc, #392]	; (80014bc <HAL_RCC_OscConfig+0x504>)
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	691b      	ldr	r3, [r3, #16]
 800133c:	061b      	lsls	r3, r3, #24
 800133e:	495f      	ldr	r1, [pc, #380]	; (80014bc <HAL_RCC_OscConfig+0x504>)
 8001340:	4313      	orrs	r3, r2
 8001342:	604b      	str	r3, [r1, #4]
 8001344:	e018      	b.n	8001378 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001346:	4b5d      	ldr	r3, [pc, #372]	; (80014bc <HAL_RCC_OscConfig+0x504>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4a5c      	ldr	r2, [pc, #368]	; (80014bc <HAL_RCC_OscConfig+0x504>)
 800134c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001350:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001352:	f7ff fa37 	bl	80007c4 <HAL_GetTick>
 8001356:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001358:	e008      	b.n	800136c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800135a:	f7ff fa33 	bl	80007c4 <HAL_GetTick>
 800135e:	4602      	mov	r2, r0
 8001360:	693b      	ldr	r3, [r7, #16]
 8001362:	1ad3      	subs	r3, r2, r3
 8001364:	2b02      	cmp	r3, #2
 8001366:	d901      	bls.n	800136c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001368:	2303      	movs	r3, #3
 800136a:	e231      	b.n	80017d0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800136c:	4b53      	ldr	r3, [pc, #332]	; (80014bc <HAL_RCC_OscConfig+0x504>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001374:	2b00      	cmp	r3, #0
 8001376:	d1f0      	bne.n	800135a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f003 0308 	and.w	r3, r3, #8
 8001380:	2b00      	cmp	r3, #0
 8001382:	d03c      	beq.n	80013fe <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	695b      	ldr	r3, [r3, #20]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d01c      	beq.n	80013c6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800138c:	4b4b      	ldr	r3, [pc, #300]	; (80014bc <HAL_RCC_OscConfig+0x504>)
 800138e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001392:	4a4a      	ldr	r2, [pc, #296]	; (80014bc <HAL_RCC_OscConfig+0x504>)
 8001394:	f043 0301 	orr.w	r3, r3, #1
 8001398:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800139c:	f7ff fa12 	bl	80007c4 <HAL_GetTick>
 80013a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80013a2:	e008      	b.n	80013b6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013a4:	f7ff fa0e 	bl	80007c4 <HAL_GetTick>
 80013a8:	4602      	mov	r2, r0
 80013aa:	693b      	ldr	r3, [r7, #16]
 80013ac:	1ad3      	subs	r3, r2, r3
 80013ae:	2b02      	cmp	r3, #2
 80013b0:	d901      	bls.n	80013b6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80013b2:	2303      	movs	r3, #3
 80013b4:	e20c      	b.n	80017d0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80013b6:	4b41      	ldr	r3, [pc, #260]	; (80014bc <HAL_RCC_OscConfig+0x504>)
 80013b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80013bc:	f003 0302 	and.w	r3, r3, #2
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d0ef      	beq.n	80013a4 <HAL_RCC_OscConfig+0x3ec>
 80013c4:	e01b      	b.n	80013fe <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013c6:	4b3d      	ldr	r3, [pc, #244]	; (80014bc <HAL_RCC_OscConfig+0x504>)
 80013c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80013cc:	4a3b      	ldr	r2, [pc, #236]	; (80014bc <HAL_RCC_OscConfig+0x504>)
 80013ce:	f023 0301 	bic.w	r3, r3, #1
 80013d2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013d6:	f7ff f9f5 	bl	80007c4 <HAL_GetTick>
 80013da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80013dc:	e008      	b.n	80013f0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013de:	f7ff f9f1 	bl	80007c4 <HAL_GetTick>
 80013e2:	4602      	mov	r2, r0
 80013e4:	693b      	ldr	r3, [r7, #16]
 80013e6:	1ad3      	subs	r3, r2, r3
 80013e8:	2b02      	cmp	r3, #2
 80013ea:	d901      	bls.n	80013f0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80013ec:	2303      	movs	r3, #3
 80013ee:	e1ef      	b.n	80017d0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80013f0:	4b32      	ldr	r3, [pc, #200]	; (80014bc <HAL_RCC_OscConfig+0x504>)
 80013f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80013f6:	f003 0302 	and.w	r3, r3, #2
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d1ef      	bne.n	80013de <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f003 0304 	and.w	r3, r3, #4
 8001406:	2b00      	cmp	r3, #0
 8001408:	f000 80a6 	beq.w	8001558 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800140c:	2300      	movs	r3, #0
 800140e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001410:	4b2a      	ldr	r3, [pc, #168]	; (80014bc <HAL_RCC_OscConfig+0x504>)
 8001412:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001414:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001418:	2b00      	cmp	r3, #0
 800141a:	d10d      	bne.n	8001438 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800141c:	4b27      	ldr	r3, [pc, #156]	; (80014bc <HAL_RCC_OscConfig+0x504>)
 800141e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001420:	4a26      	ldr	r2, [pc, #152]	; (80014bc <HAL_RCC_OscConfig+0x504>)
 8001422:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001426:	6593      	str	r3, [r2, #88]	; 0x58
 8001428:	4b24      	ldr	r3, [pc, #144]	; (80014bc <HAL_RCC_OscConfig+0x504>)
 800142a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800142c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001430:	60bb      	str	r3, [r7, #8]
 8001432:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001434:	2301      	movs	r3, #1
 8001436:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001438:	4b21      	ldr	r3, [pc, #132]	; (80014c0 <HAL_RCC_OscConfig+0x508>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001440:	2b00      	cmp	r3, #0
 8001442:	d118      	bne.n	8001476 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001444:	4b1e      	ldr	r3, [pc, #120]	; (80014c0 <HAL_RCC_OscConfig+0x508>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4a1d      	ldr	r2, [pc, #116]	; (80014c0 <HAL_RCC_OscConfig+0x508>)
 800144a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800144e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001450:	f7ff f9b8 	bl	80007c4 <HAL_GetTick>
 8001454:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001456:	e008      	b.n	800146a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001458:	f7ff f9b4 	bl	80007c4 <HAL_GetTick>
 800145c:	4602      	mov	r2, r0
 800145e:	693b      	ldr	r3, [r7, #16]
 8001460:	1ad3      	subs	r3, r2, r3
 8001462:	2b02      	cmp	r3, #2
 8001464:	d901      	bls.n	800146a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001466:	2303      	movs	r3, #3
 8001468:	e1b2      	b.n	80017d0 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800146a:	4b15      	ldr	r3, [pc, #84]	; (80014c0 <HAL_RCC_OscConfig+0x508>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001472:	2b00      	cmp	r3, #0
 8001474:	d0f0      	beq.n	8001458 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	689b      	ldr	r3, [r3, #8]
 800147a:	2b01      	cmp	r3, #1
 800147c:	d108      	bne.n	8001490 <HAL_RCC_OscConfig+0x4d8>
 800147e:	4b0f      	ldr	r3, [pc, #60]	; (80014bc <HAL_RCC_OscConfig+0x504>)
 8001480:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001484:	4a0d      	ldr	r2, [pc, #52]	; (80014bc <HAL_RCC_OscConfig+0x504>)
 8001486:	f043 0301 	orr.w	r3, r3, #1
 800148a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800148e:	e029      	b.n	80014e4 <HAL_RCC_OscConfig+0x52c>
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	689b      	ldr	r3, [r3, #8]
 8001494:	2b05      	cmp	r3, #5
 8001496:	d115      	bne.n	80014c4 <HAL_RCC_OscConfig+0x50c>
 8001498:	4b08      	ldr	r3, [pc, #32]	; (80014bc <HAL_RCC_OscConfig+0x504>)
 800149a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800149e:	4a07      	ldr	r2, [pc, #28]	; (80014bc <HAL_RCC_OscConfig+0x504>)
 80014a0:	f043 0304 	orr.w	r3, r3, #4
 80014a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80014a8:	4b04      	ldr	r3, [pc, #16]	; (80014bc <HAL_RCC_OscConfig+0x504>)
 80014aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014ae:	4a03      	ldr	r2, [pc, #12]	; (80014bc <HAL_RCC_OscConfig+0x504>)
 80014b0:	f043 0301 	orr.w	r3, r3, #1
 80014b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80014b8:	e014      	b.n	80014e4 <HAL_RCC_OscConfig+0x52c>
 80014ba:	bf00      	nop
 80014bc:	40021000 	.word	0x40021000
 80014c0:	40007000 	.word	0x40007000
 80014c4:	4b9a      	ldr	r3, [pc, #616]	; (8001730 <HAL_RCC_OscConfig+0x778>)
 80014c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014ca:	4a99      	ldr	r2, [pc, #612]	; (8001730 <HAL_RCC_OscConfig+0x778>)
 80014cc:	f023 0301 	bic.w	r3, r3, #1
 80014d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80014d4:	4b96      	ldr	r3, [pc, #600]	; (8001730 <HAL_RCC_OscConfig+0x778>)
 80014d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014da:	4a95      	ldr	r2, [pc, #596]	; (8001730 <HAL_RCC_OscConfig+0x778>)
 80014dc:	f023 0304 	bic.w	r3, r3, #4
 80014e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	689b      	ldr	r3, [r3, #8]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d016      	beq.n	800151a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014ec:	f7ff f96a 	bl	80007c4 <HAL_GetTick>
 80014f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80014f2:	e00a      	b.n	800150a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014f4:	f7ff f966 	bl	80007c4 <HAL_GetTick>
 80014f8:	4602      	mov	r2, r0
 80014fa:	693b      	ldr	r3, [r7, #16]
 80014fc:	1ad3      	subs	r3, r2, r3
 80014fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001502:	4293      	cmp	r3, r2
 8001504:	d901      	bls.n	800150a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001506:	2303      	movs	r3, #3
 8001508:	e162      	b.n	80017d0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800150a:	4b89      	ldr	r3, [pc, #548]	; (8001730 <HAL_RCC_OscConfig+0x778>)
 800150c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001510:	f003 0302 	and.w	r3, r3, #2
 8001514:	2b00      	cmp	r3, #0
 8001516:	d0ed      	beq.n	80014f4 <HAL_RCC_OscConfig+0x53c>
 8001518:	e015      	b.n	8001546 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800151a:	f7ff f953 	bl	80007c4 <HAL_GetTick>
 800151e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001520:	e00a      	b.n	8001538 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001522:	f7ff f94f 	bl	80007c4 <HAL_GetTick>
 8001526:	4602      	mov	r2, r0
 8001528:	693b      	ldr	r3, [r7, #16]
 800152a:	1ad3      	subs	r3, r2, r3
 800152c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001530:	4293      	cmp	r3, r2
 8001532:	d901      	bls.n	8001538 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001534:	2303      	movs	r3, #3
 8001536:	e14b      	b.n	80017d0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001538:	4b7d      	ldr	r3, [pc, #500]	; (8001730 <HAL_RCC_OscConfig+0x778>)
 800153a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800153e:	f003 0302 	and.w	r3, r3, #2
 8001542:	2b00      	cmp	r3, #0
 8001544:	d1ed      	bne.n	8001522 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001546:	7ffb      	ldrb	r3, [r7, #31]
 8001548:	2b01      	cmp	r3, #1
 800154a:	d105      	bne.n	8001558 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800154c:	4b78      	ldr	r3, [pc, #480]	; (8001730 <HAL_RCC_OscConfig+0x778>)
 800154e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001550:	4a77      	ldr	r2, [pc, #476]	; (8001730 <HAL_RCC_OscConfig+0x778>)
 8001552:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001556:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f003 0320 	and.w	r3, r3, #32
 8001560:	2b00      	cmp	r3, #0
 8001562:	d03c      	beq.n	80015de <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001568:	2b00      	cmp	r3, #0
 800156a:	d01c      	beq.n	80015a6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800156c:	4b70      	ldr	r3, [pc, #448]	; (8001730 <HAL_RCC_OscConfig+0x778>)
 800156e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001572:	4a6f      	ldr	r2, [pc, #444]	; (8001730 <HAL_RCC_OscConfig+0x778>)
 8001574:	f043 0301 	orr.w	r3, r3, #1
 8001578:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800157c:	f7ff f922 	bl	80007c4 <HAL_GetTick>
 8001580:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001582:	e008      	b.n	8001596 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001584:	f7ff f91e 	bl	80007c4 <HAL_GetTick>
 8001588:	4602      	mov	r2, r0
 800158a:	693b      	ldr	r3, [r7, #16]
 800158c:	1ad3      	subs	r3, r2, r3
 800158e:	2b02      	cmp	r3, #2
 8001590:	d901      	bls.n	8001596 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001592:	2303      	movs	r3, #3
 8001594:	e11c      	b.n	80017d0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001596:	4b66      	ldr	r3, [pc, #408]	; (8001730 <HAL_RCC_OscConfig+0x778>)
 8001598:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800159c:	f003 0302 	and.w	r3, r3, #2
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d0ef      	beq.n	8001584 <HAL_RCC_OscConfig+0x5cc>
 80015a4:	e01b      	b.n	80015de <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80015a6:	4b62      	ldr	r3, [pc, #392]	; (8001730 <HAL_RCC_OscConfig+0x778>)
 80015a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80015ac:	4a60      	ldr	r2, [pc, #384]	; (8001730 <HAL_RCC_OscConfig+0x778>)
 80015ae:	f023 0301 	bic.w	r3, r3, #1
 80015b2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015b6:	f7ff f905 	bl	80007c4 <HAL_GetTick>
 80015ba:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80015bc:	e008      	b.n	80015d0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80015be:	f7ff f901 	bl	80007c4 <HAL_GetTick>
 80015c2:	4602      	mov	r2, r0
 80015c4:	693b      	ldr	r3, [r7, #16]
 80015c6:	1ad3      	subs	r3, r2, r3
 80015c8:	2b02      	cmp	r3, #2
 80015ca:	d901      	bls.n	80015d0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80015cc:	2303      	movs	r3, #3
 80015ce:	e0ff      	b.n	80017d0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80015d0:	4b57      	ldr	r3, [pc, #348]	; (8001730 <HAL_RCC_OscConfig+0x778>)
 80015d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80015d6:	f003 0302 	and.w	r3, r3, #2
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d1ef      	bne.n	80015be <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	f000 80f3 	beq.w	80017ce <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015ec:	2b02      	cmp	r3, #2
 80015ee:	f040 80c9 	bne.w	8001784 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80015f2:	4b4f      	ldr	r3, [pc, #316]	; (8001730 <HAL_RCC_OscConfig+0x778>)
 80015f4:	68db      	ldr	r3, [r3, #12]
 80015f6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	f003 0203 	and.w	r2, r3, #3
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001602:	429a      	cmp	r2, r3
 8001604:	d12c      	bne.n	8001660 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001606:	697b      	ldr	r3, [r7, #20]
 8001608:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001610:	3b01      	subs	r3, #1
 8001612:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001614:	429a      	cmp	r2, r3
 8001616:	d123      	bne.n	8001660 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001622:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001624:	429a      	cmp	r2, r3
 8001626:	d11b      	bne.n	8001660 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001632:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001634:	429a      	cmp	r2, r3
 8001636:	d113      	bne.n	8001660 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001642:	085b      	lsrs	r3, r3, #1
 8001644:	3b01      	subs	r3, #1
 8001646:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001648:	429a      	cmp	r2, r3
 800164a:	d109      	bne.n	8001660 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800164c:	697b      	ldr	r3, [r7, #20]
 800164e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001656:	085b      	lsrs	r3, r3, #1
 8001658:	3b01      	subs	r3, #1
 800165a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800165c:	429a      	cmp	r2, r3
 800165e:	d06b      	beq.n	8001738 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001660:	69bb      	ldr	r3, [r7, #24]
 8001662:	2b0c      	cmp	r3, #12
 8001664:	d062      	beq.n	800172c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001666:	4b32      	ldr	r3, [pc, #200]	; (8001730 <HAL_RCC_OscConfig+0x778>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800166e:	2b00      	cmp	r3, #0
 8001670:	d001      	beq.n	8001676 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8001672:	2301      	movs	r3, #1
 8001674:	e0ac      	b.n	80017d0 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001676:	4b2e      	ldr	r3, [pc, #184]	; (8001730 <HAL_RCC_OscConfig+0x778>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4a2d      	ldr	r2, [pc, #180]	; (8001730 <HAL_RCC_OscConfig+0x778>)
 800167c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001680:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001682:	f7ff f89f 	bl	80007c4 <HAL_GetTick>
 8001686:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001688:	e008      	b.n	800169c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800168a:	f7ff f89b 	bl	80007c4 <HAL_GetTick>
 800168e:	4602      	mov	r2, r0
 8001690:	693b      	ldr	r3, [r7, #16]
 8001692:	1ad3      	subs	r3, r2, r3
 8001694:	2b02      	cmp	r3, #2
 8001696:	d901      	bls.n	800169c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001698:	2303      	movs	r3, #3
 800169a:	e099      	b.n	80017d0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800169c:	4b24      	ldr	r3, [pc, #144]	; (8001730 <HAL_RCC_OscConfig+0x778>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d1f0      	bne.n	800168a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80016a8:	4b21      	ldr	r3, [pc, #132]	; (8001730 <HAL_RCC_OscConfig+0x778>)
 80016aa:	68da      	ldr	r2, [r3, #12]
 80016ac:	4b21      	ldr	r3, [pc, #132]	; (8001734 <HAL_RCC_OscConfig+0x77c>)
 80016ae:	4013      	ands	r3, r2
 80016b0:	687a      	ldr	r2, [r7, #4]
 80016b2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80016b4:	687a      	ldr	r2, [r7, #4]
 80016b6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80016b8:	3a01      	subs	r2, #1
 80016ba:	0112      	lsls	r2, r2, #4
 80016bc:	4311      	orrs	r1, r2
 80016be:	687a      	ldr	r2, [r7, #4]
 80016c0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80016c2:	0212      	lsls	r2, r2, #8
 80016c4:	4311      	orrs	r1, r2
 80016c6:	687a      	ldr	r2, [r7, #4]
 80016c8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80016ca:	0852      	lsrs	r2, r2, #1
 80016cc:	3a01      	subs	r2, #1
 80016ce:	0552      	lsls	r2, r2, #21
 80016d0:	4311      	orrs	r1, r2
 80016d2:	687a      	ldr	r2, [r7, #4]
 80016d4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80016d6:	0852      	lsrs	r2, r2, #1
 80016d8:	3a01      	subs	r2, #1
 80016da:	0652      	lsls	r2, r2, #25
 80016dc:	4311      	orrs	r1, r2
 80016de:	687a      	ldr	r2, [r7, #4]
 80016e0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80016e2:	06d2      	lsls	r2, r2, #27
 80016e4:	430a      	orrs	r2, r1
 80016e6:	4912      	ldr	r1, [pc, #72]	; (8001730 <HAL_RCC_OscConfig+0x778>)
 80016e8:	4313      	orrs	r3, r2
 80016ea:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80016ec:	4b10      	ldr	r3, [pc, #64]	; (8001730 <HAL_RCC_OscConfig+0x778>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a0f      	ldr	r2, [pc, #60]	; (8001730 <HAL_RCC_OscConfig+0x778>)
 80016f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80016f6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80016f8:	4b0d      	ldr	r3, [pc, #52]	; (8001730 <HAL_RCC_OscConfig+0x778>)
 80016fa:	68db      	ldr	r3, [r3, #12]
 80016fc:	4a0c      	ldr	r2, [pc, #48]	; (8001730 <HAL_RCC_OscConfig+0x778>)
 80016fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001702:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001704:	f7ff f85e 	bl	80007c4 <HAL_GetTick>
 8001708:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800170a:	e008      	b.n	800171e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800170c:	f7ff f85a 	bl	80007c4 <HAL_GetTick>
 8001710:	4602      	mov	r2, r0
 8001712:	693b      	ldr	r3, [r7, #16]
 8001714:	1ad3      	subs	r3, r2, r3
 8001716:	2b02      	cmp	r3, #2
 8001718:	d901      	bls.n	800171e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800171a:	2303      	movs	r3, #3
 800171c:	e058      	b.n	80017d0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800171e:	4b04      	ldr	r3, [pc, #16]	; (8001730 <HAL_RCC_OscConfig+0x778>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001726:	2b00      	cmp	r3, #0
 8001728:	d0f0      	beq.n	800170c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800172a:	e050      	b.n	80017ce <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800172c:	2301      	movs	r3, #1
 800172e:	e04f      	b.n	80017d0 <HAL_RCC_OscConfig+0x818>
 8001730:	40021000 	.word	0x40021000
 8001734:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001738:	4b27      	ldr	r3, [pc, #156]	; (80017d8 <HAL_RCC_OscConfig+0x820>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001740:	2b00      	cmp	r3, #0
 8001742:	d144      	bne.n	80017ce <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001744:	4b24      	ldr	r3, [pc, #144]	; (80017d8 <HAL_RCC_OscConfig+0x820>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a23      	ldr	r2, [pc, #140]	; (80017d8 <HAL_RCC_OscConfig+0x820>)
 800174a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800174e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001750:	4b21      	ldr	r3, [pc, #132]	; (80017d8 <HAL_RCC_OscConfig+0x820>)
 8001752:	68db      	ldr	r3, [r3, #12]
 8001754:	4a20      	ldr	r2, [pc, #128]	; (80017d8 <HAL_RCC_OscConfig+0x820>)
 8001756:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800175a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800175c:	f7ff f832 	bl	80007c4 <HAL_GetTick>
 8001760:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001762:	e008      	b.n	8001776 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001764:	f7ff f82e 	bl	80007c4 <HAL_GetTick>
 8001768:	4602      	mov	r2, r0
 800176a:	693b      	ldr	r3, [r7, #16]
 800176c:	1ad3      	subs	r3, r2, r3
 800176e:	2b02      	cmp	r3, #2
 8001770:	d901      	bls.n	8001776 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8001772:	2303      	movs	r3, #3
 8001774:	e02c      	b.n	80017d0 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001776:	4b18      	ldr	r3, [pc, #96]	; (80017d8 <HAL_RCC_OscConfig+0x820>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800177e:	2b00      	cmp	r3, #0
 8001780:	d0f0      	beq.n	8001764 <HAL_RCC_OscConfig+0x7ac>
 8001782:	e024      	b.n	80017ce <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001784:	69bb      	ldr	r3, [r7, #24]
 8001786:	2b0c      	cmp	r3, #12
 8001788:	d01f      	beq.n	80017ca <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800178a:	4b13      	ldr	r3, [pc, #76]	; (80017d8 <HAL_RCC_OscConfig+0x820>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4a12      	ldr	r2, [pc, #72]	; (80017d8 <HAL_RCC_OscConfig+0x820>)
 8001790:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001794:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001796:	f7ff f815 	bl	80007c4 <HAL_GetTick>
 800179a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800179c:	e008      	b.n	80017b0 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800179e:	f7ff f811 	bl	80007c4 <HAL_GetTick>
 80017a2:	4602      	mov	r2, r0
 80017a4:	693b      	ldr	r3, [r7, #16]
 80017a6:	1ad3      	subs	r3, r2, r3
 80017a8:	2b02      	cmp	r3, #2
 80017aa:	d901      	bls.n	80017b0 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80017ac:	2303      	movs	r3, #3
 80017ae:	e00f      	b.n	80017d0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017b0:	4b09      	ldr	r3, [pc, #36]	; (80017d8 <HAL_RCC_OscConfig+0x820>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d1f0      	bne.n	800179e <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80017bc:	4b06      	ldr	r3, [pc, #24]	; (80017d8 <HAL_RCC_OscConfig+0x820>)
 80017be:	68da      	ldr	r2, [r3, #12]
 80017c0:	4905      	ldr	r1, [pc, #20]	; (80017d8 <HAL_RCC_OscConfig+0x820>)
 80017c2:	4b06      	ldr	r3, [pc, #24]	; (80017dc <HAL_RCC_OscConfig+0x824>)
 80017c4:	4013      	ands	r3, r2
 80017c6:	60cb      	str	r3, [r1, #12]
 80017c8:	e001      	b.n	80017ce <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
 80017cc:	e000      	b.n	80017d0 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80017ce:	2300      	movs	r3, #0
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	3720      	adds	r7, #32
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	40021000 	.word	0x40021000
 80017dc:	feeefffc 	.word	0xfeeefffc

080017e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b084      	sub	sp, #16
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
 80017e8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d101      	bne.n	80017f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017f0:	2301      	movs	r3, #1
 80017f2:	e0e7      	b.n	80019c4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80017f4:	4b75      	ldr	r3, [pc, #468]	; (80019cc <HAL_RCC_ClockConfig+0x1ec>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f003 0307 	and.w	r3, r3, #7
 80017fc:	683a      	ldr	r2, [r7, #0]
 80017fe:	429a      	cmp	r2, r3
 8001800:	d910      	bls.n	8001824 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001802:	4b72      	ldr	r3, [pc, #456]	; (80019cc <HAL_RCC_ClockConfig+0x1ec>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f023 0207 	bic.w	r2, r3, #7
 800180a:	4970      	ldr	r1, [pc, #448]	; (80019cc <HAL_RCC_ClockConfig+0x1ec>)
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	4313      	orrs	r3, r2
 8001810:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001812:	4b6e      	ldr	r3, [pc, #440]	; (80019cc <HAL_RCC_ClockConfig+0x1ec>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f003 0307 	and.w	r3, r3, #7
 800181a:	683a      	ldr	r2, [r7, #0]
 800181c:	429a      	cmp	r2, r3
 800181e:	d001      	beq.n	8001824 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001820:	2301      	movs	r3, #1
 8001822:	e0cf      	b.n	80019c4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f003 0302 	and.w	r3, r3, #2
 800182c:	2b00      	cmp	r3, #0
 800182e:	d010      	beq.n	8001852 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	689a      	ldr	r2, [r3, #8]
 8001834:	4b66      	ldr	r3, [pc, #408]	; (80019d0 <HAL_RCC_ClockConfig+0x1f0>)
 8001836:	689b      	ldr	r3, [r3, #8]
 8001838:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800183c:	429a      	cmp	r2, r3
 800183e:	d908      	bls.n	8001852 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001840:	4b63      	ldr	r3, [pc, #396]	; (80019d0 <HAL_RCC_ClockConfig+0x1f0>)
 8001842:	689b      	ldr	r3, [r3, #8]
 8001844:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	689b      	ldr	r3, [r3, #8]
 800184c:	4960      	ldr	r1, [pc, #384]	; (80019d0 <HAL_RCC_ClockConfig+0x1f0>)
 800184e:	4313      	orrs	r3, r2
 8001850:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f003 0301 	and.w	r3, r3, #1
 800185a:	2b00      	cmp	r3, #0
 800185c:	d04c      	beq.n	80018f8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	2b03      	cmp	r3, #3
 8001864:	d107      	bne.n	8001876 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001866:	4b5a      	ldr	r3, [pc, #360]	; (80019d0 <HAL_RCC_ClockConfig+0x1f0>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800186e:	2b00      	cmp	r3, #0
 8001870:	d121      	bne.n	80018b6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001872:	2301      	movs	r3, #1
 8001874:	e0a6      	b.n	80019c4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	2b02      	cmp	r3, #2
 800187c:	d107      	bne.n	800188e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800187e:	4b54      	ldr	r3, [pc, #336]	; (80019d0 <HAL_RCC_ClockConfig+0x1f0>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001886:	2b00      	cmp	r3, #0
 8001888:	d115      	bne.n	80018b6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800188a:	2301      	movs	r3, #1
 800188c:	e09a      	b.n	80019c4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d107      	bne.n	80018a6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001896:	4b4e      	ldr	r3, [pc, #312]	; (80019d0 <HAL_RCC_ClockConfig+0x1f0>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f003 0302 	and.w	r3, r3, #2
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d109      	bne.n	80018b6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80018a2:	2301      	movs	r3, #1
 80018a4:	e08e      	b.n	80019c4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80018a6:	4b4a      	ldr	r3, [pc, #296]	; (80019d0 <HAL_RCC_ClockConfig+0x1f0>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d101      	bne.n	80018b6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
 80018b4:	e086      	b.n	80019c4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80018b6:	4b46      	ldr	r3, [pc, #280]	; (80019d0 <HAL_RCC_ClockConfig+0x1f0>)
 80018b8:	689b      	ldr	r3, [r3, #8]
 80018ba:	f023 0203 	bic.w	r2, r3, #3
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	4943      	ldr	r1, [pc, #268]	; (80019d0 <HAL_RCC_ClockConfig+0x1f0>)
 80018c4:	4313      	orrs	r3, r2
 80018c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80018c8:	f7fe ff7c 	bl	80007c4 <HAL_GetTick>
 80018cc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018ce:	e00a      	b.n	80018e6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018d0:	f7fe ff78 	bl	80007c4 <HAL_GetTick>
 80018d4:	4602      	mov	r2, r0
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	1ad3      	subs	r3, r2, r3
 80018da:	f241 3288 	movw	r2, #5000	; 0x1388
 80018de:	4293      	cmp	r3, r2
 80018e0:	d901      	bls.n	80018e6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80018e2:	2303      	movs	r3, #3
 80018e4:	e06e      	b.n	80019c4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018e6:	4b3a      	ldr	r3, [pc, #232]	; (80019d0 <HAL_RCC_ClockConfig+0x1f0>)
 80018e8:	689b      	ldr	r3, [r3, #8]
 80018ea:	f003 020c 	and.w	r2, r3, #12
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	009b      	lsls	r3, r3, #2
 80018f4:	429a      	cmp	r2, r3
 80018f6:	d1eb      	bne.n	80018d0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f003 0302 	and.w	r3, r3, #2
 8001900:	2b00      	cmp	r3, #0
 8001902:	d010      	beq.n	8001926 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	689a      	ldr	r2, [r3, #8]
 8001908:	4b31      	ldr	r3, [pc, #196]	; (80019d0 <HAL_RCC_ClockConfig+0x1f0>)
 800190a:	689b      	ldr	r3, [r3, #8]
 800190c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001910:	429a      	cmp	r2, r3
 8001912:	d208      	bcs.n	8001926 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001914:	4b2e      	ldr	r3, [pc, #184]	; (80019d0 <HAL_RCC_ClockConfig+0x1f0>)
 8001916:	689b      	ldr	r3, [r3, #8]
 8001918:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	689b      	ldr	r3, [r3, #8]
 8001920:	492b      	ldr	r1, [pc, #172]	; (80019d0 <HAL_RCC_ClockConfig+0x1f0>)
 8001922:	4313      	orrs	r3, r2
 8001924:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001926:	4b29      	ldr	r3, [pc, #164]	; (80019cc <HAL_RCC_ClockConfig+0x1ec>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f003 0307 	and.w	r3, r3, #7
 800192e:	683a      	ldr	r2, [r7, #0]
 8001930:	429a      	cmp	r2, r3
 8001932:	d210      	bcs.n	8001956 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001934:	4b25      	ldr	r3, [pc, #148]	; (80019cc <HAL_RCC_ClockConfig+0x1ec>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f023 0207 	bic.w	r2, r3, #7
 800193c:	4923      	ldr	r1, [pc, #140]	; (80019cc <HAL_RCC_ClockConfig+0x1ec>)
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	4313      	orrs	r3, r2
 8001942:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001944:	4b21      	ldr	r3, [pc, #132]	; (80019cc <HAL_RCC_ClockConfig+0x1ec>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f003 0307 	and.w	r3, r3, #7
 800194c:	683a      	ldr	r2, [r7, #0]
 800194e:	429a      	cmp	r2, r3
 8001950:	d001      	beq.n	8001956 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001952:	2301      	movs	r3, #1
 8001954:	e036      	b.n	80019c4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f003 0304 	and.w	r3, r3, #4
 800195e:	2b00      	cmp	r3, #0
 8001960:	d008      	beq.n	8001974 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001962:	4b1b      	ldr	r3, [pc, #108]	; (80019d0 <HAL_RCC_ClockConfig+0x1f0>)
 8001964:	689b      	ldr	r3, [r3, #8]
 8001966:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	68db      	ldr	r3, [r3, #12]
 800196e:	4918      	ldr	r1, [pc, #96]	; (80019d0 <HAL_RCC_ClockConfig+0x1f0>)
 8001970:	4313      	orrs	r3, r2
 8001972:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f003 0308 	and.w	r3, r3, #8
 800197c:	2b00      	cmp	r3, #0
 800197e:	d009      	beq.n	8001994 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001980:	4b13      	ldr	r3, [pc, #76]	; (80019d0 <HAL_RCC_ClockConfig+0x1f0>)
 8001982:	689b      	ldr	r3, [r3, #8]
 8001984:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	691b      	ldr	r3, [r3, #16]
 800198c:	00db      	lsls	r3, r3, #3
 800198e:	4910      	ldr	r1, [pc, #64]	; (80019d0 <HAL_RCC_ClockConfig+0x1f0>)
 8001990:	4313      	orrs	r3, r2
 8001992:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001994:	f000 f824 	bl	80019e0 <HAL_RCC_GetSysClockFreq>
 8001998:	4602      	mov	r2, r0
 800199a:	4b0d      	ldr	r3, [pc, #52]	; (80019d0 <HAL_RCC_ClockConfig+0x1f0>)
 800199c:	689b      	ldr	r3, [r3, #8]
 800199e:	091b      	lsrs	r3, r3, #4
 80019a0:	f003 030f 	and.w	r3, r3, #15
 80019a4:	490b      	ldr	r1, [pc, #44]	; (80019d4 <HAL_RCC_ClockConfig+0x1f4>)
 80019a6:	5ccb      	ldrb	r3, [r1, r3]
 80019a8:	f003 031f 	and.w	r3, r3, #31
 80019ac:	fa22 f303 	lsr.w	r3, r2, r3
 80019b0:	4a09      	ldr	r2, [pc, #36]	; (80019d8 <HAL_RCC_ClockConfig+0x1f8>)
 80019b2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80019b4:	4b09      	ldr	r3, [pc, #36]	; (80019dc <HAL_RCC_ClockConfig+0x1fc>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4618      	mov	r0, r3
 80019ba:	f7fe feb3 	bl	8000724 <HAL_InitTick>
 80019be:	4603      	mov	r3, r0
 80019c0:	72fb      	strb	r3, [r7, #11]

  return status;
 80019c2:	7afb      	ldrb	r3, [r7, #11]
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	3710      	adds	r7, #16
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	40022000 	.word	0x40022000
 80019d0:	40021000 	.word	0x40021000
 80019d4:	08001c48 	.word	0x08001c48
 80019d8:	20000000 	.word	0x20000000
 80019dc:	20000004 	.word	0x20000004

080019e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b089      	sub	sp, #36	; 0x24
 80019e4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80019e6:	2300      	movs	r3, #0
 80019e8:	61fb      	str	r3, [r7, #28]
 80019ea:	2300      	movs	r3, #0
 80019ec:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80019ee:	4b3e      	ldr	r3, [pc, #248]	; (8001ae8 <HAL_RCC_GetSysClockFreq+0x108>)
 80019f0:	689b      	ldr	r3, [r3, #8]
 80019f2:	f003 030c 	and.w	r3, r3, #12
 80019f6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80019f8:	4b3b      	ldr	r3, [pc, #236]	; (8001ae8 <HAL_RCC_GetSysClockFreq+0x108>)
 80019fa:	68db      	ldr	r3, [r3, #12]
 80019fc:	f003 0303 	and.w	r3, r3, #3
 8001a00:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001a02:	693b      	ldr	r3, [r7, #16]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d005      	beq.n	8001a14 <HAL_RCC_GetSysClockFreq+0x34>
 8001a08:	693b      	ldr	r3, [r7, #16]
 8001a0a:	2b0c      	cmp	r3, #12
 8001a0c:	d121      	bne.n	8001a52 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	2b01      	cmp	r3, #1
 8001a12:	d11e      	bne.n	8001a52 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001a14:	4b34      	ldr	r3, [pc, #208]	; (8001ae8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f003 0308 	and.w	r3, r3, #8
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d107      	bne.n	8001a30 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001a20:	4b31      	ldr	r3, [pc, #196]	; (8001ae8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a26:	0a1b      	lsrs	r3, r3, #8
 8001a28:	f003 030f 	and.w	r3, r3, #15
 8001a2c:	61fb      	str	r3, [r7, #28]
 8001a2e:	e005      	b.n	8001a3c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001a30:	4b2d      	ldr	r3, [pc, #180]	; (8001ae8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	091b      	lsrs	r3, r3, #4
 8001a36:	f003 030f 	and.w	r3, r3, #15
 8001a3a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001a3c:	4a2b      	ldr	r2, [pc, #172]	; (8001aec <HAL_RCC_GetSysClockFreq+0x10c>)
 8001a3e:	69fb      	ldr	r3, [r7, #28]
 8001a40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a44:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001a46:	693b      	ldr	r3, [r7, #16]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d10d      	bne.n	8001a68 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001a4c:	69fb      	ldr	r3, [r7, #28]
 8001a4e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001a50:	e00a      	b.n	8001a68 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001a52:	693b      	ldr	r3, [r7, #16]
 8001a54:	2b04      	cmp	r3, #4
 8001a56:	d102      	bne.n	8001a5e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001a58:	4b25      	ldr	r3, [pc, #148]	; (8001af0 <HAL_RCC_GetSysClockFreq+0x110>)
 8001a5a:	61bb      	str	r3, [r7, #24]
 8001a5c:	e004      	b.n	8001a68 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	2b08      	cmp	r3, #8
 8001a62:	d101      	bne.n	8001a68 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001a64:	4b23      	ldr	r3, [pc, #140]	; (8001af4 <HAL_RCC_GetSysClockFreq+0x114>)
 8001a66:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001a68:	693b      	ldr	r3, [r7, #16]
 8001a6a:	2b0c      	cmp	r3, #12
 8001a6c:	d134      	bne.n	8001ad8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001a6e:	4b1e      	ldr	r3, [pc, #120]	; (8001ae8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a70:	68db      	ldr	r3, [r3, #12]
 8001a72:	f003 0303 	and.w	r3, r3, #3
 8001a76:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001a78:	68bb      	ldr	r3, [r7, #8]
 8001a7a:	2b02      	cmp	r3, #2
 8001a7c:	d003      	beq.n	8001a86 <HAL_RCC_GetSysClockFreq+0xa6>
 8001a7e:	68bb      	ldr	r3, [r7, #8]
 8001a80:	2b03      	cmp	r3, #3
 8001a82:	d003      	beq.n	8001a8c <HAL_RCC_GetSysClockFreq+0xac>
 8001a84:	e005      	b.n	8001a92 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001a86:	4b1a      	ldr	r3, [pc, #104]	; (8001af0 <HAL_RCC_GetSysClockFreq+0x110>)
 8001a88:	617b      	str	r3, [r7, #20]
      break;
 8001a8a:	e005      	b.n	8001a98 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001a8c:	4b19      	ldr	r3, [pc, #100]	; (8001af4 <HAL_RCC_GetSysClockFreq+0x114>)
 8001a8e:	617b      	str	r3, [r7, #20]
      break;
 8001a90:	e002      	b.n	8001a98 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001a92:	69fb      	ldr	r3, [r7, #28]
 8001a94:	617b      	str	r3, [r7, #20]
      break;
 8001a96:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001a98:	4b13      	ldr	r3, [pc, #76]	; (8001ae8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a9a:	68db      	ldr	r3, [r3, #12]
 8001a9c:	091b      	lsrs	r3, r3, #4
 8001a9e:	f003 0307 	and.w	r3, r3, #7
 8001aa2:	3301      	adds	r3, #1
 8001aa4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001aa6:	4b10      	ldr	r3, [pc, #64]	; (8001ae8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001aa8:	68db      	ldr	r3, [r3, #12]
 8001aaa:	0a1b      	lsrs	r3, r3, #8
 8001aac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001ab0:	697a      	ldr	r2, [r7, #20]
 8001ab2:	fb03 f202 	mul.w	r2, r3, r2
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001abc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001abe:	4b0a      	ldr	r3, [pc, #40]	; (8001ae8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ac0:	68db      	ldr	r3, [r3, #12]
 8001ac2:	0e5b      	lsrs	r3, r3, #25
 8001ac4:	f003 0303 	and.w	r3, r3, #3
 8001ac8:	3301      	adds	r3, #1
 8001aca:	005b      	lsls	r3, r3, #1
 8001acc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001ace:	697a      	ldr	r2, [r7, #20]
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ad6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001ad8:	69bb      	ldr	r3, [r7, #24]
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	3724      	adds	r7, #36	; 0x24
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr
 8001ae6:	bf00      	nop
 8001ae8:	40021000 	.word	0x40021000
 8001aec:	08001c58 	.word	0x08001c58
 8001af0:	00f42400 	.word	0x00f42400
 8001af4:	007a1200 	.word	0x007a1200

08001af8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b086      	sub	sp, #24
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001b00:	2300      	movs	r3, #0
 8001b02:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001b04:	4b2a      	ldr	r3, [pc, #168]	; (8001bb0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001b06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d003      	beq.n	8001b18 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001b10:	f7ff f9a6 	bl	8000e60 <HAL_PWREx_GetVoltageRange>
 8001b14:	6178      	str	r0, [r7, #20]
 8001b16:	e014      	b.n	8001b42 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001b18:	4b25      	ldr	r3, [pc, #148]	; (8001bb0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001b1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b1c:	4a24      	ldr	r2, [pc, #144]	; (8001bb0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001b1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b22:	6593      	str	r3, [r2, #88]	; 0x58
 8001b24:	4b22      	ldr	r3, [pc, #136]	; (8001bb0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001b26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b2c:	60fb      	str	r3, [r7, #12]
 8001b2e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001b30:	f7ff f996 	bl	8000e60 <HAL_PWREx_GetVoltageRange>
 8001b34:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001b36:	4b1e      	ldr	r3, [pc, #120]	; (8001bb0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001b38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b3a:	4a1d      	ldr	r2, [pc, #116]	; (8001bb0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001b3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b40:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001b42:	697b      	ldr	r3, [r7, #20]
 8001b44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b48:	d10b      	bne.n	8001b62 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2b80      	cmp	r3, #128	; 0x80
 8001b4e:	d919      	bls.n	8001b84 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2ba0      	cmp	r3, #160	; 0xa0
 8001b54:	d902      	bls.n	8001b5c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001b56:	2302      	movs	r3, #2
 8001b58:	613b      	str	r3, [r7, #16]
 8001b5a:	e013      	b.n	8001b84 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	613b      	str	r3, [r7, #16]
 8001b60:	e010      	b.n	8001b84 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2b80      	cmp	r3, #128	; 0x80
 8001b66:	d902      	bls.n	8001b6e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001b68:	2303      	movs	r3, #3
 8001b6a:	613b      	str	r3, [r7, #16]
 8001b6c:	e00a      	b.n	8001b84 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2b80      	cmp	r3, #128	; 0x80
 8001b72:	d102      	bne.n	8001b7a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001b74:	2302      	movs	r3, #2
 8001b76:	613b      	str	r3, [r7, #16]
 8001b78:	e004      	b.n	8001b84 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2b70      	cmp	r3, #112	; 0x70
 8001b7e:	d101      	bne.n	8001b84 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001b80:	2301      	movs	r3, #1
 8001b82:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001b84:	4b0b      	ldr	r3, [pc, #44]	; (8001bb4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f023 0207 	bic.w	r2, r3, #7
 8001b8c:	4909      	ldr	r1, [pc, #36]	; (8001bb4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	4313      	orrs	r3, r2
 8001b92:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001b94:	4b07      	ldr	r3, [pc, #28]	; (8001bb4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f003 0307 	and.w	r3, r3, #7
 8001b9c:	693a      	ldr	r2, [r7, #16]
 8001b9e:	429a      	cmp	r2, r3
 8001ba0:	d001      	beq.n	8001ba6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	e000      	b.n	8001ba8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001ba6:	2300      	movs	r3, #0
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	3718      	adds	r7, #24
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	40021000 	.word	0x40021000
 8001bb4:	40022000 	.word	0x40022000

08001bb8 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8001bbc:	4b05      	ldr	r3, [pc, #20]	; (8001bd4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a04      	ldr	r2, [pc, #16]	; (8001bd4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8001bc2:	f043 0304 	orr.w	r3, r3, #4
 8001bc6:	6013      	str	r3, [r2, #0]
}
 8001bc8:	bf00      	nop
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr
 8001bd2:	bf00      	nop
 8001bd4:	40021000 	.word	0x40021000

08001bd8 <memset>:
 8001bd8:	4402      	add	r2, r0
 8001bda:	4603      	mov	r3, r0
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d100      	bne.n	8001be2 <memset+0xa>
 8001be0:	4770      	bx	lr
 8001be2:	f803 1b01 	strb.w	r1, [r3], #1
 8001be6:	e7f9      	b.n	8001bdc <memset+0x4>

08001be8 <__libc_init_array>:
 8001be8:	b570      	push	{r4, r5, r6, lr}
 8001bea:	4d0d      	ldr	r5, [pc, #52]	; (8001c20 <__libc_init_array+0x38>)
 8001bec:	4c0d      	ldr	r4, [pc, #52]	; (8001c24 <__libc_init_array+0x3c>)
 8001bee:	1b64      	subs	r4, r4, r5
 8001bf0:	10a4      	asrs	r4, r4, #2
 8001bf2:	2600      	movs	r6, #0
 8001bf4:	42a6      	cmp	r6, r4
 8001bf6:	d109      	bne.n	8001c0c <__libc_init_array+0x24>
 8001bf8:	4d0b      	ldr	r5, [pc, #44]	; (8001c28 <__libc_init_array+0x40>)
 8001bfa:	4c0c      	ldr	r4, [pc, #48]	; (8001c2c <__libc_init_array+0x44>)
 8001bfc:	f000 f818 	bl	8001c30 <_init>
 8001c00:	1b64      	subs	r4, r4, r5
 8001c02:	10a4      	asrs	r4, r4, #2
 8001c04:	2600      	movs	r6, #0
 8001c06:	42a6      	cmp	r6, r4
 8001c08:	d105      	bne.n	8001c16 <__libc_init_array+0x2e>
 8001c0a:	bd70      	pop	{r4, r5, r6, pc}
 8001c0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001c10:	4798      	blx	r3
 8001c12:	3601      	adds	r6, #1
 8001c14:	e7ee      	b.n	8001bf4 <__libc_init_array+0xc>
 8001c16:	f855 3b04 	ldr.w	r3, [r5], #4
 8001c1a:	4798      	blx	r3
 8001c1c:	3601      	adds	r6, #1
 8001c1e:	e7f2      	b.n	8001c06 <__libc_init_array+0x1e>
 8001c20:	08001c88 	.word	0x08001c88
 8001c24:	08001c88 	.word	0x08001c88
 8001c28:	08001c88 	.word	0x08001c88
 8001c2c:	08001c8c 	.word	0x08001c8c

08001c30 <_init>:
 8001c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c32:	bf00      	nop
 8001c34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001c36:	bc08      	pop	{r3}
 8001c38:	469e      	mov	lr, r3
 8001c3a:	4770      	bx	lr

08001c3c <_fini>:
 8001c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c3e:	bf00      	nop
 8001c40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001c42:	bc08      	pop	{r3}
 8001c44:	469e      	mov	lr, r3
 8001c46:	4770      	bx	lr
