
PFC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000049a0  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  08004b2c  08004b2c  00014b2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b88  08004b88  000200c0  2**0
                  CONTENTS
  4 .ARM          00000008  08004b88  08004b88  00014b88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004b90  08004b90  000200c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b90  08004b90  00014b90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004b94  08004b94  00014b94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c0  20000000  08004b98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000508  200000c0  08004c58  000200c0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005c8  08004c58  000205c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200f0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e73c  00000000  00000000  00020133  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002969  00000000  00000000  0002e86f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000bc0  00000000  00000000  000311d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000008e4  00000000  00000000  00031d98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000207d1  00000000  00000000  0003267c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f8aa  00000000  00000000  00052e4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bf5ed  00000000  00000000  000626f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002df8  00000000  00000000  00121ce4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  00124adc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	200000c0 	.word	0x200000c0
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08004b14 	.word	0x08004b14

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	200000c4 	.word	0x200000c4
 80001c8:	08004b14 	.word	0x08004b14

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295
 80001e0:	f000 b970 	b.w	80004c4 <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9e08      	ldr	r6, [sp, #32]
 8000202:	460d      	mov	r5, r1
 8000204:	4604      	mov	r4, r0
 8000206:	460f      	mov	r7, r1
 8000208:	2b00      	cmp	r3, #0
 800020a:	d14a      	bne.n	80002a2 <__udivmoddi4+0xa6>
 800020c:	428a      	cmp	r2, r1
 800020e:	4694      	mov	ip, r2
 8000210:	d965      	bls.n	80002de <__udivmoddi4+0xe2>
 8000212:	fab2 f382 	clz	r3, r2
 8000216:	b143      	cbz	r3, 800022a <__udivmoddi4+0x2e>
 8000218:	fa02 fc03 	lsl.w	ip, r2, r3
 800021c:	f1c3 0220 	rsb	r2, r3, #32
 8000220:	409f      	lsls	r7, r3
 8000222:	fa20 f202 	lsr.w	r2, r0, r2
 8000226:	4317      	orrs	r7, r2
 8000228:	409c      	lsls	r4, r3
 800022a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022e:	fa1f f58c 	uxth.w	r5, ip
 8000232:	fbb7 f1fe 	udiv	r1, r7, lr
 8000236:	0c22      	lsrs	r2, r4, #16
 8000238:	fb0e 7711 	mls	r7, lr, r1, r7
 800023c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000240:	fb01 f005 	mul.w	r0, r1, r5
 8000244:	4290      	cmp	r0, r2
 8000246:	d90a      	bls.n	800025e <__udivmoddi4+0x62>
 8000248:	eb1c 0202 	adds.w	r2, ip, r2
 800024c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000250:	f080 811c 	bcs.w	800048c <__udivmoddi4+0x290>
 8000254:	4290      	cmp	r0, r2
 8000256:	f240 8119 	bls.w	800048c <__udivmoddi4+0x290>
 800025a:	3902      	subs	r1, #2
 800025c:	4462      	add	r2, ip
 800025e:	1a12      	subs	r2, r2, r0
 8000260:	b2a4      	uxth	r4, r4
 8000262:	fbb2 f0fe 	udiv	r0, r2, lr
 8000266:	fb0e 2210 	mls	r2, lr, r0, r2
 800026a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026e:	fb00 f505 	mul.w	r5, r0, r5
 8000272:	42a5      	cmp	r5, r4
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x90>
 8000276:	eb1c 0404 	adds.w	r4, ip, r4
 800027a:	f100 32ff 	add.w	r2, r0, #4294967295
 800027e:	f080 8107 	bcs.w	8000490 <__udivmoddi4+0x294>
 8000282:	42a5      	cmp	r5, r4
 8000284:	f240 8104 	bls.w	8000490 <__udivmoddi4+0x294>
 8000288:	4464      	add	r4, ip
 800028a:	3802      	subs	r0, #2
 800028c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000290:	1b64      	subs	r4, r4, r5
 8000292:	2100      	movs	r1, #0
 8000294:	b11e      	cbz	r6, 800029e <__udivmoddi4+0xa2>
 8000296:	40dc      	lsrs	r4, r3
 8000298:	2300      	movs	r3, #0
 800029a:	e9c6 4300 	strd	r4, r3, [r6]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d908      	bls.n	80002b8 <__udivmoddi4+0xbc>
 80002a6:	2e00      	cmp	r6, #0
 80002a8:	f000 80ed 	beq.w	8000486 <__udivmoddi4+0x28a>
 80002ac:	2100      	movs	r1, #0
 80002ae:	e9c6 0500 	strd	r0, r5, [r6]
 80002b2:	4608      	mov	r0, r1
 80002b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b8:	fab3 f183 	clz	r1, r3
 80002bc:	2900      	cmp	r1, #0
 80002be:	d149      	bne.n	8000354 <__udivmoddi4+0x158>
 80002c0:	42ab      	cmp	r3, r5
 80002c2:	d302      	bcc.n	80002ca <__udivmoddi4+0xce>
 80002c4:	4282      	cmp	r2, r0
 80002c6:	f200 80f8 	bhi.w	80004ba <__udivmoddi4+0x2be>
 80002ca:	1a84      	subs	r4, r0, r2
 80002cc:	eb65 0203 	sbc.w	r2, r5, r3
 80002d0:	2001      	movs	r0, #1
 80002d2:	4617      	mov	r7, r2
 80002d4:	2e00      	cmp	r6, #0
 80002d6:	d0e2      	beq.n	800029e <__udivmoddi4+0xa2>
 80002d8:	e9c6 4700 	strd	r4, r7, [r6]
 80002dc:	e7df      	b.n	800029e <__udivmoddi4+0xa2>
 80002de:	b902      	cbnz	r2, 80002e2 <__udivmoddi4+0xe6>
 80002e0:	deff      	udf	#255	; 0xff
 80002e2:	fab2 f382 	clz	r3, r2
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	f040 8090 	bne.w	800040c <__udivmoddi4+0x210>
 80002ec:	1a8a      	subs	r2, r1, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f fe8c 	uxth.w	lr, ip
 80002f6:	2101      	movs	r1, #1
 80002f8:	fbb2 f5f7 	udiv	r5, r2, r7
 80002fc:	fb07 2015 	mls	r0, r7, r5, r2
 8000300:	0c22      	lsrs	r2, r4, #16
 8000302:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000306:	fb0e f005 	mul.w	r0, lr, r5
 800030a:	4290      	cmp	r0, r2
 800030c:	d908      	bls.n	8000320 <__udivmoddi4+0x124>
 800030e:	eb1c 0202 	adds.w	r2, ip, r2
 8000312:	f105 38ff 	add.w	r8, r5, #4294967295
 8000316:	d202      	bcs.n	800031e <__udivmoddi4+0x122>
 8000318:	4290      	cmp	r0, r2
 800031a:	f200 80cb 	bhi.w	80004b4 <__udivmoddi4+0x2b8>
 800031e:	4645      	mov	r5, r8
 8000320:	1a12      	subs	r2, r2, r0
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb2 f0f7 	udiv	r0, r2, r7
 8000328:	fb07 2210 	mls	r2, r7, r0, r2
 800032c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000330:	fb0e fe00 	mul.w	lr, lr, r0
 8000334:	45a6      	cmp	lr, r4
 8000336:	d908      	bls.n	800034a <__udivmoddi4+0x14e>
 8000338:	eb1c 0404 	adds.w	r4, ip, r4
 800033c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000340:	d202      	bcs.n	8000348 <__udivmoddi4+0x14c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f200 80bb 	bhi.w	80004be <__udivmoddi4+0x2c2>
 8000348:	4610      	mov	r0, r2
 800034a:	eba4 040e 	sub.w	r4, r4, lr
 800034e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000352:	e79f      	b.n	8000294 <__udivmoddi4+0x98>
 8000354:	f1c1 0720 	rsb	r7, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 fc07 	lsr.w	ip, r2, r7
 800035e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000362:	fa05 f401 	lsl.w	r4, r5, r1
 8000366:	fa20 f307 	lsr.w	r3, r0, r7
 800036a:	40fd      	lsrs	r5, r7
 800036c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000370:	4323      	orrs	r3, r4
 8000372:	fbb5 f8f9 	udiv	r8, r5, r9
 8000376:	fa1f fe8c 	uxth.w	lr, ip
 800037a:	fb09 5518 	mls	r5, r9, r8, r5
 800037e:	0c1c      	lsrs	r4, r3, #16
 8000380:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000384:	fb08 f50e 	mul.w	r5, r8, lr
 8000388:	42a5      	cmp	r5, r4
 800038a:	fa02 f201 	lsl.w	r2, r2, r1
 800038e:	fa00 f001 	lsl.w	r0, r0, r1
 8000392:	d90b      	bls.n	80003ac <__udivmoddi4+0x1b0>
 8000394:	eb1c 0404 	adds.w	r4, ip, r4
 8000398:	f108 3aff 	add.w	sl, r8, #4294967295
 800039c:	f080 8088 	bcs.w	80004b0 <__udivmoddi4+0x2b4>
 80003a0:	42a5      	cmp	r5, r4
 80003a2:	f240 8085 	bls.w	80004b0 <__udivmoddi4+0x2b4>
 80003a6:	f1a8 0802 	sub.w	r8, r8, #2
 80003aa:	4464      	add	r4, ip
 80003ac:	1b64      	subs	r4, r4, r5
 80003ae:	b29d      	uxth	r5, r3
 80003b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b4:	fb09 4413 	mls	r4, r9, r3, r4
 80003b8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003bc:	fb03 fe0e 	mul.w	lr, r3, lr
 80003c0:	45a6      	cmp	lr, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x1da>
 80003c4:	eb1c 0404 	adds.w	r4, ip, r4
 80003c8:	f103 35ff 	add.w	r5, r3, #4294967295
 80003cc:	d26c      	bcs.n	80004a8 <__udivmoddi4+0x2ac>
 80003ce:	45a6      	cmp	lr, r4
 80003d0:	d96a      	bls.n	80004a8 <__udivmoddi4+0x2ac>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	4464      	add	r4, ip
 80003d6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003da:	fba3 9502 	umull	r9, r5, r3, r2
 80003de:	eba4 040e 	sub.w	r4, r4, lr
 80003e2:	42ac      	cmp	r4, r5
 80003e4:	46c8      	mov	r8, r9
 80003e6:	46ae      	mov	lr, r5
 80003e8:	d356      	bcc.n	8000498 <__udivmoddi4+0x29c>
 80003ea:	d053      	beq.n	8000494 <__udivmoddi4+0x298>
 80003ec:	b156      	cbz	r6, 8000404 <__udivmoddi4+0x208>
 80003ee:	ebb0 0208 	subs.w	r2, r0, r8
 80003f2:	eb64 040e 	sbc.w	r4, r4, lr
 80003f6:	fa04 f707 	lsl.w	r7, r4, r7
 80003fa:	40ca      	lsrs	r2, r1
 80003fc:	40cc      	lsrs	r4, r1
 80003fe:	4317      	orrs	r7, r2
 8000400:	e9c6 7400 	strd	r7, r4, [r6]
 8000404:	4618      	mov	r0, r3
 8000406:	2100      	movs	r1, #0
 8000408:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040c:	f1c3 0120 	rsb	r1, r3, #32
 8000410:	fa02 fc03 	lsl.w	ip, r2, r3
 8000414:	fa20 f201 	lsr.w	r2, r0, r1
 8000418:	fa25 f101 	lsr.w	r1, r5, r1
 800041c:	409d      	lsls	r5, r3
 800041e:	432a      	orrs	r2, r5
 8000420:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000424:	fa1f fe8c 	uxth.w	lr, ip
 8000428:	fbb1 f0f7 	udiv	r0, r1, r7
 800042c:	fb07 1510 	mls	r5, r7, r0, r1
 8000430:	0c11      	lsrs	r1, r2, #16
 8000432:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000436:	fb00 f50e 	mul.w	r5, r0, lr
 800043a:	428d      	cmp	r5, r1
 800043c:	fa04 f403 	lsl.w	r4, r4, r3
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x258>
 8000442:	eb1c 0101 	adds.w	r1, ip, r1
 8000446:	f100 38ff 	add.w	r8, r0, #4294967295
 800044a:	d22f      	bcs.n	80004ac <__udivmoddi4+0x2b0>
 800044c:	428d      	cmp	r5, r1
 800044e:	d92d      	bls.n	80004ac <__udivmoddi4+0x2b0>
 8000450:	3802      	subs	r0, #2
 8000452:	4461      	add	r1, ip
 8000454:	1b49      	subs	r1, r1, r5
 8000456:	b292      	uxth	r2, r2
 8000458:	fbb1 f5f7 	udiv	r5, r1, r7
 800045c:	fb07 1115 	mls	r1, r7, r5, r1
 8000460:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000464:	fb05 f10e 	mul.w	r1, r5, lr
 8000468:	4291      	cmp	r1, r2
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x282>
 800046c:	eb1c 0202 	adds.w	r2, ip, r2
 8000470:	f105 38ff 	add.w	r8, r5, #4294967295
 8000474:	d216      	bcs.n	80004a4 <__udivmoddi4+0x2a8>
 8000476:	4291      	cmp	r1, r2
 8000478:	d914      	bls.n	80004a4 <__udivmoddi4+0x2a8>
 800047a:	3d02      	subs	r5, #2
 800047c:	4462      	add	r2, ip
 800047e:	1a52      	subs	r2, r2, r1
 8000480:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000484:	e738      	b.n	80002f8 <__udivmoddi4+0xfc>
 8000486:	4631      	mov	r1, r6
 8000488:	4630      	mov	r0, r6
 800048a:	e708      	b.n	800029e <__udivmoddi4+0xa2>
 800048c:	4639      	mov	r1, r7
 800048e:	e6e6      	b.n	800025e <__udivmoddi4+0x62>
 8000490:	4610      	mov	r0, r2
 8000492:	e6fb      	b.n	800028c <__udivmoddi4+0x90>
 8000494:	4548      	cmp	r0, r9
 8000496:	d2a9      	bcs.n	80003ec <__udivmoddi4+0x1f0>
 8000498:	ebb9 0802 	subs.w	r8, r9, r2
 800049c:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004a0:	3b01      	subs	r3, #1
 80004a2:	e7a3      	b.n	80003ec <__udivmoddi4+0x1f0>
 80004a4:	4645      	mov	r5, r8
 80004a6:	e7ea      	b.n	800047e <__udivmoddi4+0x282>
 80004a8:	462b      	mov	r3, r5
 80004aa:	e794      	b.n	80003d6 <__udivmoddi4+0x1da>
 80004ac:	4640      	mov	r0, r8
 80004ae:	e7d1      	b.n	8000454 <__udivmoddi4+0x258>
 80004b0:	46d0      	mov	r8, sl
 80004b2:	e77b      	b.n	80003ac <__udivmoddi4+0x1b0>
 80004b4:	3d02      	subs	r5, #2
 80004b6:	4462      	add	r2, ip
 80004b8:	e732      	b.n	8000320 <__udivmoddi4+0x124>
 80004ba:	4608      	mov	r0, r1
 80004bc:	e70a      	b.n	80002d4 <__udivmoddi4+0xd8>
 80004be:	4464      	add	r4, ip
 80004c0:	3802      	subs	r0, #2
 80004c2:	e742      	b.n	800034a <__udivmoddi4+0x14e>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80004c8:	b480      	push	{r7}
 80004ca:	b083      	sub	sp, #12
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	4603      	mov	r3, r0
 80004d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80004d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	db0b      	blt.n	80004f2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80004da:	79fb      	ldrb	r3, [r7, #7]
 80004dc:	f003 021f 	and.w	r2, r3, #31
 80004e0:	4907      	ldr	r1, [pc, #28]	; (8000500 <__NVIC_EnableIRQ+0x38>)
 80004e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004e6:	095b      	lsrs	r3, r3, #5
 80004e8:	2001      	movs	r0, #1
 80004ea:	fa00 f202 	lsl.w	r2, r0, r2
 80004ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80004f2:	bf00      	nop
 80004f4:	370c      	adds	r7, #12
 80004f6:	46bd      	mov	sp, r7
 80004f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop
 8000500:	e000e100 	.word	0xe000e100

08000504 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000504:	b480      	push	{r7}
 8000506:	b083      	sub	sp, #12
 8000508:	af00      	add	r7, sp, #0
 800050a:	4603      	mov	r3, r0
 800050c:	6039      	str	r1, [r7, #0]
 800050e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000510:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000514:	2b00      	cmp	r3, #0
 8000516:	db0a      	blt.n	800052e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000518:	683b      	ldr	r3, [r7, #0]
 800051a:	b2da      	uxtb	r2, r3
 800051c:	490c      	ldr	r1, [pc, #48]	; (8000550 <__NVIC_SetPriority+0x4c>)
 800051e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000522:	0112      	lsls	r2, r2, #4
 8000524:	b2d2      	uxtb	r2, r2
 8000526:	440b      	add	r3, r1
 8000528:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800052c:	e00a      	b.n	8000544 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800052e:	683b      	ldr	r3, [r7, #0]
 8000530:	b2da      	uxtb	r2, r3
 8000532:	4908      	ldr	r1, [pc, #32]	; (8000554 <__NVIC_SetPriority+0x50>)
 8000534:	79fb      	ldrb	r3, [r7, #7]
 8000536:	f003 030f 	and.w	r3, r3, #15
 800053a:	3b04      	subs	r3, #4
 800053c:	0112      	lsls	r2, r2, #4
 800053e:	b2d2      	uxtb	r2, r2
 8000540:	440b      	add	r3, r1
 8000542:	761a      	strb	r2, [r3, #24]
}
 8000544:	bf00      	nop
 8000546:	370c      	adds	r7, #12
 8000548:	46bd      	mov	sp, r7
 800054a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054e:	4770      	bx	lr
 8000550:	e000e100 	.word	0xe000e100
 8000554:	e000ed00 	.word	0xe000ed00

08000558 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b096      	sub	sp, #88	; 0x58
 800055c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800055e:	f000 fdc8 	bl	80010f2 <HAL_Init>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000562:	4bbd      	ldr	r3, [pc, #756]	; (8000858 <main+0x300>)
 8000564:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000566:	4abc      	ldr	r2, [pc, #752]	; (8000858 <main+0x300>)
 8000568:	f043 0304 	orr.w	r3, r3, #4
 800056c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800056e:	4bba      	ldr	r3, [pc, #744]	; (8000858 <main+0x300>)
 8000570:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000572:	f003 0304 	and.w	r3, r3, #4
 8000576:	623b      	str	r3, [r7, #32]
 8000578:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800057a:	4bb7      	ldr	r3, [pc, #732]	; (8000858 <main+0x300>)
 800057c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800057e:	4ab6      	ldr	r2, [pc, #728]	; (8000858 <main+0x300>)
 8000580:	f043 0301 	orr.w	r3, r3, #1
 8000584:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000586:	4bb4      	ldr	r3, [pc, #720]	; (8000858 <main+0x300>)
 8000588:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800058a:	f003 0301 	and.w	r3, r3, #1
 800058e:	61fb      	str	r3, [r7, #28]
 8000590:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000592:	4bb1      	ldr	r3, [pc, #708]	; (8000858 <main+0x300>)
 8000594:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000596:	4ab0      	ldr	r2, [pc, #704]	; (8000858 <main+0x300>)
 8000598:	f043 0302 	orr.w	r3, r3, #2
 800059c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800059e:	4bae      	ldr	r3, [pc, #696]	; (8000858 <main+0x300>)
 80005a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005a2:	f003 0302 	and.w	r3, r3, #2
 80005a6:	61bb      	str	r3, [r7, #24]
 80005a8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005aa:	4bab      	ldr	r3, [pc, #684]	; (8000858 <main+0x300>)
 80005ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005ae:	4aaa      	ldr	r2, [pc, #680]	; (8000858 <main+0x300>)
 80005b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005b6:	4ba8      	ldr	r3, [pc, #672]	; (8000858 <main+0x300>)
 80005b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005be:	617b      	str	r3, [r7, #20]
 80005c0:	697b      	ldr	r3, [r7, #20]
  SystemClock_Config();
 80005c2:	f000 fb95 	bl	8000cf0 <SystemClock_Config>
  /* USER CODE BEGIN Init */

  //Button Initialization
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80005c6:	2301      	movs	r3, #1
 80005c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80005ca:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80005ce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull  = GPIO_PULLUP;
 80005d0:	2301      	movs	r3, #1
 80005d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005d4:	2303      	movs	r3, #3
 80005d6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005dc:	4619      	mov	r1, r3
 80005de:	489f      	ldr	r0, [pc, #636]	; (800085c <main+0x304>)
 80005e0:	f001 f9ca 	bl	8001978 <HAL_GPIO_Init>



  //MX_USART1_UART_Init();

  Lock_Init(&LockerStruct);
 80005e4:	489e      	ldr	r0, [pc, #632]	; (8000860 <main+0x308>)
 80005e6:	f003 fced 	bl	8003fc4 <Lock_Init>
  LED_Init();
 80005ea:	f003 fc9b 	bl	8003f24 <LED_Init>
  Scanner_Init(&UartHandle);
 80005ee:	489d      	ldr	r0, [pc, #628]	; (8000864 <main+0x30c>)
 80005f0:	f003 fe6c 	bl	80042cc <Scanner_Init>
  LED_BlueTurnOn();
 80005f4:	f003 fcd2 	bl	8003f9c <LED_BlueTurnOn>
  Lock_ReadFromFlash(&LockerStruct);
 80005f8:	4899      	ldr	r0, [pc, #612]	; (8000860 <main+0x308>)
 80005fa:	f003 fdf1 	bl	80041e0 <Lock_ReadFromFlash>



//Enable Wake Up Interrupt line

  NVIC_SetPriority((IRQn_Type)(EXTI0_IRQn), 0x03);
 80005fe:	2103      	movs	r1, #3
 8000600:	2006      	movs	r0, #6
 8000602:	f7ff ff7f 	bl	8000504 <__NVIC_SetPriority>
  HAL_NVIC_EnableIRQ((IRQn_Type)(EXTI0_IRQn));
 8000606:	2006      	movs	r0, #6
 8000608:	f000 ff23 	bl	8001452 <HAL_NVIC_EnableIRQ>
  __NVIC_EnableIRQ(EXTI0_IRQn);
 800060c:	2006      	movs	r0, #6
 800060e:	f7ff ff5b 	bl	80004c8 <__NVIC_EnableIRQ>


  //Enable Locker Interrupts lines

  NVIC_SetPriority((IRQn_Type)(EXTI1_IRQn), 0x03);
 8000612:	2103      	movs	r1, #3
 8000614:	2007      	movs	r0, #7
 8000616:	f7ff ff75 	bl	8000504 <__NVIC_SetPriority>
  HAL_NVIC_EnableIRQ((IRQn_Type)(EXTI1_IRQn));
 800061a:	2007      	movs	r0, #7
 800061c:	f000 ff19 	bl	8001452 <HAL_NVIC_EnableIRQ>
  __NVIC_EnableIRQ(EXTI1_IRQn);
 8000620:	2007      	movs	r0, #7
 8000622:	f7ff ff51 	bl	80004c8 <__NVIC_EnableIRQ>

  NVIC_SetPriority((IRQn_Type)(EXTI3_IRQn), 0x03);
 8000626:	2103      	movs	r1, #3
 8000628:	2009      	movs	r0, #9
 800062a:	f7ff ff6b 	bl	8000504 <__NVIC_SetPriority>
  HAL_NVIC_EnableIRQ((IRQn_Type)(EXTI3_IRQn));
 800062e:	2009      	movs	r0, #9
 8000630:	f000 ff0f 	bl	8001452 <HAL_NVIC_EnableIRQ>
  __NVIC_EnableIRQ(EXTI3_IRQn);
 8000634:	2009      	movs	r0, #9
 8000636:	f7ff ff47 	bl	80004c8 <__NVIC_EnableIRQ>

  NVIC_SetPriority((IRQn_Type)(EXTI4_IRQn), 0x03);
 800063a:	2103      	movs	r1, #3
 800063c:	200a      	movs	r0, #10
 800063e:	f7ff ff61 	bl	8000504 <__NVIC_SetPriority>
  HAL_NVIC_EnableIRQ((IRQn_Type)(EXTI4_IRQn));
 8000642:	200a      	movs	r0, #10
 8000644:	f000 ff05 	bl	8001452 <HAL_NVIC_EnableIRQ>
  __NVIC_EnableIRQ(EXTI4_IRQn);
 8000648:	200a      	movs	r0, #10
 800064a:	f7ff ff3d 	bl	80004c8 <__NVIC_EnableIRQ>

  NVIC_SetPriority((IRQn_Type)(EXTI9_5_IRQn), 0x03);
 800064e:	2103      	movs	r1, #3
 8000650:	2017      	movs	r0, #23
 8000652:	f7ff ff57 	bl	8000504 <__NVIC_SetPriority>
  HAL_NVIC_EnableIRQ((IRQn_Type)(EXTI9_5_IRQn));
 8000656:	2017      	movs	r0, #23
 8000658:	f000 fefb 	bl	8001452 <HAL_NVIC_EnableIRQ>
  __NVIC_EnableIRQ(EXTI9_5_IRQn);
 800065c:	2017      	movs	r0, #23
 800065e:	f7ff ff33 	bl	80004c8 <__NVIC_EnableIRQ>

  NVIC_SetPriority((IRQn_Type)(EXTI15_10_IRQn), 0x03);
 8000662:	2103      	movs	r1, #3
 8000664:	2028      	movs	r0, #40	; 0x28
 8000666:	f7ff ff4d 	bl	8000504 <__NVIC_SetPriority>
  HAL_NVIC_EnableIRQ((IRQn_Type)(EXTI15_10_IRQn));
 800066a:	2028      	movs	r0, #40	; 0x28
 800066c:	f000 fef1 	bl	8001452 <HAL_NVIC_EnableIRQ>
  __NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000670:	2028      	movs	r0, #40	; 0x28
 8000672:	f7ff ff29 	bl	80004c8 <__NVIC_EnableIRQ>

  while (1)
  {


	   while(!Scanner_Sleep(&UartHandle));
 8000676:	bf00      	nop
 8000678:	487a      	ldr	r0, [pc, #488]	; (8000864 <main+0x30c>)
 800067a:	f003 fe5b 	bl	8004334 <Scanner_Sleep>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d0f9      	beq.n	8000678 <main+0x120>

	    LED_BlueTurnOff();
 8000684:	f003 fc94 	bl	8003fb0 <LED_BlueTurnOff>
	    SystemClock_Decrease();
 8000688:	f000 fb94 	bl	8000db4 <SystemClock_Decrease>
	    HAL_SuspendTick();
 800068c:	f000 fdca 	bl	8001224 <HAL_SuspendTick>

	    HAL_PWR_EnterSLEEPMode(PWR_LOWPOWERREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8000690:	2101      	movs	r1, #1
 8000692:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000696:	f001 fc15 	bl	8001ec4 <HAL_PWR_EnterSLEEPMode>

        HAL_PWREx_DisableLowPowerRunMode();
 800069a:	f001 fcbb 	bl	8002014 <HAL_PWREx_DisableLowPowerRunMode>

        SystemClock_Config();
 800069e:	f000 fb27 	bl	8000cf0 <SystemClock_Config>
        HAL_ResumeTick();
 80006a2:	f000 fdcf 	bl	8001244 <HAL_ResumeTick>

        HAL_Delay(10);
 80006a6:	200a      	movs	r0, #10
 80006a8:	f000 fd98 	bl	80011dc <HAL_Delay>

      	if(HAL_GPIO_ReadPin(LockerStruct[0].Lock_Pin2.GPIOx, LockerStruct[0].Lock_Pin2.GPIO_Init.Pin) && (!LockerStruct[0].isVandalized)){
 80006ac:	4b6c      	ldr	r3, [pc, #432]	; (8000860 <main+0x308>)
 80006ae:	699b      	ldr	r3, [r3, #24]
 80006b0:	4a6b      	ldr	r2, [pc, #428]	; (8000860 <main+0x308>)
 80006b2:	69d2      	ldr	r2, [r2, #28]
 80006b4:	b292      	uxth	r2, r2
 80006b6:	4611      	mov	r1, r2
 80006b8:	4618      	mov	r0, r3
 80006ba:	f001 fb91 	bl	8001de0 <HAL_GPIO_ReadPin>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d017      	beq.n	80006f4 <main+0x19c>
 80006c4:	4b66      	ldr	r3, [pc, #408]	; (8000860 <main+0x308>)
 80006c6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80006ca:	f083 0301 	eor.w	r3, r3, #1
 80006ce:	b2db      	uxtb	r3, r3
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d00f      	beq.n	80006f4 <main+0x19c>
    			Lock_AddErrorLog (&LogsStruct[logsCount],LockerStruct[0].Lock_Pin1.GPIO_Init.Pin, LOCKER_VANDALIZED);
 80006d4:	4b64      	ldr	r3, [pc, #400]	; (8000868 <main+0x310>)
 80006d6:	781b      	ldrb	r3, [r3, #0]
 80006d8:	b2db      	uxtb	r3, r3
 80006da:	009b      	lsls	r3, r3, #2
 80006dc:	4a63      	ldr	r2, [pc, #396]	; (800086c <main+0x314>)
 80006de:	4413      	add	r3, r2
 80006e0:	4a5f      	ldr	r2, [pc, #380]	; (8000860 <main+0x308>)
 80006e2:	6851      	ldr	r1, [r2, #4]
 80006e4:	2278      	movs	r2, #120	; 0x78
 80006e6:	4618      	mov	r0, r3
 80006e8:	f003 fd1c 	bl	8004124 <Lock_AddErrorLog>
    			LockerStruct[0].isVandalized = 1;
 80006ec:	4b5c      	ldr	r3, [pc, #368]	; (8000860 <main+0x308>)
 80006ee:	2201      	movs	r2, #1
 80006f0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
      	}

      	if(HAL_GPIO_ReadPin(LockerStruct[1].Lock_Pin2.GPIOx, LockerStruct[1].Lock_Pin2.GPIO_Init.Pin) && (!LockerStruct[1].isVandalized)){
 80006f4:	4b5a      	ldr	r3, [pc, #360]	; (8000860 <main+0x308>)
 80006f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80006f8:	4a59      	ldr	r2, [pc, #356]	; (8000860 <main+0x308>)
 80006fa:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80006fc:	b292      	uxth	r2, r2
 80006fe:	4611      	mov	r1, r2
 8000700:	4618      	mov	r0, r3
 8000702:	f001 fb6d 	bl	8001de0 <HAL_GPIO_ReadPin>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d017      	beq.n	800073c <main+0x1e4>
 800070c:	4b54      	ldr	r3, [pc, #336]	; (8000860 <main+0x308>)
 800070e:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 8000712:	f083 0301 	eor.w	r3, r3, #1
 8000716:	b2db      	uxtb	r3, r3
 8000718:	2b00      	cmp	r3, #0
 800071a:	d00f      	beq.n	800073c <main+0x1e4>
    			Lock_AddErrorLog (&LogsStruct[logsCount],LockerStruct[1].Lock_Pin1.GPIO_Init.Pin, LOCKER_VANDALIZED);
 800071c:	4b52      	ldr	r3, [pc, #328]	; (8000868 <main+0x310>)
 800071e:	781b      	ldrb	r3, [r3, #0]
 8000720:	b2db      	uxtb	r3, r3
 8000722:	009b      	lsls	r3, r3, #2
 8000724:	4a51      	ldr	r2, [pc, #324]	; (800086c <main+0x314>)
 8000726:	4413      	add	r3, r2
 8000728:	4a4d      	ldr	r2, [pc, #308]	; (8000860 <main+0x308>)
 800072a:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800072c:	2278      	movs	r2, #120	; 0x78
 800072e:	4618      	mov	r0, r3
 8000730:	f003 fcf8 	bl	8004124 <Lock_AddErrorLog>
    			LockerStruct[1].isVandalized = 1;
 8000734:	4b4a      	ldr	r3, [pc, #296]	; (8000860 <main+0x308>)
 8000736:	2201      	movs	r2, #1
 8000738:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
      	}

      	if(HAL_GPIO_ReadPin(LockerStruct[2].Lock_Pin2.GPIOx, LockerStruct[2].Lock_Pin2.GPIO_Init.Pin) && (!LockerStruct[2].isVandalized)){
 800073c:	4b48      	ldr	r3, [pc, #288]	; (8000860 <main+0x308>)
 800073e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000742:	4a47      	ldr	r2, [pc, #284]	; (8000860 <main+0x308>)
 8000744:	f8d2 2094 	ldr.w	r2, [r2, #148]	; 0x94
 8000748:	b292      	uxth	r2, r2
 800074a:	4611      	mov	r1, r2
 800074c:	4618      	mov	r0, r3
 800074e:	f001 fb47 	bl	8001de0 <HAL_GPIO_ReadPin>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d017      	beq.n	8000788 <main+0x230>
 8000758:	4b41      	ldr	r3, [pc, #260]	; (8000860 <main+0x308>)
 800075a:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800075e:	f083 0301 	eor.w	r3, r3, #1
 8000762:	b2db      	uxtb	r3, r3
 8000764:	2b00      	cmp	r3, #0
 8000766:	d00f      	beq.n	8000788 <main+0x230>
    			Lock_AddErrorLog (&LogsStruct[logsCount],LockerStruct[2].Lock_Pin1.GPIO_Init.Pin, LOCKER_VANDALIZED);
 8000768:	4b3f      	ldr	r3, [pc, #252]	; (8000868 <main+0x310>)
 800076a:	781b      	ldrb	r3, [r3, #0]
 800076c:	b2db      	uxtb	r3, r3
 800076e:	009b      	lsls	r3, r3, #2
 8000770:	4a3e      	ldr	r2, [pc, #248]	; (800086c <main+0x314>)
 8000772:	4413      	add	r3, r2
 8000774:	4a3a      	ldr	r2, [pc, #232]	; (8000860 <main+0x308>)
 8000776:	6fd1      	ldr	r1, [r2, #124]	; 0x7c
 8000778:	2278      	movs	r2, #120	; 0x78
 800077a:	4618      	mov	r0, r3
 800077c:	f003 fcd2 	bl	8004124 <Lock_AddErrorLog>
    			LockerStruct[2].isVandalized = 1;
 8000780:	4b37      	ldr	r3, [pc, #220]	; (8000860 <main+0x308>)
 8000782:	2201      	movs	r2, #1
 8000784:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
      	}

      	if(HAL_GPIO_ReadPin(LockerStruct[3].Lock_Pin2.GPIOx, LockerStruct[3].Lock_Pin2.GPIO_Init.Pin) && (!LockerStruct[3].isVandalized)){
 8000788:	4b35      	ldr	r3, [pc, #212]	; (8000860 <main+0x308>)
 800078a:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800078e:	4a34      	ldr	r2, [pc, #208]	; (8000860 <main+0x308>)
 8000790:	f8d2 20d0 	ldr.w	r2, [r2, #208]	; 0xd0
 8000794:	b292      	uxth	r2, r2
 8000796:	4611      	mov	r1, r2
 8000798:	4618      	mov	r0, r3
 800079a:	f001 fb21 	bl	8001de0 <HAL_GPIO_ReadPin>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d018      	beq.n	80007d6 <main+0x27e>
 80007a4:	4b2e      	ldr	r3, [pc, #184]	; (8000860 <main+0x308>)
 80007a6:	f893 30ed 	ldrb.w	r3, [r3, #237]	; 0xed
 80007aa:	f083 0301 	eor.w	r3, r3, #1
 80007ae:	b2db      	uxtb	r3, r3
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d010      	beq.n	80007d6 <main+0x27e>
      			Lock_AddErrorLog (&LogsStruct[logsCount],LockerStruct[3].Lock_Pin1.GPIO_Init.Pin, LOCKER_VANDALIZED);
 80007b4:	4b2c      	ldr	r3, [pc, #176]	; (8000868 <main+0x310>)
 80007b6:	781b      	ldrb	r3, [r3, #0]
 80007b8:	b2db      	uxtb	r3, r3
 80007ba:	009b      	lsls	r3, r3, #2
 80007bc:	4a2b      	ldr	r2, [pc, #172]	; (800086c <main+0x314>)
 80007be:	4413      	add	r3, r2
 80007c0:	4a27      	ldr	r2, [pc, #156]	; (8000860 <main+0x308>)
 80007c2:	f8d2 10b8 	ldr.w	r1, [r2, #184]	; 0xb8
 80007c6:	2278      	movs	r2, #120	; 0x78
 80007c8:	4618      	mov	r0, r3
 80007ca:	f003 fcab 	bl	8004124 <Lock_AddErrorLog>
      			LockerStruct[3].isVandalized = 1;
 80007ce:	4b24      	ldr	r3, [pc, #144]	; (8000860 <main+0x308>)
 80007d0:	2201      	movs	r2, #1
 80007d2:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
      	}

      	if(HAL_GPIO_ReadPin(LockerStruct[4].Lock_Pin2.GPIOx, LockerStruct[4].Lock_Pin2.GPIO_Init.Pin) && (!LockerStruct[4].isVandalized)){
 80007d6:	4b22      	ldr	r3, [pc, #136]	; (8000860 <main+0x308>)
 80007d8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80007dc:	4a20      	ldr	r2, [pc, #128]	; (8000860 <main+0x308>)
 80007de:	f8d2 210c 	ldr.w	r2, [r2, #268]	; 0x10c
 80007e2:	b292      	uxth	r2, r2
 80007e4:	4611      	mov	r1, r2
 80007e6:	4618      	mov	r0, r3
 80007e8:	f001 fafa 	bl	8001de0 <HAL_GPIO_ReadPin>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d018      	beq.n	8000824 <main+0x2cc>
 80007f2:	4b1b      	ldr	r3, [pc, #108]	; (8000860 <main+0x308>)
 80007f4:	f893 3129 	ldrb.w	r3, [r3, #297]	; 0x129
 80007f8:	f083 0301 	eor.w	r3, r3, #1
 80007fc:	b2db      	uxtb	r3, r3
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d010      	beq.n	8000824 <main+0x2cc>
      			Lock_AddErrorLog (&LogsStruct[logsCount],LockerStruct[4].Lock_Pin1.GPIO_Init.Pin, LOCKER_VANDALIZED);
 8000802:	4b19      	ldr	r3, [pc, #100]	; (8000868 <main+0x310>)
 8000804:	781b      	ldrb	r3, [r3, #0]
 8000806:	b2db      	uxtb	r3, r3
 8000808:	009b      	lsls	r3, r3, #2
 800080a:	4a18      	ldr	r2, [pc, #96]	; (800086c <main+0x314>)
 800080c:	4413      	add	r3, r2
 800080e:	4a14      	ldr	r2, [pc, #80]	; (8000860 <main+0x308>)
 8000810:	f8d2 10f4 	ldr.w	r1, [r2, #244]	; 0xf4
 8000814:	2278      	movs	r2, #120	; 0x78
 8000816:	4618      	mov	r0, r3
 8000818:	f003 fc84 	bl	8004124 <Lock_AddErrorLog>
      			LockerStruct[4].isVandalized = 1;
 800081c:	4b10      	ldr	r3, [pc, #64]	; (8000860 <main+0x308>)
 800081e:	2201      	movs	r2, #1
 8000820:	f883 2129 	strb.w	r2, [r3, #297]	; 0x129
      	}

	  if(!(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0))){
 8000824:	2101      	movs	r1, #1
 8000826:	480d      	ldr	r0, [pc, #52]	; (800085c <main+0x304>)
 8000828:	f001 fada 	bl	8001de0 <HAL_GPIO_ReadPin>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	f47f af21 	bne.w	8000676 <main+0x11e>


		  while(!Scanner_Configure(&UartHandle));
 8000834:	bf00      	nop
 8000836:	480b      	ldr	r0, [pc, #44]	; (8000864 <main+0x30c>)
 8000838:	f003 fda8 	bl	800438c <Scanner_Configure>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d0f9      	beq.n	8000836 <main+0x2de>

		  while(!Scanner_TurnOn(&UartHandle));
 8000842:	bf00      	nop
 8000844:	4807      	ldr	r0, [pc, #28]	; (8000864 <main+0x30c>)
 8000846:	f003 fe01 	bl	800444c <Scanner_TurnOn>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d0f9      	beq.n	8000844 <main+0x2ec>

		  uint8_t aRxBuffer[SIZE_OF_QRCODE];
		  inOperation = 1;
 8000850:	4b07      	ldr	r3, [pc, #28]	; (8000870 <main+0x318>)
 8000852:	2201      	movs	r2, #1
 8000854:	701a      	strb	r2, [r3, #0]
 8000856:	e00d      	b.n	8000874 <main+0x31c>
 8000858:	40021000 	.word	0x40021000
 800085c:	48000400 	.word	0x48000400
 8000860:	200000dc 	.word	0x200000dc
 8000864:	2000039c 	.word	0x2000039c
 8000868:	20000398 	.word	0x20000398
 800086c:	20000208 	.word	0x20000208
 8000870:	20000399 	.word	0x20000399
		  uint32_t tickstart = HAL_GetTick();
 8000874:	f000 fca6 	bl	80011c4 <HAL_GetTick>
 8000878:	6478      	str	r0, [r7, #68]	; 0x44
		  uint32_t wait = TIMEOUT;
 800087a:	f242 7310 	movw	r3, #10000	; 0x2710
 800087e:	643b      	str	r3, [r7, #64]	; 0x40

		  while((HAL_GetTick() - tickstart) < wait){
 8000880:	bf00      	nop
 8000882:	f000 fc9f 	bl	80011c4 <HAL_GetTick>
 8000886:	4602      	mov	r2, r0
 8000888:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800088a:	1ad3      	subs	r3, r2, r3
 800088c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800088e:	429a      	cmp	r2, r3
 8000890:	f67f aef1 	bls.w	8000676 <main+0x11e>

			  while(((HAL_GetTick() - tickstart) < wait) ){
 8000894:	e013      	b.n	80008be <main+0x366>

				  if (Scanner_ReceiveQRCode(&UartHandle, (uint8_t*)aRxBuffer, SIZE_OF_QRCODE, QRREADER_TIMEOUT) == HAL_OK){
 8000896:	1d39      	adds	r1, r7, #4
 8000898:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800089c:	220d      	movs	r2, #13
 800089e:	48c9      	ldr	r0, [pc, #804]	; (8000bc4 <main+0x66c>)
 80008a0:	f003 fe00 	bl	80044a4 <Scanner_ReceiveQRCode>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d103      	bne.n	80008b2 <main+0x35a>
					  if(aRxBuffer[SIZE_OF_QRCODE-1] == '\r'){
 80008aa:	7c3b      	ldrb	r3, [r7, #16]
 80008ac:	2b0d      	cmp	r3, #13
 80008ae:	d106      	bne.n	80008be <main+0x366>
							  break;
 80008b0:	e00d      	b.n	80008ce <main+0x376>
						  }
				  }
				  else{
					  memset(aRxBuffer, 0, SIZE_OF_QRCODE);
 80008b2:	1d3b      	adds	r3, r7, #4
 80008b4:	220d      	movs	r2, #13
 80008b6:	2100      	movs	r1, #0
 80008b8:	4618      	mov	r0, r3
 80008ba:	f004 f8df 	bl	8004a7c <memset>
			  while(((HAL_GetTick() - tickstart) < wait) ){
 80008be:	f000 fc81 	bl	80011c4 <HAL_GetTick>
 80008c2:	4602      	mov	r2, r0
 80008c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80008c6:	1ad3      	subs	r3, r2, r3
 80008c8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80008ca:	429a      	cmp	r2, r3
 80008cc:	d8e3      	bhi.n	8000896 <main+0x33e>
				  }

			  }
			  TYPE_QRCode_t state = Security_GetQRCodeType(aRxBuffer,CHECKSUM_COORD1,CHECKSUM_COORD2 , sizeof(aRxBuffer));
 80008ce:	1d38      	adds	r0, r7, #4
 80008d0:	230d      	movs	r3, #13
 80008d2:	2201      	movs	r2, #1
 80008d4:	2100      	movs	r1, #0
 80008d6:	f003 fdf8 	bl	80044ca <Security_GetQRCodeType>
 80008da:	4603      	mov	r3, r0
 80008dc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			  uint8_t locker_number;
			  switch(state){
 80008e0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80008e4:	2b05      	cmp	r3, #5
 80008e6:	f200 8197 	bhi.w	8000c18 <main+0x6c0>
 80008ea:	a201      	add	r2, pc, #4	; (adr r2, 80008f0 <main+0x398>)
 80008ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008f0:	08000909 	.word	0x08000909
 80008f4:	08000921 	.word	0x08000921
 80008f8:	08000a15 	.word	0x08000a15
 80008fc:	08000bd5 	.word	0x08000bd5
 8000900:	08000aed 	.word	0x08000aed
 8000904:	08000c07 	.word	0x08000c07

				  case INVALID:
					  LED_RedTurnOn();
 8000908:	f003 fb30 	bl	8003f6c <LED_RedTurnOn>
					  HAL_Delay(INVALID_LED_SIGNAL);
 800090c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000910:	f000 fc64 	bl	80011dc <HAL_Delay>
					  LED_RedTurnOff();
 8000914:	f003 fb36 	bl	8003f84 <LED_RedTurnOff>
					  state = CONCLUDED;
 8000918:	2305      	movs	r3, #5
 800091a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					  break;
 800091e:	e17c      	b.n	8000c1a <main+0x6c2>
				  case MAILMAN:
					  locker_number = Security_GetLockerPosition(aRxBuffer, MAILMAN_LOCKER_COL_COORD, MAILMAN_LOCKER_LIN_COORD);
 8000920:	1d3b      	adds	r3, r7, #4
 8000922:	2202      	movs	r2, #2
 8000924:	2105      	movs	r1, #5
 8000926:	4618      	mov	r0, r3
 8000928:	f003 fe17 	bl	800455a <Security_GetLockerPosition>
 800092c:	4603      	mov	r3, r0
 800092e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
					  if (locker_number == 0){
 8000932:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8000936:	2b00      	cmp	r3, #0
 8000938:	d103      	bne.n	8000942 <main+0x3ea>
						  state=INVALID;
 800093a:	2300      	movs	r3, #0
 800093c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
						  break;
 8000940:	e16b      	b.n	8000c1a <main+0x6c2>
					  }
					  locker_number--;
 8000942:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8000946:	3b01      	subs	r3, #1
 8000948:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
					  if(LockerStruct[locker_number].isFull){
 800094c:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 8000950:	499d      	ldr	r1, [pc, #628]	; (8000bc8 <main+0x670>)
 8000952:	4613      	mov	r3, r2
 8000954:	011b      	lsls	r3, r3, #4
 8000956:	1a9b      	subs	r3, r3, r2
 8000958:	009b      	lsls	r3, r3, #2
 800095a:	440b      	add	r3, r1
 800095c:	3330      	adds	r3, #48	; 0x30
 800095e:	781b      	ldrb	r3, [r3, #0]
 8000960:	2b00      	cmp	r3, #0
 8000962:	d003      	beq.n	800096c <main+0x414>
						  state = INVALID;
 8000964:	2300      	movs	r3, #0
 8000966:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
						  break;
 800096a:	e156      	b.n	8000c1a <main+0x6c2>
					  }
					  if(Security_GetPin(&LockerStruct[locker_number], aRxBuffer, MAILMAN_PIN_COORD1, MAILMAN_PIN_COORD2, MAILMAN_PIN_COORD3, MAILMAN_PIN_COORD4)){
 800096c:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 8000970:	4613      	mov	r3, r2
 8000972:	011b      	lsls	r3, r3, #4
 8000974:	1a9b      	subs	r3, r3, r2
 8000976:	009b      	lsls	r3, r3, #2
 8000978:	4a93      	ldr	r2, [pc, #588]	; (8000bc8 <main+0x670>)
 800097a:	1898      	adds	r0, r3, r2
 800097c:	1d39      	adds	r1, r7, #4
 800097e:	2309      	movs	r3, #9
 8000980:	9301      	str	r3, [sp, #4]
 8000982:	2308      	movs	r3, #8
 8000984:	9300      	str	r3, [sp, #0]
 8000986:	2306      	movs	r3, #6
 8000988:	2203      	movs	r2, #3
 800098a:	f003 fe23 	bl	80045d4 <Security_GetPin>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	d03b      	beq.n	8000a0c <main+0x4b4>

						  bool return_value = Lock_Toggle_Wait_Toggle(&LockerStruct[locker_number],LOCKER_WAITVALUE);
 8000994:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 8000998:	4613      	mov	r3, r2
 800099a:	011b      	lsls	r3, r3, #4
 800099c:	1a9b      	subs	r3, r3, r2
 800099e:	009b      	lsls	r3, r3, #2
 80009a0:	4a89      	ldr	r2, [pc, #548]	; (8000bc8 <main+0x670>)
 80009a2:	4413      	add	r3, r2
 80009a4:	2120      	movs	r1, #32
 80009a6:	4618      	mov	r0, r3
 80009a8:	f003 fb8c 	bl	80040c4 <Lock_Toggle_Wait_Toggle>
 80009ac:	4603      	mov	r3, r0
 80009ae:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
						  if (return_value == 0) Lock_AddErrorLog (&LogsStruct[logsCount],LockerStruct[locker_number].Lock_Pin1.GPIO_Init.Pin, LOCKER_FAILED_TO_OPEN);
 80009b2:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80009b6:	f083 0301 	eor.w	r3, r3, #1
 80009ba:	b2db      	uxtb	r3, r3
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d013      	beq.n	80009e8 <main+0x490>
 80009c0:	4b82      	ldr	r3, [pc, #520]	; (8000bcc <main+0x674>)
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	b2db      	uxtb	r3, r3
 80009c6:	009b      	lsls	r3, r3, #2
 80009c8:	4a81      	ldr	r2, [pc, #516]	; (8000bd0 <main+0x678>)
 80009ca:	1898      	adds	r0, r3, r2
 80009cc:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 80009d0:	497d      	ldr	r1, [pc, #500]	; (8000bc8 <main+0x670>)
 80009d2:	4613      	mov	r3, r2
 80009d4:	011b      	lsls	r3, r3, #4
 80009d6:	1a9b      	subs	r3, r3, r2
 80009d8:	009b      	lsls	r3, r3, #2
 80009da:	440b      	add	r3, r1
 80009dc:	3304      	adds	r3, #4
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	226e      	movs	r2, #110	; 0x6e
 80009e2:	4619      	mov	r1, r3
 80009e4:	f003 fb9e 	bl	8004124 <Lock_AddErrorLog>

						  LockerStruct[locker_number].isFull=1;
 80009e8:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 80009ec:	4976      	ldr	r1, [pc, #472]	; (8000bc8 <main+0x670>)
 80009ee:	4613      	mov	r3, r2
 80009f0:	011b      	lsls	r3, r3, #4
 80009f2:	1a9b      	subs	r3, r3, r2
 80009f4:	009b      	lsls	r3, r3, #2
 80009f6:	440b      	add	r3, r1
 80009f8:	3330      	adds	r3, #48	; 0x30
 80009fa:	2201      	movs	r2, #1
 80009fc:	701a      	strb	r2, [r3, #0]
						  state = CONCLUDED;
 80009fe:	2305      	movs	r3, #5
 8000a00:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
						  Lock_SaveToFlash(&LockerStruct);
 8000a04:	4870      	ldr	r0, [pc, #448]	; (8000bc8 <main+0x670>)
 8000a06:	f003 fbbd 	bl	8004184 <Lock_SaveToFlash>
						  break;
 8000a0a:	e106      	b.n	8000c1a <main+0x6c2>

					  }

					  state=INVALID;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					  break;
 8000a12:	e102      	b.n	8000c1a <main+0x6c2>
				  case CLIENT:
					  locker_number = Security_GetLockerPosition(aRxBuffer, CLIENT_LOCKER_COL_COORD, CLIENT_LOCKER_LIN_COORD);
 8000a14:	1d3b      	adds	r3, r7, #4
 8000a16:	2203      	movs	r2, #3
 8000a18:	2106      	movs	r1, #6
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f003 fd9d 	bl	800455a <Security_GetLockerPosition>
 8000a20:	4603      	mov	r3, r0
 8000a22:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
					  if (locker_number == 0){
 8000a26:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d103      	bne.n	8000a36 <main+0x4de>
						  state=INVALID;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
						  break;
 8000a34:	e0f1      	b.n	8000c1a <main+0x6c2>
					  }
					  locker_number--;
 8000a36:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8000a3a:	3b01      	subs	r3, #1
 8000a3c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
					  if(Security_ComparePins(&LockerStruct[locker_number], aRxBuffer, CLIENT_PIN_COORD1, CLIENT_PIN_COORD2, CLIENT_PIN_COORD3, CLIENT_PIN_COORD4, 0)){
 8000a40:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 8000a44:	4613      	mov	r3, r2
 8000a46:	011b      	lsls	r3, r3, #4
 8000a48:	1a9b      	subs	r3, r3, r2
 8000a4a:	009b      	lsls	r3, r3, #2
 8000a4c:	4a5e      	ldr	r2, [pc, #376]	; (8000bc8 <main+0x670>)
 8000a4e:	1898      	adds	r0, r3, r2
 8000a50:	1d39      	adds	r1, r7, #4
 8000a52:	2300      	movs	r3, #0
 8000a54:	9302      	str	r3, [sp, #8]
 8000a56:	2309      	movs	r3, #9
 8000a58:	9301      	str	r3, [sp, #4]
 8000a5a:	2308      	movs	r3, #8
 8000a5c:	9300      	str	r3, [sp, #0]
 8000a5e:	2305      	movs	r3, #5
 8000a60:	2202      	movs	r2, #2
 8000a62:	f003 fe01 	bl	8004668 <Security_ComparePins>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d03b      	beq.n	8000ae4 <main+0x58c>

						  bool return_value = Lock_Toggle_Wait_Toggle(&LockerStruct[locker_number],LOCKER_WAITVALUE);
 8000a6c:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 8000a70:	4613      	mov	r3, r2
 8000a72:	011b      	lsls	r3, r3, #4
 8000a74:	1a9b      	subs	r3, r3, r2
 8000a76:	009b      	lsls	r3, r3, #2
 8000a78:	4a53      	ldr	r2, [pc, #332]	; (8000bc8 <main+0x670>)
 8000a7a:	4413      	add	r3, r2
 8000a7c:	2120      	movs	r1, #32
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f003 fb20 	bl	80040c4 <Lock_Toggle_Wait_Toggle>
 8000a84:	4603      	mov	r3, r0
 8000a86:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
						  if (return_value == 0) Lock_AddErrorLog (&LogsStruct[logsCount],LockerStruct[locker_number].Lock_Pin1.GPIO_Init.Pin, LOCKER_FAILED_TO_OPEN);
 8000a8a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000a8e:	f083 0301 	eor.w	r3, r3, #1
 8000a92:	b2db      	uxtb	r3, r3
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d013      	beq.n	8000ac0 <main+0x568>
 8000a98:	4b4c      	ldr	r3, [pc, #304]	; (8000bcc <main+0x674>)
 8000a9a:	781b      	ldrb	r3, [r3, #0]
 8000a9c:	b2db      	uxtb	r3, r3
 8000a9e:	009b      	lsls	r3, r3, #2
 8000aa0:	4a4b      	ldr	r2, [pc, #300]	; (8000bd0 <main+0x678>)
 8000aa2:	1898      	adds	r0, r3, r2
 8000aa4:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 8000aa8:	4947      	ldr	r1, [pc, #284]	; (8000bc8 <main+0x670>)
 8000aaa:	4613      	mov	r3, r2
 8000aac:	011b      	lsls	r3, r3, #4
 8000aae:	1a9b      	subs	r3, r3, r2
 8000ab0:	009b      	lsls	r3, r3, #2
 8000ab2:	440b      	add	r3, r1
 8000ab4:	3304      	adds	r3, #4
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	226e      	movs	r2, #110	; 0x6e
 8000aba:	4619      	mov	r1, r3
 8000abc:	f003 fb32 	bl	8004124 <Lock_AddErrorLog>

						  LockerStruct[locker_number].isFull=0;
 8000ac0:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 8000ac4:	4940      	ldr	r1, [pc, #256]	; (8000bc8 <main+0x670>)
 8000ac6:	4613      	mov	r3, r2
 8000ac8:	011b      	lsls	r3, r3, #4
 8000aca:	1a9b      	subs	r3, r3, r2
 8000acc:	009b      	lsls	r3, r3, #2
 8000ace:	440b      	add	r3, r1
 8000ad0:	3330      	adds	r3, #48	; 0x30
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	701a      	strb	r2, [r3, #0]
 						  state = CONCLUDED;
 8000ad6:	2305      	movs	r3, #5
 8000ad8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 						  Lock_SaveToFlash(&LockerStruct);
 8000adc:	483a      	ldr	r0, [pc, #232]	; (8000bc8 <main+0x670>)
 8000ade:	f003 fb51 	bl	8004184 <Lock_SaveToFlash>
						  break;
 8000ae2:	e09a      	b.n	8000c1a <main+0x6c2>
					  }
					  state=INVALID;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					  break;
 8000aea:	e096      	b.n	8000c1a <main+0x6c2>

				  case RECOVERY:
					  locker_number = Security_GetLockerPosition(aRxBuffer, RECOVERY_LOCKER_COL_COORD, RECOVERY_LOCKER_LIN_COORD);
 8000aec:	1d3b      	adds	r3, r7, #4
 8000aee:	2203      	movs	r2, #3
 8000af0:	2106      	movs	r1, #6
 8000af2:	4618      	mov	r0, r3
 8000af4:	f003 fd31 	bl	800455a <Security_GetLockerPosition>
 8000af8:	4603      	mov	r3, r0
 8000afa:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
					  if (locker_number == 0){
 8000afe:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d103      	bne.n	8000b0e <main+0x5b6>
						  state=INVALID;
 8000b06:	2300      	movs	r3, #0
 8000b08:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
						  break;
 8000b0c:	e085      	b.n	8000c1a <main+0x6c2>
					  }
					  locker_number--;
 8000b0e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8000b12:	3b01      	subs	r3, #1
 8000b14:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
					  if(Security_ComparePins(&LockerStruct[locker_number], aRxBuffer, RECOVERY_PIN_COORD1, RECOVERY_PIN_COORD2, RECOVERY_PIN_COORD3, RECOVERY_PIN_COORD4,1)){
 8000b18:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 8000b1c:	4613      	mov	r3, r2
 8000b1e:	011b      	lsls	r3, r3, #4
 8000b20:	1a9b      	subs	r3, r3, r2
 8000b22:	009b      	lsls	r3, r3, #2
 8000b24:	4a28      	ldr	r2, [pc, #160]	; (8000bc8 <main+0x670>)
 8000b26:	1898      	adds	r0, r3, r2
 8000b28:	1d39      	adds	r1, r7, #4
 8000b2a:	2301      	movs	r3, #1
 8000b2c:	9302      	str	r3, [sp, #8]
 8000b2e:	2309      	movs	r3, #9
 8000b30:	9301      	str	r3, [sp, #4]
 8000b32:	2308      	movs	r3, #8
 8000b34:	9300      	str	r3, [sp, #0]
 8000b36:	2305      	movs	r3, #5
 8000b38:	2202      	movs	r2, #2
 8000b3a:	f003 fd95 	bl	8004668 <Security_ComparePins>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d03b      	beq.n	8000bbc <main+0x664>

						  bool return_value = Lock_Toggle_Wait_Toggle(&LockerStruct[locker_number],LOCKER_WAITVALUE);
 8000b44:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 8000b48:	4613      	mov	r3, r2
 8000b4a:	011b      	lsls	r3, r3, #4
 8000b4c:	1a9b      	subs	r3, r3, r2
 8000b4e:	009b      	lsls	r3, r3, #2
 8000b50:	4a1d      	ldr	r2, [pc, #116]	; (8000bc8 <main+0x670>)
 8000b52:	4413      	add	r3, r2
 8000b54:	2120      	movs	r1, #32
 8000b56:	4618      	mov	r0, r3
 8000b58:	f003 fab4 	bl	80040c4 <Lock_Toggle_Wait_Toggle>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
						  if (return_value == 0) Lock_AddErrorLog (&LogsStruct[logsCount],LockerStruct[locker_number].Lock_Pin1.GPIO_Init.Pin, LOCKER_FAILED_TO_OPEN);
 8000b62:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8000b66:	f083 0301 	eor.w	r3, r3, #1
 8000b6a:	b2db      	uxtb	r3, r3
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d013      	beq.n	8000b98 <main+0x640>
 8000b70:	4b16      	ldr	r3, [pc, #88]	; (8000bcc <main+0x674>)
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	b2db      	uxtb	r3, r3
 8000b76:	009b      	lsls	r3, r3, #2
 8000b78:	4a15      	ldr	r2, [pc, #84]	; (8000bd0 <main+0x678>)
 8000b7a:	1898      	adds	r0, r3, r2
 8000b7c:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 8000b80:	4911      	ldr	r1, [pc, #68]	; (8000bc8 <main+0x670>)
 8000b82:	4613      	mov	r3, r2
 8000b84:	011b      	lsls	r3, r3, #4
 8000b86:	1a9b      	subs	r3, r3, r2
 8000b88:	009b      	lsls	r3, r3, #2
 8000b8a:	440b      	add	r3, r1
 8000b8c:	3304      	adds	r3, #4
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	226e      	movs	r2, #110	; 0x6e
 8000b92:	4619      	mov	r1, r3
 8000b94:	f003 fac6 	bl	8004124 <Lock_AddErrorLog>

						  LockerStruct[locker_number].isFull=0;
 8000b98:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 8000b9c:	490a      	ldr	r1, [pc, #40]	; (8000bc8 <main+0x670>)
 8000b9e:	4613      	mov	r3, r2
 8000ba0:	011b      	lsls	r3, r3, #4
 8000ba2:	1a9b      	subs	r3, r3, r2
 8000ba4:	009b      	lsls	r3, r3, #2
 8000ba6:	440b      	add	r3, r1
 8000ba8:	3330      	adds	r3, #48	; 0x30
 8000baa:	2200      	movs	r2, #0
 8000bac:	701a      	strb	r2, [r3, #0]
 						  state = CONCLUDED;
 8000bae:	2305      	movs	r3, #5
 8000bb0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 						  Lock_SaveToFlash(&LockerStruct);
 8000bb4:	4804      	ldr	r0, [pc, #16]	; (8000bc8 <main+0x670>)
 8000bb6:	f003 fae5 	bl	8004184 <Lock_SaveToFlash>
						  break;
 8000bba:	e02e      	b.n	8000c1a <main+0x6c2>
					  }
					  state=INVALID;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					  break;
 8000bc2:	e02a      	b.n	8000c1a <main+0x6c2>
 8000bc4:	2000039c 	.word	0x2000039c
 8000bc8:	200000dc 	.word	0x200000dc
 8000bcc:	20000398 	.word	0x20000398
 8000bd0:	20000208 	.word	0x20000208
				  case MAINTENANCE:
					  uint8_t opcode =  Security_GetMaintOpType(aRxBuffer, MAINTENANCE_OPCODE_COORD1);
 8000bd4:	1d3b      	adds	r3, r7, #4
 8000bd6:	2105      	movs	r1, #5
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f003 fdb0 	bl	800473e <Security_GetMaintOpType>
 8000bde:	4603      	mov	r3, r0
 8000be0:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
					  if(Security_ExecuteMaintOp(opcode, &LockerStruct)){
 8000be4:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8000be8:	4910      	ldr	r1, [pc, #64]	; (8000c2c <main+0x6d4>)
 8000bea:	4618      	mov	r0, r3
 8000bec:	f003 fdc2 	bl	8004774 <Security_ExecuteMaintOp>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d003      	beq.n	8000bfe <main+0x6a6>
						  state = INVALID;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
						  break;
 8000bfc:	e00d      	b.n	8000c1a <main+0x6c2>
					  }
					  state = CONCLUDED;
 8000bfe:	2305      	movs	r3, #5
 8000c00:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					  break;
 8000c04:	e009      	b.n	8000c1a <main+0x6c2>
				  case CONCLUDED:
					  inOperation = 0;
 8000c06:	4b0a      	ldr	r3, [pc, #40]	; (8000c30 <main+0x6d8>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	701a      	strb	r2, [r3, #0]
					  state++;
 8000c0c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000c10:	3301      	adds	r3, #1
 8000c12:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					  break;
 8000c16:	e000      	b.n	8000c1a <main+0x6c2>
				  default:
					  break;
 8000c18:	bf00      	nop
			  }
			  memset(aRxBuffer, 0, SIZE_OF_QRCODE);
 8000c1a:	1d3b      	adds	r3, r7, #4
 8000c1c:	220d      	movs	r2, #13
 8000c1e:	2100      	movs	r1, #0
 8000c20:	4618      	mov	r0, r3
 8000c22:	f003 ff2b 	bl	8004a7c <memset>
			  break;
 8000c26:	bf00      	nop
	   while(!Scanner_Sleep(&UartHandle));
 8000c28:	e525      	b.n	8000676 <main+0x11e>
 8000c2a:	bf00      	nop
 8000c2c:	200000dc 	.word	0x200000dc
 8000c30:	20000399 	.word	0x20000399

08000c34 <HAL_GPIO_EXTI_Callback>:
  /* USER CODE END 3 */
}

//function to deal with all interrupts
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b083      	sub	sp, #12
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	80fb      	strh	r3, [r7, #6]


    if (GPIO_Pin == GPIO_PIN_0)
 8000c3e:	88fb      	ldrh	r3, [r7, #6]
 8000c40:	2b01      	cmp	r3, #1
 8000c42:	d102      	bne.n	8000c4a <HAL_GPIO_EXTI_Callback+0x16>
    {

        __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_0);
 8000c44:	4b28      	ldr	r3, [pc, #160]	; (8000ce8 <HAL_GPIO_EXTI_Callback+0xb4>)
 8000c46:	2201      	movs	r2, #1
 8000c48:	615a      	str	r2, [r3, #20]

    }

    if ((GPIO_Pin == GPIO_PIN_1 && (!inOperation))){
 8000c4a:	88fb      	ldrh	r3, [r7, #6]
 8000c4c:	2b02      	cmp	r3, #2
 8000c4e:	d10a      	bne.n	8000c66 <HAL_GPIO_EXTI_Callback+0x32>
 8000c50:	4b26      	ldr	r3, [pc, #152]	; (8000cec <HAL_GPIO_EXTI_Callback+0xb8>)
 8000c52:	781b      	ldrb	r3, [r3, #0]
 8000c54:	b2db      	uxtb	r3, r3
 8000c56:	f083 0301 	eor.w	r3, r3, #1
 8000c5a:	b2db      	uxtb	r3, r3
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d002      	beq.n	8000c66 <HAL_GPIO_EXTI_Callback+0x32>

			__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_1);
 8000c60:	4b21      	ldr	r3, [pc, #132]	; (8000ce8 <HAL_GPIO_EXTI_Callback+0xb4>)
 8000c62:	2202      	movs	r2, #2
 8000c64:	615a      	str	r2, [r3, #20]

    }

    if ((GPIO_Pin == GPIO_PIN_3 && (!inOperation))){
 8000c66:	88fb      	ldrh	r3, [r7, #6]
 8000c68:	2b08      	cmp	r3, #8
 8000c6a:	d10a      	bne.n	8000c82 <HAL_GPIO_EXTI_Callback+0x4e>
 8000c6c:	4b1f      	ldr	r3, [pc, #124]	; (8000cec <HAL_GPIO_EXTI_Callback+0xb8>)
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	b2db      	uxtb	r3, r3
 8000c72:	f083 0301 	eor.w	r3, r3, #1
 8000c76:	b2db      	uxtb	r3, r3
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d002      	beq.n	8000c82 <HAL_GPIO_EXTI_Callback+0x4e>

			__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_3);
 8000c7c:	4b1a      	ldr	r3, [pc, #104]	; (8000ce8 <HAL_GPIO_EXTI_Callback+0xb4>)
 8000c7e:	2208      	movs	r2, #8
 8000c80:	615a      	str	r2, [r3, #20]

    }

    if ((GPIO_Pin == GPIO_PIN_4 && (!inOperation))){
 8000c82:	88fb      	ldrh	r3, [r7, #6]
 8000c84:	2b10      	cmp	r3, #16
 8000c86:	d10a      	bne.n	8000c9e <HAL_GPIO_EXTI_Callback+0x6a>
 8000c88:	4b18      	ldr	r3, [pc, #96]	; (8000cec <HAL_GPIO_EXTI_Callback+0xb8>)
 8000c8a:	781b      	ldrb	r3, [r3, #0]
 8000c8c:	b2db      	uxtb	r3, r3
 8000c8e:	f083 0301 	eor.w	r3, r3, #1
 8000c92:	b2db      	uxtb	r3, r3
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d002      	beq.n	8000c9e <HAL_GPIO_EXTI_Callback+0x6a>

			__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_4);
 8000c98:	4b13      	ldr	r3, [pc, #76]	; (8000ce8 <HAL_GPIO_EXTI_Callback+0xb4>)
 8000c9a:	2210      	movs	r2, #16
 8000c9c:	615a      	str	r2, [r3, #20]

    }

    if ((GPIO_Pin == GPIO_PIN_7 && (!inOperation))){
 8000c9e:	88fb      	ldrh	r3, [r7, #6]
 8000ca0:	2b80      	cmp	r3, #128	; 0x80
 8000ca2:	d10a      	bne.n	8000cba <HAL_GPIO_EXTI_Callback+0x86>
 8000ca4:	4b11      	ldr	r3, [pc, #68]	; (8000cec <HAL_GPIO_EXTI_Callback+0xb8>)
 8000ca6:	781b      	ldrb	r3, [r3, #0]
 8000ca8:	b2db      	uxtb	r3, r3
 8000caa:	f083 0301 	eor.w	r3, r3, #1
 8000cae:	b2db      	uxtb	r3, r3
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d002      	beq.n	8000cba <HAL_GPIO_EXTI_Callback+0x86>

			__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_7);
 8000cb4:	4b0c      	ldr	r3, [pc, #48]	; (8000ce8 <HAL_GPIO_EXTI_Callback+0xb4>)
 8000cb6:	2280      	movs	r2, #128	; 0x80
 8000cb8:	615a      	str	r2, [r3, #20]

    }

    if ((GPIO_Pin == GPIO_PIN_12 && (!inOperation))){
 8000cba:	88fb      	ldrh	r3, [r7, #6]
 8000cbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000cc0:	d10b      	bne.n	8000cda <HAL_GPIO_EXTI_Callback+0xa6>
 8000cc2:	4b0a      	ldr	r3, [pc, #40]	; (8000cec <HAL_GPIO_EXTI_Callback+0xb8>)
 8000cc4:	781b      	ldrb	r3, [r3, #0]
 8000cc6:	b2db      	uxtb	r3, r3
 8000cc8:	f083 0301 	eor.w	r3, r3, #1
 8000ccc:	b2db      	uxtb	r3, r3
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d003      	beq.n	8000cda <HAL_GPIO_EXTI_Callback+0xa6>

			__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_12);
 8000cd2:	4b05      	ldr	r3, [pc, #20]	; (8000ce8 <HAL_GPIO_EXTI_Callback+0xb4>)
 8000cd4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000cd8:	615a      	str	r2, [r3, #20]
    }

}
 8000cda:	bf00      	nop
 8000cdc:	370c      	adds	r7, #12
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop
 8000ce8:	40010400 	.word	0x40010400
 8000cec:	20000399 	.word	0x20000399

08000cf0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b096      	sub	sp, #88	; 0x58
 8000cf4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cf6:	f107 0314 	add.w	r3, r7, #20
 8000cfa:	2244      	movs	r2, #68	; 0x44
 8000cfc:	2100      	movs	r1, #0
 8000cfe:	4618      	mov	r0, r3
 8000d00:	f003 febc 	bl	8004a7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d04:	463b      	mov	r3, r7
 8000d06:	2200      	movs	r2, #0
 8000d08:	601a      	str	r2, [r3, #0]
 8000d0a:	605a      	str	r2, [r3, #4]
 8000d0c:	609a      	str	r2, [r3, #8]
 8000d0e:	60da      	str	r2, [r3, #12]
 8000d10:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000d12:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000d16:	f001 f917 	bl	8001f48 <HAL_PWREx_ControlVoltageScaling>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d001      	beq.n	8000d24 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000d20:	f000 f892 	bl	8000e48 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000d24:	f001 f8be 	bl	8001ea4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000d28:	4b21      	ldr	r3, [pc, #132]	; (8000db0 <SystemClock_Config+0xc0>)
 8000d2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000d2e:	4a20      	ldr	r2, [pc, #128]	; (8000db0 <SystemClock_Config+0xc0>)
 8000d30:	f023 0318 	bic.w	r3, r3, #24
 8000d34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000d38:	2314      	movs	r3, #20
 8000d3a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000d3c:	2301      	movs	r3, #1
 8000d3e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000d40:	2301      	movs	r3, #1
 8000d42:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000d44:	2300      	movs	r3, #0
 8000d46:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000d48:	2360      	movs	r3, #96	; 0x60
 8000d4a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d4c:	2302      	movs	r3, #2
 8000d4e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000d50:	2301      	movs	r3, #1
 8000d52:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000d54:	2301      	movs	r3, #1
 8000d56:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000d58:	2310      	movs	r3, #16
 8000d5a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000d5c:	2307      	movs	r3, #7
 8000d5e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000d60:	2302      	movs	r3, #2
 8000d62:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000d64:	2302      	movs	r3, #2
 8000d66:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d68:	f107 0314 	add.w	r3, r7, #20
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f001 f989 	bl	8002084 <HAL_RCC_OscConfig>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d001      	beq.n	8000d7c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000d78:	f000 f866 	bl	8000e48 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d7c:	230f      	movs	r3, #15
 8000d7e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d80:	2303      	movs	r3, #3
 8000d82:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d84:	2300      	movs	r3, #0
 8000d86:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000d90:	463b      	mov	r3, r7
 8000d92:	2101      	movs	r1, #1
 8000d94:	4618      	mov	r0, r3
 8000d96:	f001 fd89 	bl	80028ac <HAL_RCC_ClockConfig>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d001      	beq.n	8000da4 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000da0:	f000 f852 	bl	8000e48 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000da4:	f002 f99c 	bl	80030e0 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000da8:	bf00      	nop
 8000daa:	3758      	adds	r7, #88	; 0x58
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	40021000 	.word	0x40021000

08000db4 <SystemClock_Decrease>:
  *         to go down to 100 KHz
  * @param  None
  * @retval None
  */
void SystemClock_Decrease(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b096      	sub	sp, #88	; 0x58
 8000db8:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dba:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	601a      	str	r2, [r3, #0]
 8000dc2:	605a      	str	r2, [r3, #4]
 8000dc4:	609a      	str	r2, [r3, #8]
 8000dc6:	60da      	str	r2, [r3, #12]
 8000dc8:	611a      	str	r2, [r3, #16]
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dca:	463b      	mov	r3, r7
 8000dcc:	2244      	movs	r2, #68	; 0x44
 8000dce:	2100      	movs	r1, #0
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f003 fe53 	bl	8004a7c <memset>

  /* MSI is enabled after System reset, activate PLL with MSI as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000dd6:	2310      	movs	r3, #16
 8000dd8:	603b      	str	r3, [r7, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_OFF;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	607b      	str	r3, [r7, #4]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000dde:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000de2:	60fb      	str	r3, [r7, #12]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000de4:	2301      	movs	r3, #1
 8000de6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_0;
 8000de8:	2300      	movs	r3, #0
 8000dea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000dec:	2300      	movs	r3, #0
 8000dee:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000df0:	2300      	movs	r3, #0
 8000df2:	62bb      	str	r3, [r7, #40]	; 0x28
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000df4:	463b      	mov	r3, r7
 8000df6:	4618      	mov	r0, r3
 8000df8:	f001 f944 	bl	8002084 <HAL_RCC_OscConfig>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d001      	beq.n	8000e06 <SystemClock_Decrease+0x52>
  {
    /* Initialization Error */
    Error_Handler();
 8000e02:	f000 f821 	bl	8000e48 <Error_Handler>
  }

  /* Select MSI as system clock source and configure the HCLK, PCLK1 and PCLK2
     clocks dividers */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_SYSCLK;
 8000e06:	2301      	movs	r3, #1
 8000e08:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e12:	2300      	movs	r3, #0
 8000e14:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e16:	2300      	movs	r3, #0
 8000e18:	657b      	str	r3, [r7, #84]	; 0x54
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000e1a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000e1e:	2100      	movs	r1, #0
 8000e20:	4618      	mov	r0, r3
 8000e22:	f001 fd43 	bl	80028ac <HAL_RCC_ClockConfig>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d001      	beq.n	8000e30 <SystemClock_Decrease+0x7c>
  {
    /* Initialization Error */
    Error_Handler();
 8000e2c:	f000 f80c 	bl	8000e48 <Error_Handler>
  }

  /* Disable HSI to reduce power consumption since MSI is used from that point */
  __HAL_RCC_HSI_DISABLE();
 8000e30:	4b04      	ldr	r3, [pc, #16]	; (8000e44 <SystemClock_Decrease+0x90>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4a03      	ldr	r2, [pc, #12]	; (8000e44 <SystemClock_Decrease+0x90>)
 8000e36:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000e3a:	6013      	str	r3, [r2, #0]

}
 8000e3c:	bf00      	nop
 8000e3e:	3758      	adds	r7, #88	; 0x58
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	40021000 	.word	0x40021000

08000e48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e4c:	b672      	cpsid	i
}
 8000e4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e50:	e7fe      	b.n	8000e50 <Error_Handler+0x8>
	...

08000e54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b083      	sub	sp, #12
 8000e58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e5a:	4b0f      	ldr	r3, [pc, #60]	; (8000e98 <HAL_MspInit+0x44>)
 8000e5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e5e:	4a0e      	ldr	r2, [pc, #56]	; (8000e98 <HAL_MspInit+0x44>)
 8000e60:	f043 0301 	orr.w	r3, r3, #1
 8000e64:	6613      	str	r3, [r2, #96]	; 0x60
 8000e66:	4b0c      	ldr	r3, [pc, #48]	; (8000e98 <HAL_MspInit+0x44>)
 8000e68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e6a:	f003 0301 	and.w	r3, r3, #1
 8000e6e:	607b      	str	r3, [r7, #4]
 8000e70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e72:	4b09      	ldr	r3, [pc, #36]	; (8000e98 <HAL_MspInit+0x44>)
 8000e74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e76:	4a08      	ldr	r2, [pc, #32]	; (8000e98 <HAL_MspInit+0x44>)
 8000e78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e7c:	6593      	str	r3, [r2, #88]	; 0x58
 8000e7e:	4b06      	ldr	r3, [pc, #24]	; (8000e98 <HAL_MspInit+0x44>)
 8000e80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e86:	603b      	str	r3, [r7, #0]
 8000e88:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e8a:	bf00      	nop
 8000e8c:	370c      	adds	r7, #12
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop
 8000e98:	40021000 	.word	0x40021000

08000e9c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b09e      	sub	sp, #120	; 0x78
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	601a      	str	r2, [r3, #0]
 8000eac:	605a      	str	r2, [r3, #4]
 8000eae:	609a      	str	r2, [r3, #8]
 8000eb0:	60da      	str	r2, [r3, #12]
 8000eb2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000eb4:	f107 0310 	add.w	r3, r7, #16
 8000eb8:	2254      	movs	r2, #84	; 0x54
 8000eba:	2100      	movs	r1, #0
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f003 fddd 	bl	8004a7c <memset>
  if(huart->Instance==USART1)
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	4a28      	ldr	r2, [pc, #160]	; (8000f68 <HAL_UART_MspInit+0xcc>)
 8000ec8:	4293      	cmp	r3, r2
 8000eca:	d149      	bne.n	8000f60 <HAL_UART_MspInit+0xc4>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000ecc:	2301      	movs	r3, #1
 8000ece:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ed4:	f107 0310 	add.w	r3, r7, #16
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f001 ff0b 	bl	8002cf4 <HAL_RCCEx_PeriphCLKConfig>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d001      	beq.n	8000ee8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000ee4:	f7ff ffb0 	bl	8000e48 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ee8:	4b20      	ldr	r3, [pc, #128]	; (8000f6c <HAL_UART_MspInit+0xd0>)
 8000eea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000eec:	4a1f      	ldr	r2, [pc, #124]	; (8000f6c <HAL_UART_MspInit+0xd0>)
 8000eee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ef2:	6613      	str	r3, [r2, #96]	; 0x60
 8000ef4:	4b1d      	ldr	r3, [pc, #116]	; (8000f6c <HAL_UART_MspInit+0xd0>)
 8000ef6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ef8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000efc:	60fb      	str	r3, [r7, #12]
 8000efe:	68fb      	ldr	r3, [r7, #12]
//    USARTx_TX_GPIO_CLK_ENABLE();
//    USARTx_RX_GPIO_CLK_ENABLE();
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f00:	4b1a      	ldr	r3, [pc, #104]	; (8000f6c <HAL_UART_MspInit+0xd0>)
 8000f02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f04:	4a19      	ldr	r2, [pc, #100]	; (8000f6c <HAL_UART_MspInit+0xd0>)
 8000f06:	f043 0301 	orr.w	r3, r3, #1
 8000f0a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f0c:	4b17      	ldr	r3, [pc, #92]	; (8000f6c <HAL_UART_MspInit+0xd0>)
 8000f0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f10:	f003 0301 	and.w	r3, r3, #1
 8000f14:	60bb      	str	r3, [r7, #8]
 8000f16:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000f18:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f1c:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f1e:	2302      	movs	r3, #2
 8000f20:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f22:	2300      	movs	r3, #0
 8000f24:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f26:	2303      	movs	r3, #3
 8000f28:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000f2a:	2307      	movs	r3, #7
 8000f2c:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000f2e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000f32:	4619      	mov	r1, r3
 8000f34:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f38:	f000 fd1e 	bl	8001978 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000f3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f40:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f42:	2302      	movs	r3, #2
 8000f44:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f46:	2300      	movs	r3, #0
 8000f48:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f4a:	2303      	movs	r3, #3
 8000f4c:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000f4e:	2307      	movs	r3, #7
 8000f50:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000f52:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000f56:	4619      	mov	r1, r3
 8000f58:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f5c:	f000 fd0c 	bl	8001978 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000f60:	bf00      	nop
 8000f62:	3778      	adds	r7, #120	; 0x78
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	40013800 	.word	0x40013800
 8000f6c:	40021000 	.word	0x40021000

08000f70 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a0f      	ldr	r2, [pc, #60]	; (8000fbc <HAL_UART_MspDeInit+0x4c>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d117      	bne.n	8000fb2 <HAL_UART_MspDeInit+0x42>
  {
  /* USER CODE BEGIN USART2_MspDeInit 0 */

	  USARTx_FORCE_RESET();
 8000f82:	4b0f      	ldr	r3, [pc, #60]	; (8000fc0 <HAL_UART_MspDeInit+0x50>)
 8000f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f86:	4a0e      	ldr	r2, [pc, #56]	; (8000fc0 <HAL_UART_MspDeInit+0x50>)
 8000f88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f8c:	6413      	str	r3, [r2, #64]	; 0x40
	  USARTx_RELEASE_RESET();
 8000f8e:	4b0c      	ldr	r3, [pc, #48]	; (8000fc0 <HAL_UART_MspDeInit+0x50>)
 8000f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f92:	4a0b      	ldr	r2, [pc, #44]	; (8000fc0 <HAL_UART_MspDeInit+0x50>)
 8000f94:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000f98:	6413      	str	r3, [r2, #64]	; 0x40
  /* USER CODE END USART2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8000f9a:	4b09      	ldr	r3, [pc, #36]	; (8000fc0 <HAL_UART_MspDeInit+0x50>)
 8000f9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f9e:	4a08      	ldr	r2, [pc, #32]	; (8000fc0 <HAL_UART_MspDeInit+0x50>)
 8000fa0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000fa4:	6613      	str	r3, [r2, #96]	; 0x60

    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    HAL_GPIO_DeInit(GPIOA, VCP_TX_Pin|VCP_RX_Pin);
 8000fa6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8000faa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fae:	f000 fe4d 	bl	8001c4c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }

}
 8000fb2:	bf00      	nop
 8000fb4:	3708      	adds	r7, #8
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	40013800 	.word	0x40013800
 8000fc0:	40021000 	.word	0x40021000

08000fc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000fc8:	e7fe      	b.n	8000fc8 <NMI_Handler+0x4>

08000fca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fca:	b480      	push	{r7}
 8000fcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fce:	e7fe      	b.n	8000fce <HardFault_Handler+0x4>

08000fd0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fd4:	e7fe      	b.n	8000fd4 <MemManage_Handler+0x4>

08000fd6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fd6:	b480      	push	{r7}
 8000fd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fda:	e7fe      	b.n	8000fda <BusFault_Handler+0x4>

08000fdc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fe0:	e7fe      	b.n	8000fe0 <UsageFault_Handler+0x4>

08000fe2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fe2:	b480      	push	{r7}
 8000fe4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fe6:	bf00      	nop
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr

08000ff0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ff4:	bf00      	nop
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr

08000ffe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ffe:	b480      	push	{r7}
 8001000:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001002:	bf00      	nop
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr

0800100c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001010:	f000 f8c4 	bl	800119c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001014:	bf00      	nop
 8001016:	bd80      	pop	{r7, pc}

08001018 <EXTI0_IRQHandler>:
/* please refer to the startup file (startup_stm32l4xx.s).                    */
/******************************************************************************/


void EXTI0_IRQHandler(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800101c:	2001      	movs	r0, #1
 800101e:	f000 ff29 	bl	8001e74 <HAL_GPIO_EXTI_IRQHandler>
}
 8001022:	bf00      	nop
 8001024:	bd80      	pop	{r7, pc}

08001026 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 8001026:	b580      	push	{r7, lr}
 8001028:	af00      	add	r7, sp, #0
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 800102a:	2002      	movs	r0, #2
 800102c:	f000 ff22 	bl	8001e74 <HAL_GPIO_EXTI_IRQHandler>
}
 8001030:	bf00      	nop
 8001032:	bd80      	pop	{r7, pc}

08001034 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8001038:	2004      	movs	r0, #4
 800103a:	f000 ff1b 	bl	8001e74 <HAL_GPIO_EXTI_IRQHandler>
}
 800103e:	bf00      	nop
 8001040:	bd80      	pop	{r7, pc}

08001042 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 8001042:	b580      	push	{r7, lr}
 8001044:	af00      	add	r7, sp, #0
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8001046:	2008      	movs	r0, #8
 8001048:	f000 ff14 	bl	8001e74 <HAL_GPIO_EXTI_IRQHandler>
}
 800104c:	bf00      	nop
 800104e:	bd80      	pop	{r7, pc}

08001050 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8001054:	2010      	movs	r0, #16
 8001056:	f000 ff0d 	bl	8001e74 <HAL_GPIO_EXTI_IRQHandler>
}
 800105a:	bf00      	nop
 800105c:	bd80      	pop	{r7, pc}

0800105e <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void)
{
 800105e:	b580      	push	{r7, lr}
 8001060:	af00      	add	r7, sp, #0
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8001062:	2080      	movs	r0, #128	; 0x80
 8001064:	f000 ff06 	bl	8001e74 <HAL_GPIO_EXTI_IRQHandler>
}
 8001068:	bf00      	nop
 800106a:	bd80      	pop	{r7, pc}

0800106c <EXTI15_10_IRQHandler>:
  * @brief  This function handles external lines 10 to 15 interrupt request.
  * @param  None
  * @retval None
  */
void EXTI15_10_IRQHandler(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8001070:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001074:	f000 fefe 	bl	8001e74 <HAL_GPIO_EXTI_IRQHandler>
}
 8001078:	bf00      	nop
 800107a:	bd80      	pop	{r7, pc}

0800107c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001080:	4b06      	ldr	r3, [pc, #24]	; (800109c <SystemInit+0x20>)
 8001082:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001086:	4a05      	ldr	r2, [pc, #20]	; (800109c <SystemInit+0x20>)
 8001088:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800108c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001090:	bf00      	nop
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr
 800109a:	bf00      	nop
 800109c:	e000ed00 	.word	0xe000ed00

080010a0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80010a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010d8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80010a4:	f7ff ffea 	bl	800107c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010a8:	480c      	ldr	r0, [pc, #48]	; (80010dc <LoopForever+0x6>)
  ldr r1, =_edata
 80010aa:	490d      	ldr	r1, [pc, #52]	; (80010e0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80010ac:	4a0d      	ldr	r2, [pc, #52]	; (80010e4 <LoopForever+0xe>)
  movs r3, #0
 80010ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010b0:	e002      	b.n	80010b8 <LoopCopyDataInit>

080010b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010b6:	3304      	adds	r3, #4

080010b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010bc:	d3f9      	bcc.n	80010b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010be:	4a0a      	ldr	r2, [pc, #40]	; (80010e8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80010c0:	4c0a      	ldr	r4, [pc, #40]	; (80010ec <LoopForever+0x16>)
  movs r3, #0
 80010c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010c4:	e001      	b.n	80010ca <LoopFillZerobss>

080010c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010c8:	3204      	adds	r2, #4

080010ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010cc:	d3fb      	bcc.n	80010c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010ce:	f003 fcef 	bl	8004ab0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80010d2:	f7ff fa41 	bl	8000558 <main>

080010d6 <LoopForever>:

LoopForever:
    b LoopForever
 80010d6:	e7fe      	b.n	80010d6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80010d8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80010dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010e0:	200000c0 	.word	0x200000c0
  ldr r2, =_sidata
 80010e4:	08004b98 	.word	0x08004b98
  ldr r2, =_sbss
 80010e8:	200000c0 	.word	0x200000c0
  ldr r4, =_ebss
 80010ec:	200005c8 	.word	0x200005c8

080010f0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80010f0:	e7fe      	b.n	80010f0 <ADC1_IRQHandler>

080010f2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010f2:	b580      	push	{r7, lr}
 80010f4:	b082      	sub	sp, #8
 80010f6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80010f8:	2300      	movs	r3, #0
 80010fa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010fc:	2003      	movs	r0, #3
 80010fe:	f000 f981 	bl	8001404 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001102:	2000      	movs	r0, #0
 8001104:	f000 f80e 	bl	8001124 <HAL_InitTick>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d002      	beq.n	8001114 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800110e:	2301      	movs	r3, #1
 8001110:	71fb      	strb	r3, [r7, #7]
 8001112:	e001      	b.n	8001118 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001114:	f7ff fe9e 	bl	8000e54 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001118:	79fb      	ldrb	r3, [r7, #7]
}
 800111a:	4618      	mov	r0, r3
 800111c:	3708      	adds	r7, #8
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
	...

08001124 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b084      	sub	sp, #16
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800112c:	2300      	movs	r3, #0
 800112e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001130:	4b17      	ldr	r3, [pc, #92]	; (8001190 <HAL_InitTick+0x6c>)
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d023      	beq.n	8001180 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001138:	4b16      	ldr	r3, [pc, #88]	; (8001194 <HAL_InitTick+0x70>)
 800113a:	681a      	ldr	r2, [r3, #0]
 800113c:	4b14      	ldr	r3, [pc, #80]	; (8001190 <HAL_InitTick+0x6c>)
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	4619      	mov	r1, r3
 8001142:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001146:	fbb3 f3f1 	udiv	r3, r3, r1
 800114a:	fbb2 f3f3 	udiv	r3, r2, r3
 800114e:	4618      	mov	r0, r3
 8001150:	f000 f98d 	bl	800146e <HAL_SYSTICK_Config>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d10f      	bne.n	800117a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	2b0f      	cmp	r3, #15
 800115e:	d809      	bhi.n	8001174 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001160:	2200      	movs	r2, #0
 8001162:	6879      	ldr	r1, [r7, #4]
 8001164:	f04f 30ff 	mov.w	r0, #4294967295
 8001168:	f000 f957 	bl	800141a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800116c:	4a0a      	ldr	r2, [pc, #40]	; (8001198 <HAL_InitTick+0x74>)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	6013      	str	r3, [r2, #0]
 8001172:	e007      	b.n	8001184 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001174:	2301      	movs	r3, #1
 8001176:	73fb      	strb	r3, [r7, #15]
 8001178:	e004      	b.n	8001184 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800117a:	2301      	movs	r3, #1
 800117c:	73fb      	strb	r3, [r7, #15]
 800117e:	e001      	b.n	8001184 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001180:	2301      	movs	r3, #1
 8001182:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001184:	7bfb      	ldrb	r3, [r7, #15]
}
 8001186:	4618      	mov	r0, r3
 8001188:	3710      	adds	r7, #16
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	20000008 	.word	0x20000008
 8001194:	20000000 	.word	0x20000000
 8001198:	20000004 	.word	0x20000004

0800119c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80011a0:	4b06      	ldr	r3, [pc, #24]	; (80011bc <HAL_IncTick+0x20>)
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	461a      	mov	r2, r3
 80011a6:	4b06      	ldr	r3, [pc, #24]	; (80011c0 <HAL_IncTick+0x24>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4413      	add	r3, r2
 80011ac:	4a04      	ldr	r2, [pc, #16]	; (80011c0 <HAL_IncTick+0x24>)
 80011ae:	6013      	str	r3, [r2, #0]
}
 80011b0:	bf00      	nop
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr
 80011ba:	bf00      	nop
 80011bc:	20000008 	.word	0x20000008
 80011c0:	20000424 	.word	0x20000424

080011c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
  return uwTick;
 80011c8:	4b03      	ldr	r3, [pc, #12]	; (80011d8 <HAL_GetTick+0x14>)
 80011ca:	681b      	ldr	r3, [r3, #0]
}
 80011cc:	4618      	mov	r0, r3
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr
 80011d6:	bf00      	nop
 80011d8:	20000424 	.word	0x20000424

080011dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b084      	sub	sp, #16
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011e4:	f7ff ffee 	bl	80011c4 <HAL_GetTick>
 80011e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011f4:	d005      	beq.n	8001202 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80011f6:	4b0a      	ldr	r3, [pc, #40]	; (8001220 <HAL_Delay+0x44>)
 80011f8:	781b      	ldrb	r3, [r3, #0]
 80011fa:	461a      	mov	r2, r3
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	4413      	add	r3, r2
 8001200:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001202:	bf00      	nop
 8001204:	f7ff ffde 	bl	80011c4 <HAL_GetTick>
 8001208:	4602      	mov	r2, r0
 800120a:	68bb      	ldr	r3, [r7, #8]
 800120c:	1ad3      	subs	r3, r2, r3
 800120e:	68fa      	ldr	r2, [r7, #12]
 8001210:	429a      	cmp	r2, r3
 8001212:	d8f7      	bhi.n	8001204 <HAL_Delay+0x28>
  {
  }
}
 8001214:	bf00      	nop
 8001216:	bf00      	nop
 8001218:	3710      	adds	r7, #16
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	20000008 	.word	0x20000008

08001224 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8001228:	4b05      	ldr	r3, [pc, #20]	; (8001240 <HAL_SuspendTick+0x1c>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4a04      	ldr	r2, [pc, #16]	; (8001240 <HAL_SuspendTick+0x1c>)
 800122e:	f023 0302 	bic.w	r3, r3, #2
 8001232:	6013      	str	r3, [r2, #0]
}
 8001234:	bf00      	nop
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr
 800123e:	bf00      	nop
 8001240:	e000e010 	.word	0xe000e010

08001244 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8001248:	4b05      	ldr	r3, [pc, #20]	; (8001260 <HAL_ResumeTick+0x1c>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4a04      	ldr	r2, [pc, #16]	; (8001260 <HAL_ResumeTick+0x1c>)
 800124e:	f043 0302 	orr.w	r3, r3, #2
 8001252:	6013      	str	r3, [r2, #0]
}
 8001254:	bf00      	nop
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr
 800125e:	bf00      	nop
 8001260:	e000e010 	.word	0xe000e010

08001264 <__NVIC_SetPriorityGrouping>:
{
 8001264:	b480      	push	{r7}
 8001266:	b085      	sub	sp, #20
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	f003 0307 	and.w	r3, r3, #7
 8001272:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001274:	4b0c      	ldr	r3, [pc, #48]	; (80012a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001276:	68db      	ldr	r3, [r3, #12]
 8001278:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800127a:	68ba      	ldr	r2, [r7, #8]
 800127c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001280:	4013      	ands	r3, r2
 8001282:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001288:	68bb      	ldr	r3, [r7, #8]
 800128a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800128c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001290:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001294:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001296:	4a04      	ldr	r2, [pc, #16]	; (80012a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001298:	68bb      	ldr	r3, [r7, #8]
 800129a:	60d3      	str	r3, [r2, #12]
}
 800129c:	bf00      	nop
 800129e:	3714      	adds	r7, #20
 80012a0:	46bd      	mov	sp, r7
 80012a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a6:	4770      	bx	lr
 80012a8:	e000ed00 	.word	0xe000ed00

080012ac <__NVIC_GetPriorityGrouping>:
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012b0:	4b04      	ldr	r3, [pc, #16]	; (80012c4 <__NVIC_GetPriorityGrouping+0x18>)
 80012b2:	68db      	ldr	r3, [r3, #12]
 80012b4:	0a1b      	lsrs	r3, r3, #8
 80012b6:	f003 0307 	and.w	r3, r3, #7
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	46bd      	mov	sp, r7
 80012be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c2:	4770      	bx	lr
 80012c4:	e000ed00 	.word	0xe000ed00

080012c8 <__NVIC_EnableIRQ>:
{
 80012c8:	b480      	push	{r7}
 80012ca:	b083      	sub	sp, #12
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	4603      	mov	r3, r0
 80012d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	db0b      	blt.n	80012f2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012da:	79fb      	ldrb	r3, [r7, #7]
 80012dc:	f003 021f 	and.w	r2, r3, #31
 80012e0:	4907      	ldr	r1, [pc, #28]	; (8001300 <__NVIC_EnableIRQ+0x38>)
 80012e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012e6:	095b      	lsrs	r3, r3, #5
 80012e8:	2001      	movs	r0, #1
 80012ea:	fa00 f202 	lsl.w	r2, r0, r2
 80012ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80012f2:	bf00      	nop
 80012f4:	370c      	adds	r7, #12
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr
 80012fe:	bf00      	nop
 8001300:	e000e100 	.word	0xe000e100

08001304 <__NVIC_SetPriority>:
{
 8001304:	b480      	push	{r7}
 8001306:	b083      	sub	sp, #12
 8001308:	af00      	add	r7, sp, #0
 800130a:	4603      	mov	r3, r0
 800130c:	6039      	str	r1, [r7, #0]
 800130e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001310:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001314:	2b00      	cmp	r3, #0
 8001316:	db0a      	blt.n	800132e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	b2da      	uxtb	r2, r3
 800131c:	490c      	ldr	r1, [pc, #48]	; (8001350 <__NVIC_SetPriority+0x4c>)
 800131e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001322:	0112      	lsls	r2, r2, #4
 8001324:	b2d2      	uxtb	r2, r2
 8001326:	440b      	add	r3, r1
 8001328:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800132c:	e00a      	b.n	8001344 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	b2da      	uxtb	r2, r3
 8001332:	4908      	ldr	r1, [pc, #32]	; (8001354 <__NVIC_SetPriority+0x50>)
 8001334:	79fb      	ldrb	r3, [r7, #7]
 8001336:	f003 030f 	and.w	r3, r3, #15
 800133a:	3b04      	subs	r3, #4
 800133c:	0112      	lsls	r2, r2, #4
 800133e:	b2d2      	uxtb	r2, r2
 8001340:	440b      	add	r3, r1
 8001342:	761a      	strb	r2, [r3, #24]
}
 8001344:	bf00      	nop
 8001346:	370c      	adds	r7, #12
 8001348:	46bd      	mov	sp, r7
 800134a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134e:	4770      	bx	lr
 8001350:	e000e100 	.word	0xe000e100
 8001354:	e000ed00 	.word	0xe000ed00

08001358 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001358:	b480      	push	{r7}
 800135a:	b089      	sub	sp, #36	; 0x24
 800135c:	af00      	add	r7, sp, #0
 800135e:	60f8      	str	r0, [r7, #12]
 8001360:	60b9      	str	r1, [r7, #8]
 8001362:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	f003 0307 	and.w	r3, r3, #7
 800136a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800136c:	69fb      	ldr	r3, [r7, #28]
 800136e:	f1c3 0307 	rsb	r3, r3, #7
 8001372:	2b04      	cmp	r3, #4
 8001374:	bf28      	it	cs
 8001376:	2304      	movcs	r3, #4
 8001378:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800137a:	69fb      	ldr	r3, [r7, #28]
 800137c:	3304      	adds	r3, #4
 800137e:	2b06      	cmp	r3, #6
 8001380:	d902      	bls.n	8001388 <NVIC_EncodePriority+0x30>
 8001382:	69fb      	ldr	r3, [r7, #28]
 8001384:	3b03      	subs	r3, #3
 8001386:	e000      	b.n	800138a <NVIC_EncodePriority+0x32>
 8001388:	2300      	movs	r3, #0
 800138a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800138c:	f04f 32ff 	mov.w	r2, #4294967295
 8001390:	69bb      	ldr	r3, [r7, #24]
 8001392:	fa02 f303 	lsl.w	r3, r2, r3
 8001396:	43da      	mvns	r2, r3
 8001398:	68bb      	ldr	r3, [r7, #8]
 800139a:	401a      	ands	r2, r3
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013a0:	f04f 31ff 	mov.w	r1, #4294967295
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	fa01 f303 	lsl.w	r3, r1, r3
 80013aa:	43d9      	mvns	r1, r3
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013b0:	4313      	orrs	r3, r2
         );
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	3724      	adds	r7, #36	; 0x24
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr
	...

080013c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	3b01      	subs	r3, #1
 80013cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013d0:	d301      	bcc.n	80013d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013d2:	2301      	movs	r3, #1
 80013d4:	e00f      	b.n	80013f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013d6:	4a0a      	ldr	r2, [pc, #40]	; (8001400 <SysTick_Config+0x40>)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	3b01      	subs	r3, #1
 80013dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013de:	210f      	movs	r1, #15
 80013e0:	f04f 30ff 	mov.w	r0, #4294967295
 80013e4:	f7ff ff8e 	bl	8001304 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013e8:	4b05      	ldr	r3, [pc, #20]	; (8001400 <SysTick_Config+0x40>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013ee:	4b04      	ldr	r3, [pc, #16]	; (8001400 <SysTick_Config+0x40>)
 80013f0:	2207      	movs	r2, #7
 80013f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013f4:	2300      	movs	r3, #0
}
 80013f6:	4618      	mov	r0, r3
 80013f8:	3708      	adds	r7, #8
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	e000e010 	.word	0xe000e010

08001404 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800140c:	6878      	ldr	r0, [r7, #4]
 800140e:	f7ff ff29 	bl	8001264 <__NVIC_SetPriorityGrouping>
}
 8001412:	bf00      	nop
 8001414:	3708      	adds	r7, #8
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}

0800141a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800141a:	b580      	push	{r7, lr}
 800141c:	b086      	sub	sp, #24
 800141e:	af00      	add	r7, sp, #0
 8001420:	4603      	mov	r3, r0
 8001422:	60b9      	str	r1, [r7, #8]
 8001424:	607a      	str	r2, [r7, #4]
 8001426:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001428:	2300      	movs	r3, #0
 800142a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800142c:	f7ff ff3e 	bl	80012ac <__NVIC_GetPriorityGrouping>
 8001430:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001432:	687a      	ldr	r2, [r7, #4]
 8001434:	68b9      	ldr	r1, [r7, #8]
 8001436:	6978      	ldr	r0, [r7, #20]
 8001438:	f7ff ff8e 	bl	8001358 <NVIC_EncodePriority>
 800143c:	4602      	mov	r2, r0
 800143e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001442:	4611      	mov	r1, r2
 8001444:	4618      	mov	r0, r3
 8001446:	f7ff ff5d 	bl	8001304 <__NVIC_SetPriority>
}
 800144a:	bf00      	nop
 800144c:	3718      	adds	r7, #24
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}

08001452 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001452:	b580      	push	{r7, lr}
 8001454:	b082      	sub	sp, #8
 8001456:	af00      	add	r7, sp, #0
 8001458:	4603      	mov	r3, r0
 800145a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800145c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001460:	4618      	mov	r0, r3
 8001462:	f7ff ff31 	bl	80012c8 <__NVIC_EnableIRQ>
}
 8001466:	bf00      	nop
 8001468:	3708      	adds	r7, #8
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}

0800146e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800146e:	b580      	push	{r7, lr}
 8001470:	b082      	sub	sp, #8
 8001472:	af00      	add	r7, sp, #0
 8001474:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001476:	6878      	ldr	r0, [r7, #4]
 8001478:	f7ff ffa2 	bl	80013c0 <SysTick_Config>
 800147c:	4603      	mov	r3, r0
}
 800147e:	4618      	mov	r0, r3
 8001480:	3708      	adds	r7, #8
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
	...

08001488 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b086      	sub	sp, #24
 800148c:	af00      	add	r7, sp, #0
 800148e:	60f8      	str	r0, [r7, #12]
 8001490:	60b9      	str	r1, [r7, #8]
 8001492:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 8001496:	2300      	movs	r3, #0
 8001498:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800149a:	4b2f      	ldr	r3, [pc, #188]	; (8001558 <HAL_FLASH_Program+0xd0>)
 800149c:	781b      	ldrb	r3, [r3, #0]
 800149e:	2b01      	cmp	r3, #1
 80014a0:	d101      	bne.n	80014a6 <HAL_FLASH_Program+0x1e>
 80014a2:	2302      	movs	r3, #2
 80014a4:	e053      	b.n	800154e <HAL_FLASH_Program+0xc6>
 80014a6:	4b2c      	ldr	r3, [pc, #176]	; (8001558 <HAL_FLASH_Program+0xd0>)
 80014a8:	2201      	movs	r2, #1
 80014aa:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80014ac:	f24c 3050 	movw	r0, #50000	; 0xc350
 80014b0:	f000 f888 	bl	80015c4 <FLASH_WaitForLastOperation>
 80014b4:	4603      	mov	r3, r0
 80014b6:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 80014b8:	7dfb      	ldrb	r3, [r7, #23]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d143      	bne.n	8001546 <HAL_FLASH_Program+0xbe>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80014be:	4b26      	ldr	r3, [pc, #152]	; (8001558 <HAL_FLASH_Program+0xd0>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	605a      	str	r2, [r3, #4]

    /* Deactivate the data cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 80014c4:	4b25      	ldr	r3, [pc, #148]	; (800155c <HAL_FLASH_Program+0xd4>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d009      	beq.n	80014e4 <HAL_FLASH_Program+0x5c>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 80014d0:	4b22      	ldr	r3, [pc, #136]	; (800155c <HAL_FLASH_Program+0xd4>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a21      	ldr	r2, [pc, #132]	; (800155c <HAL_FLASH_Program+0xd4>)
 80014d6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80014da:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 80014dc:	4b1e      	ldr	r3, [pc, #120]	; (8001558 <HAL_FLASH_Program+0xd0>)
 80014de:	2202      	movs	r2, #2
 80014e0:	771a      	strb	r2, [r3, #28]
 80014e2:	e002      	b.n	80014ea <HAL_FLASH_Program+0x62>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 80014e4:	4b1c      	ldr	r3, [pc, #112]	; (8001558 <HAL_FLASH_Program+0xd0>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	771a      	strb	r2, [r3, #28]
    }

    if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d107      	bne.n	8001500 <HAL_FLASH_Program+0x78>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 80014f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80014f4:	68b8      	ldr	r0, [r7, #8]
 80014f6:	f000 f8bd 	bl	8001674 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 80014fa:	2301      	movs	r3, #1
 80014fc:	613b      	str	r3, [r7, #16]
 80014fe:	e010      	b.n	8001522 <HAL_FLASH_Program+0x9a>
    }
    else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	2b01      	cmp	r3, #1
 8001504:	d002      	beq.n	800150c <HAL_FLASH_Program+0x84>
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	2b02      	cmp	r3, #2
 800150a:	d10a      	bne.n	8001522 <HAL_FLASH_Program+0x9a>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	4619      	mov	r1, r3
 8001510:	68b8      	ldr	r0, [r7, #8]
 8001512:	f000 f8d5 	bl	80016c0 <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	2b02      	cmp	r3, #2
 800151a:	d102      	bne.n	8001522 <HAL_FLASH_Program+0x9a>
      {
        prog_bit = FLASH_CR_FSTPG;
 800151c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001520:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001522:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001526:	f000 f84d 	bl	80015c4 <FLASH_WaitForLastOperation>
 800152a:	4603      	mov	r3, r0
 800152c:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 800152e:	693b      	ldr	r3, [r7, #16]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d006      	beq.n	8001542 <HAL_FLASH_Program+0xba>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 8001534:	4b09      	ldr	r3, [pc, #36]	; (800155c <HAL_FLASH_Program+0xd4>)
 8001536:	695a      	ldr	r2, [r3, #20]
 8001538:	693b      	ldr	r3, [r7, #16]
 800153a:	43db      	mvns	r3, r3
 800153c:	4907      	ldr	r1, [pc, #28]	; (800155c <HAL_FLASH_Program+0xd4>)
 800153e:	4013      	ands	r3, r2
 8001540:	614b      	str	r3, [r1, #20]
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8001542:	f000 f9cf 	bl	80018e4 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001546:	4b04      	ldr	r3, [pc, #16]	; (8001558 <HAL_FLASH_Program+0xd0>)
 8001548:	2200      	movs	r2, #0
 800154a:	701a      	strb	r2, [r3, #0]

  return status;
 800154c:	7dfb      	ldrb	r3, [r7, #23]
}
 800154e:	4618      	mov	r0, r3
 8001550:	3718      	adds	r7, #24
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	2000000c 	.word	0x2000000c
 800155c:	40022000 	.word	0x40022000

08001560 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001560:	b480      	push	{r7}
 8001562:	b083      	sub	sp, #12
 8001564:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001566:	2300      	movs	r3, #0
 8001568:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800156a:	4b0b      	ldr	r3, [pc, #44]	; (8001598 <HAL_FLASH_Unlock+0x38>)
 800156c:	695b      	ldr	r3, [r3, #20]
 800156e:	2b00      	cmp	r3, #0
 8001570:	da0b      	bge.n	800158a <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001572:	4b09      	ldr	r3, [pc, #36]	; (8001598 <HAL_FLASH_Unlock+0x38>)
 8001574:	4a09      	ldr	r2, [pc, #36]	; (800159c <HAL_FLASH_Unlock+0x3c>)
 8001576:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001578:	4b07      	ldr	r3, [pc, #28]	; (8001598 <HAL_FLASH_Unlock+0x38>)
 800157a:	4a09      	ldr	r2, [pc, #36]	; (80015a0 <HAL_FLASH_Unlock+0x40>)
 800157c:	609a      	str	r2, [r3, #8]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800157e:	4b06      	ldr	r3, [pc, #24]	; (8001598 <HAL_FLASH_Unlock+0x38>)
 8001580:	695b      	ldr	r3, [r3, #20]
 8001582:	2b00      	cmp	r3, #0
 8001584:	da01      	bge.n	800158a <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8001586:	2301      	movs	r3, #1
 8001588:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800158a:	79fb      	ldrb	r3, [r7, #7]
}
 800158c:	4618      	mov	r0, r3
 800158e:	370c      	adds	r7, #12
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr
 8001598:	40022000 	.word	0x40022000
 800159c:	45670123 	.word	0x45670123
 80015a0:	cdef89ab 	.word	0xcdef89ab

080015a4 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80015a8:	4b05      	ldr	r3, [pc, #20]	; (80015c0 <HAL_FLASH_Lock+0x1c>)
 80015aa:	695b      	ldr	r3, [r3, #20]
 80015ac:	4a04      	ldr	r2, [pc, #16]	; (80015c0 <HAL_FLASH_Lock+0x1c>)
 80015ae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80015b2:	6153      	str	r3, [r2, #20]

  return HAL_OK;
 80015b4:	2300      	movs	r3, #0
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	46bd      	mov	sp, r7
 80015ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015be:	4770      	bx	lr
 80015c0:	40022000 	.word	0x40022000

080015c4 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b084      	sub	sp, #16
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 80015cc:	f7ff fdfa 	bl	80011c4 <HAL_GetTick>
 80015d0:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80015d2:	e00d      	b.n	80015f0 <FLASH_WaitForLastOperation+0x2c>
  {
    if(Timeout != HAL_MAX_DELAY)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015da:	d009      	beq.n	80015f0 <FLASH_WaitForLastOperation+0x2c>
    {
      if((HAL_GetTick() - tickstart) >= Timeout)
 80015dc:	f7ff fdf2 	bl	80011c4 <HAL_GetTick>
 80015e0:	4602      	mov	r2, r0
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	1ad3      	subs	r3, r2, r3
 80015e6:	687a      	ldr	r2, [r7, #4]
 80015e8:	429a      	cmp	r2, r3
 80015ea:	d801      	bhi.n	80015f0 <FLASH_WaitForLastOperation+0x2c>
      {
        return HAL_TIMEOUT;
 80015ec:	2303      	movs	r3, #3
 80015ee:	e036      	b.n	800165e <FLASH_WaitForLastOperation+0x9a>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80015f0:	4b1d      	ldr	r3, [pc, #116]	; (8001668 <FLASH_WaitForLastOperation+0xa4>)
 80015f2:	691b      	ldr	r3, [r3, #16]
 80015f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d1eb      	bne.n	80015d4 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }

  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 80015fc:	4b1a      	ldr	r3, [pc, #104]	; (8001668 <FLASH_WaitForLastOperation+0xa4>)
 80015fe:	691a      	ldr	r2, [r3, #16]
 8001600:	4b1a      	ldr	r3, [pc, #104]	; (800166c <FLASH_WaitForLastOperation+0xa8>)
 8001602:	4013      	ands	r3, r2
 8001604:	60bb      	str	r3, [r7, #8]

  if(error != 0u)
 8001606:	68bb      	ldr	r3, [r7, #8]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d01e      	beq.n	800164a <FLASH_WaitForLastOperation+0x86>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 800160c:	4b18      	ldr	r3, [pc, #96]	; (8001670 <FLASH_WaitForLastOperation+0xac>)
 800160e:	685a      	ldr	r2, [r3, #4]
 8001610:	68bb      	ldr	r3, [r7, #8]
 8001612:	4313      	orrs	r3, r2
 8001614:	4a16      	ldr	r2, [pc, #88]	; (8001670 <FLASH_WaitForLastOperation+0xac>)
 8001616:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 8001618:	68bb      	ldr	r3, [r7, #8]
 800161a:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800161e:	2b00      	cmp	r3, #0
 8001620:	d007      	beq.n	8001632 <FLASH_WaitForLastOperation+0x6e>
 8001622:	4b11      	ldr	r3, [pc, #68]	; (8001668 <FLASH_WaitForLastOperation+0xa4>)
 8001624:	699a      	ldr	r2, [r3, #24]
 8001626:	68bb      	ldr	r3, [r7, #8]
 8001628:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800162c:	490e      	ldr	r1, [pc, #56]	; (8001668 <FLASH_WaitForLastOperation+0xa4>)
 800162e:	4313      	orrs	r3, r2
 8001630:	618b      	str	r3, [r1, #24]
 8001632:	68bb      	ldr	r3, [r7, #8]
 8001634:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8001638:	2b00      	cmp	r3, #0
 800163a:	d004      	beq.n	8001646 <FLASH_WaitForLastOperation+0x82>
 800163c:	4a0a      	ldr	r2, [pc, #40]	; (8001668 <FLASH_WaitForLastOperation+0xa4>)
 800163e:	68bb      	ldr	r3, [r7, #8]
 8001640:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8001644:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 8001646:	2301      	movs	r3, #1
 8001648:	e009      	b.n	800165e <FLASH_WaitForLastOperation+0x9a>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800164a:	4b07      	ldr	r3, [pc, #28]	; (8001668 <FLASH_WaitForLastOperation+0xa4>)
 800164c:	691b      	ldr	r3, [r3, #16]
 800164e:	f003 0301 	and.w	r3, r3, #1
 8001652:	2b00      	cmp	r3, #0
 8001654:	d002      	beq.n	800165c <FLASH_WaitForLastOperation+0x98>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001656:	4b04      	ldr	r3, [pc, #16]	; (8001668 <FLASH_WaitForLastOperation+0xa4>)
 8001658:	2201      	movs	r2, #1
 800165a:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 800165c:	2300      	movs	r3, #0
}
 800165e:	4618      	mov	r0, r3
 8001660:	3710      	adds	r7, #16
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	40022000 	.word	0x40022000
 800166c:	0002c3fa 	.word	0x0002c3fa
 8001670:	2000000c 	.word	0x2000000c

08001674 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8001674:	b480      	push	{r7}
 8001676:	b085      	sub	sp, #20
 8001678:	af00      	add	r7, sp, #0
 800167a:	60f8      	str	r0, [r7, #12]
 800167c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8001680:	4b0e      	ldr	r3, [pc, #56]	; (80016bc <FLASH_Program_DoubleWord+0x48>)
 8001682:	695b      	ldr	r3, [r3, #20]
 8001684:	4a0d      	ldr	r2, [pc, #52]	; (80016bc <FLASH_Program_DoubleWord+0x48>)
 8001686:	f043 0301 	orr.w	r3, r3, #1
 800168a:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	683a      	ldr	r2, [r7, #0]
 8001690:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8001692:	f3bf 8f6f 	isb	sy
}
 8001696:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4U) = (uint32_t)(Data >> 32);
 8001698:	e9d7 0100 	ldrd	r0, r1, [r7]
 800169c:	f04f 0200 	mov.w	r2, #0
 80016a0:	f04f 0300 	mov.w	r3, #0
 80016a4:	000a      	movs	r2, r1
 80016a6:	2300      	movs	r3, #0
 80016a8:	68f9      	ldr	r1, [r7, #12]
 80016aa:	3104      	adds	r1, #4
 80016ac:	4613      	mov	r3, r2
 80016ae:	600b      	str	r3, [r1, #0]
}
 80016b0:	bf00      	nop
 80016b2:	3714      	adds	r7, #20
 80016b4:	46bd      	mov	sp, r7
 80016b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ba:	4770      	bx	lr
 80016bc:	40022000 	.word	0x40022000

080016c0 <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b089      	sub	sp, #36	; 0x24
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
 80016c8:	6039      	str	r1, [r7, #0]
  uint32_t primask_bit;
  uint8_t row_index = (2*FLASH_NB_DOUBLE_WORDS_IN_ROW);
 80016ca:	2340      	movs	r3, #64	; 0x40
 80016cc:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t*)Address;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 80016d6:	4b14      	ldr	r3, [pc, #80]	; (8001728 <FLASH_Program_Fast+0x68>)
 80016d8:	695b      	ldr	r3, [r3, #20]
 80016da:	4a13      	ldr	r2, [pc, #76]	; (8001728 <FLASH_Program_Fast+0x68>)
 80016dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016e0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80016e2:	f3ef 8310 	mrs	r3, PRIMASK
 80016e6:	60fb      	str	r3, [r7, #12]
  return(result);
 80016e8:	68fb      	ldr	r3, [r7, #12]

  /* Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 80016ea:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80016ec:	b672      	cpsid	i
}
 80016ee:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	681a      	ldr	r2, [r3, #0]
 80016f4:	69bb      	ldr	r3, [r7, #24]
 80016f6:	601a      	str	r2, [r3, #0]
    dest_addr++;
 80016f8:	69bb      	ldr	r3, [r7, #24]
 80016fa:	3304      	adds	r3, #4
 80016fc:	61bb      	str	r3, [r7, #24]
    src_addr++;
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	3304      	adds	r3, #4
 8001702:	617b      	str	r3, [r7, #20]
    row_index--;
 8001704:	7ffb      	ldrb	r3, [r7, #31]
 8001706:	3b01      	subs	r3, #1
 8001708:	77fb      	strb	r3, [r7, #31]
  } while (row_index != 0U);
 800170a:	7ffb      	ldrb	r3, [r7, #31]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d1ef      	bne.n	80016f0 <FLASH_Program_Fast+0x30>
 8001710:	693b      	ldr	r3, [r7, #16]
 8001712:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001714:	68bb      	ldr	r3, [r7, #8]
 8001716:	f383 8810 	msr	PRIMASK, r3
}
 800171a:	bf00      	nop

  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);
}
 800171c:	bf00      	nop
 800171e:	3724      	adds	r7, #36	; 0x24
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr
 8001728:	40022000 	.word	0x40022000

0800172c <HAL_FLASHEx_Erase>:
  *         the pages have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b084      	sub	sp, #16
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
 8001734:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t page_index;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001736:	4b48      	ldr	r3, [pc, #288]	; (8001858 <HAL_FLASHEx_Erase+0x12c>)
 8001738:	781b      	ldrb	r3, [r3, #0]
 800173a:	2b01      	cmp	r3, #1
 800173c:	d101      	bne.n	8001742 <HAL_FLASHEx_Erase+0x16>
 800173e:	2302      	movs	r3, #2
 8001740:	e085      	b.n	800184e <HAL_FLASHEx_Erase+0x122>
 8001742:	4b45      	ldr	r3, [pc, #276]	; (8001858 <HAL_FLASHEx_Erase+0x12c>)
 8001744:	2201      	movs	r2, #1
 8001746:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001748:	f24c 3050 	movw	r0, #50000	; 0xc350
 800174c:	f7ff ff3a 	bl	80015c4 <FLASH_WaitForLastOperation>
 8001750:	4603      	mov	r3, r0
 8001752:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8001754:	7bfb      	ldrb	r3, [r7, #15]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d175      	bne.n	8001846 <HAL_FLASHEx_Erase+0x11a>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800175a:	4b3f      	ldr	r3, [pc, #252]	; (8001858 <HAL_FLASHEx_Erase+0x12c>)
 800175c:	2200      	movs	r2, #0
 800175e:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8001760:	4b3e      	ldr	r3, [pc, #248]	; (800185c <HAL_FLASHEx_Erase+0x130>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001768:	2b00      	cmp	r3, #0
 800176a:	d013      	beq.n	8001794 <HAL_FLASHEx_Erase+0x68>
    {
      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 800176c:	4b3b      	ldr	r3, [pc, #236]	; (800185c <HAL_FLASHEx_Erase+0x130>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001774:	2b00      	cmp	r3, #0
 8001776:	d009      	beq.n	800178c <HAL_FLASHEx_Erase+0x60>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 8001778:	4b38      	ldr	r3, [pc, #224]	; (800185c <HAL_FLASHEx_Erase+0x130>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a37      	ldr	r2, [pc, #220]	; (800185c <HAL_FLASHEx_Erase+0x130>)
 800177e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001782:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 8001784:	4b34      	ldr	r3, [pc, #208]	; (8001858 <HAL_FLASHEx_Erase+0x12c>)
 8001786:	2203      	movs	r2, #3
 8001788:	771a      	strb	r2, [r3, #28]
 800178a:	e016      	b.n	80017ba <HAL_FLASHEx_Erase+0x8e>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 800178c:	4b32      	ldr	r3, [pc, #200]	; (8001858 <HAL_FLASHEx_Erase+0x12c>)
 800178e:	2201      	movs	r2, #1
 8001790:	771a      	strb	r2, [r3, #28]
 8001792:	e012      	b.n	80017ba <HAL_FLASHEx_Erase+0x8e>
      }
    }
    else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8001794:	4b31      	ldr	r3, [pc, #196]	; (800185c <HAL_FLASHEx_Erase+0x130>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800179c:	2b00      	cmp	r3, #0
 800179e:	d009      	beq.n	80017b4 <HAL_FLASHEx_Erase+0x88>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 80017a0:	4b2e      	ldr	r3, [pc, #184]	; (800185c <HAL_FLASHEx_Erase+0x130>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a2d      	ldr	r2, [pc, #180]	; (800185c <HAL_FLASHEx_Erase+0x130>)
 80017a6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80017aa:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 80017ac:	4b2a      	ldr	r3, [pc, #168]	; (8001858 <HAL_FLASHEx_Erase+0x12c>)
 80017ae:	2202      	movs	r2, #2
 80017b0:	771a      	strb	r2, [r3, #28]
 80017b2:	e002      	b.n	80017ba <HAL_FLASHEx_Erase+0x8e>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 80017b4:	4b28      	ldr	r3, [pc, #160]	; (8001858 <HAL_FLASHEx_Erase+0x12c>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	2b01      	cmp	r3, #1
 80017c0:	d111      	bne.n	80017e6 <HAL_FLASHEx_Erase+0xba>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	4618      	mov	r0, r3
 80017c8:	f000 f84a 	bl	8001860 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80017cc:	f24c 3050 	movw	r0, #50000	; 0xc350
 80017d0:	f7ff fef8 	bl	80015c4 <FLASH_WaitForLastOperation>
 80017d4:	4603      	mov	r3, r0
 80017d6:	73fb      	strb	r3, [r7, #15]
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
#else
      /* If the erase operation is completed, disable the MER1 Bit */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1));
 80017d8:	4b20      	ldr	r3, [pc, #128]	; (800185c <HAL_FLASHEx_Erase+0x130>)
 80017da:	695b      	ldr	r3, [r3, #20]
 80017dc:	4a1f      	ldr	r2, [pc, #124]	; (800185c <HAL_FLASHEx_Erase+0x130>)
 80017de:	f023 0304 	bic.w	r3, r3, #4
 80017e2:	6153      	str	r3, [r2, #20]
 80017e4:	e02d      	b.n	8001842 <HAL_FLASHEx_Erase+0x116>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	f04f 32ff 	mov.w	r2, #4294967295
 80017ec:	601a      	str	r2, [r3, #0]

      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	689b      	ldr	r3, [r3, #8]
 80017f2:	60bb      	str	r3, [r7, #8]
 80017f4:	e01d      	b.n	8001832 <HAL_FLASHEx_Erase+0x106>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	4619      	mov	r1, r3
 80017fc:	68b8      	ldr	r0, [r7, #8]
 80017fe:	f000 f84d 	bl	800189c <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001802:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001806:	f7ff fedd 	bl	80015c4 <FLASH_WaitForLastOperation>
 800180a:	4603      	mov	r3, r0
 800180c:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 800180e:	4b13      	ldr	r3, [pc, #76]	; (800185c <HAL_FLASHEx_Erase+0x130>)
 8001810:	695b      	ldr	r3, [r3, #20]
 8001812:	4a12      	ldr	r2, [pc, #72]	; (800185c <HAL_FLASHEx_Erase+0x130>)
 8001814:	f423 737e 	bic.w	r3, r3, #1016	; 0x3f8
 8001818:	f023 0302 	bic.w	r3, r3, #2
 800181c:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 800181e:	7bfb      	ldrb	r3, [r7, #15]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d003      	beq.n	800182c <HAL_FLASHEx_Erase+0x100>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = page_index;
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	68ba      	ldr	r2, [r7, #8]
 8001828:	601a      	str	r2, [r3, #0]
          break;
 800182a:	e00a      	b.n	8001842 <HAL_FLASHEx_Erase+0x116>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 800182c:	68bb      	ldr	r3, [r7, #8]
 800182e:	3301      	adds	r3, #1
 8001830:	60bb      	str	r3, [r7, #8]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	689a      	ldr	r2, [r3, #8]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	68db      	ldr	r3, [r3, #12]
 800183a:	4413      	add	r3, r2
 800183c:	68ba      	ldr	r2, [r7, #8]
 800183e:	429a      	cmp	r2, r3
 8001840:	d3d9      	bcc.n	80017f6 <HAL_FLASHEx_Erase+0xca>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8001842:	f000 f84f 	bl	80018e4 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001846:	4b04      	ldr	r3, [pc, #16]	; (8001858 <HAL_FLASHEx_Erase+0x12c>)
 8001848:	2200      	movs	r2, #0
 800184a:	701a      	strb	r2, [r3, #0]

  return status;
 800184c:	7bfb      	ldrb	r3, [r7, #15]
}
 800184e:	4618      	mov	r0, r3
 8001850:	3710      	adds	r7, #16
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	2000000c 	.word	0x2000000c
 800185c:	40022000 	.word	0x40022000

08001860 <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8001860:	b480      	push	{r7}
 8001862:	b083      	sub	sp, #12
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != 0U)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	f003 0301 	and.w	r3, r3, #1
 800186e:	2b00      	cmp	r3, #0
 8001870:	d005      	beq.n	800187e <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 8001872:	4b09      	ldr	r3, [pc, #36]	; (8001898 <FLASH_MassErase+0x38>)
 8001874:	695b      	ldr	r3, [r3, #20]
 8001876:	4a08      	ldr	r2, [pc, #32]	; (8001898 <FLASH_MassErase+0x38>)
 8001878:	f043 0304 	orr.w	r3, r3, #4
 800187c:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800187e:	4b06      	ldr	r3, [pc, #24]	; (8001898 <FLASH_MassErase+0x38>)
 8001880:	695b      	ldr	r3, [r3, #20]
 8001882:	4a05      	ldr	r2, [pc, #20]	; (8001898 <FLASH_MassErase+0x38>)
 8001884:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001888:	6153      	str	r3, [r2, #20]
}
 800188a:	bf00      	nop
 800188c:	370c      	adds	r7, #12
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr
 8001896:	bf00      	nop
 8001898:	40022000 	.word	0x40022000

0800189c <FLASH_PageErase>:
  *            @arg FLASH_BANK_1: Page in bank 1 to be erased
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 800189c:	b480      	push	{r7}
 800189e:	b083      	sub	sp, #12
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
 80018a4:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 80018a6:	4b0e      	ldr	r3, [pc, #56]	; (80018e0 <FLASH_PageErase+0x44>)
 80018a8:	695b      	ldr	r3, [r3, #20]
 80018aa:	f423 727e 	bic.w	r2, r3, #1016	; 0x3f8
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	00db      	lsls	r3, r3, #3
 80018b2:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 80018b6:	490a      	ldr	r1, [pc, #40]	; (80018e0 <FLASH_PageErase+0x44>)
 80018b8:	4313      	orrs	r3, r2
 80018ba:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 80018bc:	4b08      	ldr	r3, [pc, #32]	; (80018e0 <FLASH_PageErase+0x44>)
 80018be:	695b      	ldr	r3, [r3, #20]
 80018c0:	4a07      	ldr	r2, [pc, #28]	; (80018e0 <FLASH_PageErase+0x44>)
 80018c2:	f043 0302 	orr.w	r3, r3, #2
 80018c6:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80018c8:	4b05      	ldr	r3, [pc, #20]	; (80018e0 <FLASH_PageErase+0x44>)
 80018ca:	695b      	ldr	r3, [r3, #20]
 80018cc:	4a04      	ldr	r2, [pc, #16]	; (80018e0 <FLASH_PageErase+0x44>)
 80018ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018d2:	6153      	str	r3, [r2, #20]
}
 80018d4:	bf00      	nop
 80018d6:	370c      	adds	r7, #12
 80018d8:	46bd      	mov	sp, r7
 80018da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018de:	4770      	bx	lr
 80018e0:	40022000 	.word	0x40022000

080018e4 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b083      	sub	sp, #12
 80018e8:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 80018ea:	4b21      	ldr	r3, [pc, #132]	; (8001970 <FLASH_FlushCaches+0x8c>)
 80018ec:	7f1b      	ldrb	r3, [r3, #28]
 80018ee:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 80018f0:	79fb      	ldrb	r3, [r7, #7]
 80018f2:	2b01      	cmp	r3, #1
 80018f4:	d002      	beq.n	80018fc <FLASH_FlushCaches+0x18>
 80018f6:	79fb      	ldrb	r3, [r7, #7]
 80018f8:	2b03      	cmp	r3, #3
 80018fa:	d117      	bne.n	800192c <FLASH_FlushCaches+0x48>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80018fc:	4b1d      	ldr	r3, [pc, #116]	; (8001974 <FLASH_FlushCaches+0x90>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a1c      	ldr	r2, [pc, #112]	; (8001974 <FLASH_FlushCaches+0x90>)
 8001902:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001906:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8001908:	4b1a      	ldr	r3, [pc, #104]	; (8001974 <FLASH_FlushCaches+0x90>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4a19      	ldr	r2, [pc, #100]	; (8001974 <FLASH_FlushCaches+0x90>)
 800190e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001912:	6013      	str	r3, [r2, #0]
 8001914:	4b17      	ldr	r3, [pc, #92]	; (8001974 <FLASH_FlushCaches+0x90>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a16      	ldr	r2, [pc, #88]	; (8001974 <FLASH_FlushCaches+0x90>)
 800191a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800191e:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001920:	4b14      	ldr	r3, [pc, #80]	; (8001974 <FLASH_FlushCaches+0x90>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a13      	ldr	r2, [pc, #76]	; (8001974 <FLASH_FlushCaches+0x90>)
 8001926:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800192a:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 800192c:	79fb      	ldrb	r3, [r7, #7]
 800192e:	2b02      	cmp	r3, #2
 8001930:	d002      	beq.n	8001938 <FLASH_FlushCaches+0x54>
 8001932:	79fb      	ldrb	r3, [r7, #7]
 8001934:	2b03      	cmp	r3, #3
 8001936:	d111      	bne.n	800195c <FLASH_FlushCaches+0x78>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8001938:	4b0e      	ldr	r3, [pc, #56]	; (8001974 <FLASH_FlushCaches+0x90>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a0d      	ldr	r2, [pc, #52]	; (8001974 <FLASH_FlushCaches+0x90>)
 800193e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001942:	6013      	str	r3, [r2, #0]
 8001944:	4b0b      	ldr	r3, [pc, #44]	; (8001974 <FLASH_FlushCaches+0x90>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a0a      	ldr	r2, [pc, #40]	; (8001974 <FLASH_FlushCaches+0x90>)
 800194a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800194e:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8001950:	4b08      	ldr	r3, [pc, #32]	; (8001974 <FLASH_FlushCaches+0x90>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a07      	ldr	r2, [pc, #28]	; (8001974 <FLASH_FlushCaches+0x90>)
 8001956:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800195a:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 800195c:	4b04      	ldr	r3, [pc, #16]	; (8001970 <FLASH_FlushCaches+0x8c>)
 800195e:	2200      	movs	r2, #0
 8001960:	771a      	strb	r2, [r3, #28]
}
 8001962:	bf00      	nop
 8001964:	370c      	adds	r7, #12
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr
 800196e:	bf00      	nop
 8001970:	2000000c 	.word	0x2000000c
 8001974:	40022000 	.word	0x40022000

08001978 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001978:	b480      	push	{r7}
 800197a:	b087      	sub	sp, #28
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
 8001980:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001982:	2300      	movs	r3, #0
 8001984:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001986:	e148      	b.n	8001c1a <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	681a      	ldr	r2, [r3, #0]
 800198c:	2101      	movs	r1, #1
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	fa01 f303 	lsl.w	r3, r1, r3
 8001994:	4013      	ands	r3, r2
 8001996:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	2b00      	cmp	r3, #0
 800199c:	f000 813a 	beq.w	8001c14 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	f003 0303 	and.w	r3, r3, #3
 80019a8:	2b01      	cmp	r3, #1
 80019aa:	d005      	beq.n	80019b8 <HAL_GPIO_Init+0x40>
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	f003 0303 	and.w	r3, r3, #3
 80019b4:	2b02      	cmp	r3, #2
 80019b6:	d130      	bne.n	8001a1a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	689b      	ldr	r3, [r3, #8]
 80019bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80019be:	697b      	ldr	r3, [r7, #20]
 80019c0:	005b      	lsls	r3, r3, #1
 80019c2:	2203      	movs	r2, #3
 80019c4:	fa02 f303 	lsl.w	r3, r2, r3
 80019c8:	43db      	mvns	r3, r3
 80019ca:	693a      	ldr	r2, [r7, #16]
 80019cc:	4013      	ands	r3, r2
 80019ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	68da      	ldr	r2, [r3, #12]
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	005b      	lsls	r3, r3, #1
 80019d8:	fa02 f303 	lsl.w	r3, r2, r3
 80019dc:	693a      	ldr	r2, [r7, #16]
 80019de:	4313      	orrs	r3, r2
 80019e0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	693a      	ldr	r2, [r7, #16]
 80019e6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80019ee:	2201      	movs	r2, #1
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	fa02 f303 	lsl.w	r3, r2, r3
 80019f6:	43db      	mvns	r3, r3
 80019f8:	693a      	ldr	r2, [r7, #16]
 80019fa:	4013      	ands	r3, r2
 80019fc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	091b      	lsrs	r3, r3, #4
 8001a04:	f003 0201 	and.w	r2, r3, #1
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0e:	693a      	ldr	r2, [r7, #16]
 8001a10:	4313      	orrs	r3, r2
 8001a12:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	693a      	ldr	r2, [r7, #16]
 8001a18:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	f003 0303 	and.w	r3, r3, #3
 8001a22:	2b03      	cmp	r3, #3
 8001a24:	d017      	beq.n	8001a56 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	68db      	ldr	r3, [r3, #12]
 8001a2a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	005b      	lsls	r3, r3, #1
 8001a30:	2203      	movs	r2, #3
 8001a32:	fa02 f303 	lsl.w	r3, r2, r3
 8001a36:	43db      	mvns	r3, r3
 8001a38:	693a      	ldr	r2, [r7, #16]
 8001a3a:	4013      	ands	r3, r2
 8001a3c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	689a      	ldr	r2, [r3, #8]
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	005b      	lsls	r3, r3, #1
 8001a46:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4a:	693a      	ldr	r2, [r7, #16]
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	693a      	ldr	r2, [r7, #16]
 8001a54:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	f003 0303 	and.w	r3, r3, #3
 8001a5e:	2b02      	cmp	r3, #2
 8001a60:	d123      	bne.n	8001aaa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001a62:	697b      	ldr	r3, [r7, #20]
 8001a64:	08da      	lsrs	r2, r3, #3
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	3208      	adds	r2, #8
 8001a6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a6e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	f003 0307 	and.w	r3, r3, #7
 8001a76:	009b      	lsls	r3, r3, #2
 8001a78:	220f      	movs	r2, #15
 8001a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7e:	43db      	mvns	r3, r3
 8001a80:	693a      	ldr	r2, [r7, #16]
 8001a82:	4013      	ands	r3, r2
 8001a84:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	691a      	ldr	r2, [r3, #16]
 8001a8a:	697b      	ldr	r3, [r7, #20]
 8001a8c:	f003 0307 	and.w	r3, r3, #7
 8001a90:	009b      	lsls	r3, r3, #2
 8001a92:	fa02 f303 	lsl.w	r3, r2, r3
 8001a96:	693a      	ldr	r2, [r7, #16]
 8001a98:	4313      	orrs	r3, r2
 8001a9a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	08da      	lsrs	r2, r3, #3
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	3208      	adds	r2, #8
 8001aa4:	6939      	ldr	r1, [r7, #16]
 8001aa6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	005b      	lsls	r3, r3, #1
 8001ab4:	2203      	movs	r2, #3
 8001ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aba:	43db      	mvns	r3, r3
 8001abc:	693a      	ldr	r2, [r7, #16]
 8001abe:	4013      	ands	r3, r2
 8001ac0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	f003 0203 	and.w	r2, r3, #3
 8001aca:	697b      	ldr	r3, [r7, #20]
 8001acc:	005b      	lsls	r3, r3, #1
 8001ace:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad2:	693a      	ldr	r2, [r7, #16]
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	693a      	ldr	r2, [r7, #16]
 8001adc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	f000 8094 	beq.w	8001c14 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aec:	4b52      	ldr	r3, [pc, #328]	; (8001c38 <HAL_GPIO_Init+0x2c0>)
 8001aee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001af0:	4a51      	ldr	r2, [pc, #324]	; (8001c38 <HAL_GPIO_Init+0x2c0>)
 8001af2:	f043 0301 	orr.w	r3, r3, #1
 8001af6:	6613      	str	r3, [r2, #96]	; 0x60
 8001af8:	4b4f      	ldr	r3, [pc, #316]	; (8001c38 <HAL_GPIO_Init+0x2c0>)
 8001afa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001afc:	f003 0301 	and.w	r3, r3, #1
 8001b00:	60bb      	str	r3, [r7, #8]
 8001b02:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001b04:	4a4d      	ldr	r2, [pc, #308]	; (8001c3c <HAL_GPIO_Init+0x2c4>)
 8001b06:	697b      	ldr	r3, [r7, #20]
 8001b08:	089b      	lsrs	r3, r3, #2
 8001b0a:	3302      	adds	r3, #2
 8001b0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b10:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	f003 0303 	and.w	r3, r3, #3
 8001b18:	009b      	lsls	r3, r3, #2
 8001b1a:	220f      	movs	r2, #15
 8001b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b20:	43db      	mvns	r3, r3
 8001b22:	693a      	ldr	r2, [r7, #16]
 8001b24:	4013      	ands	r3, r2
 8001b26:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001b2e:	d00d      	beq.n	8001b4c <HAL_GPIO_Init+0x1d4>
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	4a43      	ldr	r2, [pc, #268]	; (8001c40 <HAL_GPIO_Init+0x2c8>)
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d007      	beq.n	8001b48 <HAL_GPIO_Init+0x1d0>
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	4a42      	ldr	r2, [pc, #264]	; (8001c44 <HAL_GPIO_Init+0x2cc>)
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d101      	bne.n	8001b44 <HAL_GPIO_Init+0x1cc>
 8001b40:	2302      	movs	r3, #2
 8001b42:	e004      	b.n	8001b4e <HAL_GPIO_Init+0x1d6>
 8001b44:	2307      	movs	r3, #7
 8001b46:	e002      	b.n	8001b4e <HAL_GPIO_Init+0x1d6>
 8001b48:	2301      	movs	r3, #1
 8001b4a:	e000      	b.n	8001b4e <HAL_GPIO_Init+0x1d6>
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	697a      	ldr	r2, [r7, #20]
 8001b50:	f002 0203 	and.w	r2, r2, #3
 8001b54:	0092      	lsls	r2, r2, #2
 8001b56:	4093      	lsls	r3, r2
 8001b58:	693a      	ldr	r2, [r7, #16]
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001b5e:	4937      	ldr	r1, [pc, #220]	; (8001c3c <HAL_GPIO_Init+0x2c4>)
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	089b      	lsrs	r3, r3, #2
 8001b64:	3302      	adds	r3, #2
 8001b66:	693a      	ldr	r2, [r7, #16]
 8001b68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001b6c:	4b36      	ldr	r3, [pc, #216]	; (8001c48 <HAL_GPIO_Init+0x2d0>)
 8001b6e:	689b      	ldr	r3, [r3, #8]
 8001b70:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	43db      	mvns	r3, r3
 8001b76:	693a      	ldr	r2, [r7, #16]
 8001b78:	4013      	ands	r3, r2
 8001b7a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d003      	beq.n	8001b90 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001b88:	693a      	ldr	r2, [r7, #16]
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001b90:	4a2d      	ldr	r2, [pc, #180]	; (8001c48 <HAL_GPIO_Init+0x2d0>)
 8001b92:	693b      	ldr	r3, [r7, #16]
 8001b94:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001b96:	4b2c      	ldr	r3, [pc, #176]	; (8001c48 <HAL_GPIO_Init+0x2d0>)
 8001b98:	68db      	ldr	r3, [r3, #12]
 8001b9a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	43db      	mvns	r3, r3
 8001ba0:	693a      	ldr	r2, [r7, #16]
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d003      	beq.n	8001bba <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001bb2:	693a      	ldr	r2, [r7, #16]
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001bba:	4a23      	ldr	r2, [pc, #140]	; (8001c48 <HAL_GPIO_Init+0x2d0>)
 8001bbc:	693b      	ldr	r3, [r7, #16]
 8001bbe:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001bc0:	4b21      	ldr	r3, [pc, #132]	; (8001c48 <HAL_GPIO_Init+0x2d0>)
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	43db      	mvns	r3, r3
 8001bca:	693a      	ldr	r2, [r7, #16]
 8001bcc:	4013      	ands	r3, r2
 8001bce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d003      	beq.n	8001be4 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001bdc:	693a      	ldr	r2, [r7, #16]
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	4313      	orrs	r3, r2
 8001be2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001be4:	4a18      	ldr	r2, [pc, #96]	; (8001c48 <HAL_GPIO_Init+0x2d0>)
 8001be6:	693b      	ldr	r3, [r7, #16]
 8001be8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001bea:	4b17      	ldr	r3, [pc, #92]	; (8001c48 <HAL_GPIO_Init+0x2d0>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	43db      	mvns	r3, r3
 8001bf4:	693a      	ldr	r2, [r7, #16]
 8001bf6:	4013      	ands	r3, r2
 8001bf8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d003      	beq.n	8001c0e <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8001c06:	693a      	ldr	r2, [r7, #16]
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001c0e:	4a0e      	ldr	r2, [pc, #56]	; (8001c48 <HAL_GPIO_Init+0x2d0>)
 8001c10:	693b      	ldr	r3, [r7, #16]
 8001c12:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	3301      	adds	r3, #1
 8001c18:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	681a      	ldr	r2, [r3, #0]
 8001c1e:	697b      	ldr	r3, [r7, #20]
 8001c20:	fa22 f303 	lsr.w	r3, r2, r3
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	f47f aeaf 	bne.w	8001988 <HAL_GPIO_Init+0x10>
  }
}
 8001c2a:	bf00      	nop
 8001c2c:	bf00      	nop
 8001c2e:	371c      	adds	r7, #28
 8001c30:	46bd      	mov	sp, r7
 8001c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c36:	4770      	bx	lr
 8001c38:	40021000 	.word	0x40021000
 8001c3c:	40010000 	.word	0x40010000
 8001c40:	48000400 	.word	0x48000400
 8001c44:	48000800 	.word	0x48000800
 8001c48:	40010400 	.word	0x40010400

08001c4c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b087      	sub	sp, #28
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
 8001c54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c56:	2300      	movs	r3, #0
 8001c58:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8001c5a:	e0ab      	b.n	8001db4 <HAL_GPIO_DeInit+0x168>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	fa02 f303 	lsl.w	r3, r2, r3
 8001c64:	683a      	ldr	r2, [r7, #0]
 8001c66:	4013      	ands	r3, r2
 8001c68:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8001c6a:	693b      	ldr	r3, [r7, #16]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	f000 809e 	beq.w	8001dae <HAL_GPIO_DeInit+0x162>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8001c72:	4a57      	ldr	r2, [pc, #348]	; (8001dd0 <HAL_GPIO_DeInit+0x184>)
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	089b      	lsrs	r3, r3, #2
 8001c78:	3302      	adds	r3, #2
 8001c7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c7e:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	f003 0303 	and.w	r3, r3, #3
 8001c86:	009b      	lsls	r3, r3, #2
 8001c88:	220f      	movs	r2, #15
 8001c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8e:	68fa      	ldr	r2, [r7, #12]
 8001c90:	4013      	ands	r3, r2
 8001c92:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001c9a:	d00d      	beq.n	8001cb8 <HAL_GPIO_DeInit+0x6c>
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	4a4d      	ldr	r2, [pc, #308]	; (8001dd4 <HAL_GPIO_DeInit+0x188>)
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d007      	beq.n	8001cb4 <HAL_GPIO_DeInit+0x68>
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	4a4c      	ldr	r2, [pc, #304]	; (8001dd8 <HAL_GPIO_DeInit+0x18c>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d101      	bne.n	8001cb0 <HAL_GPIO_DeInit+0x64>
 8001cac:	2302      	movs	r3, #2
 8001cae:	e004      	b.n	8001cba <HAL_GPIO_DeInit+0x6e>
 8001cb0:	2307      	movs	r3, #7
 8001cb2:	e002      	b.n	8001cba <HAL_GPIO_DeInit+0x6e>
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	e000      	b.n	8001cba <HAL_GPIO_DeInit+0x6e>
 8001cb8:	2300      	movs	r3, #0
 8001cba:	697a      	ldr	r2, [r7, #20]
 8001cbc:	f002 0203 	and.w	r2, r2, #3
 8001cc0:	0092      	lsls	r2, r2, #2
 8001cc2:	4093      	lsls	r3, r2
 8001cc4:	68fa      	ldr	r2, [r7, #12]
 8001cc6:	429a      	cmp	r2, r3
 8001cc8:	d132      	bne.n	8001d30 <HAL_GPIO_DeInit+0xe4>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8001cca:	4b44      	ldr	r3, [pc, #272]	; (8001ddc <HAL_GPIO_DeInit+0x190>)
 8001ccc:	681a      	ldr	r2, [r3, #0]
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	43db      	mvns	r3, r3
 8001cd2:	4942      	ldr	r1, [pc, #264]	; (8001ddc <HAL_GPIO_DeInit+0x190>)
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8001cd8:	4b40      	ldr	r3, [pc, #256]	; (8001ddc <HAL_GPIO_DeInit+0x190>)
 8001cda:	685a      	ldr	r2, [r3, #4]
 8001cdc:	693b      	ldr	r3, [r7, #16]
 8001cde:	43db      	mvns	r3, r3
 8001ce0:	493e      	ldr	r1, [pc, #248]	; (8001ddc <HAL_GPIO_DeInit+0x190>)
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8001ce6:	4b3d      	ldr	r3, [pc, #244]	; (8001ddc <HAL_GPIO_DeInit+0x190>)
 8001ce8:	68da      	ldr	r2, [r3, #12]
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	43db      	mvns	r3, r3
 8001cee:	493b      	ldr	r1, [pc, #236]	; (8001ddc <HAL_GPIO_DeInit+0x190>)
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8001cf4:	4b39      	ldr	r3, [pc, #228]	; (8001ddc <HAL_GPIO_DeInit+0x190>)
 8001cf6:	689a      	ldr	r2, [r3, #8]
 8001cf8:	693b      	ldr	r3, [r7, #16]
 8001cfa:	43db      	mvns	r3, r3
 8001cfc:	4937      	ldr	r1, [pc, #220]	; (8001ddc <HAL_GPIO_DeInit+0x190>)
 8001cfe:	4013      	ands	r3, r2
 8001d00:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	f003 0303 	and.w	r3, r3, #3
 8001d08:	009b      	lsls	r3, r3, #2
 8001d0a:	220f      	movs	r2, #15
 8001d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d10:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8001d12:	4a2f      	ldr	r2, [pc, #188]	; (8001dd0 <HAL_GPIO_DeInit+0x184>)
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	089b      	lsrs	r3, r3, #2
 8001d18:	3302      	adds	r3, #2
 8001d1a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	43da      	mvns	r2, r3
 8001d22:	482b      	ldr	r0, [pc, #172]	; (8001dd0 <HAL_GPIO_DeInit+0x184>)
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	089b      	lsrs	r3, r3, #2
 8001d28:	400a      	ands	r2, r1
 8001d2a:	3302      	adds	r3, #2
 8001d2c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681a      	ldr	r2, [r3, #0]
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	005b      	lsls	r3, r3, #1
 8001d38:	2103      	movs	r1, #3
 8001d3a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d3e:	431a      	orrs	r2, r3
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	08da      	lsrs	r2, r3, #3
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	3208      	adds	r2, #8
 8001d4c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	f003 0307 	and.w	r3, r3, #7
 8001d56:	009b      	lsls	r3, r3, #2
 8001d58:	220f      	movs	r2, #15
 8001d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5e:	43db      	mvns	r3, r3
 8001d60:	697a      	ldr	r2, [r7, #20]
 8001d62:	08d2      	lsrs	r2, r2, #3
 8001d64:	4019      	ands	r1, r3
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	3208      	adds	r2, #8
 8001d6a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	689a      	ldr	r2, [r3, #8]
 8001d72:	697b      	ldr	r3, [r7, #20]
 8001d74:	005b      	lsls	r3, r3, #1
 8001d76:	2103      	movs	r1, #3
 8001d78:	fa01 f303 	lsl.w	r3, r1, r3
 8001d7c:	43db      	mvns	r3, r3
 8001d7e:	401a      	ands	r2, r3
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	685a      	ldr	r2, [r3, #4]
 8001d88:	2101      	movs	r1, #1
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	fa01 f303 	lsl.w	r3, r1, r3
 8001d90:	43db      	mvns	r3, r3
 8001d92:	401a      	ands	r2, r3
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	68da      	ldr	r2, [r3, #12]
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	005b      	lsls	r3, r3, #1
 8001da0:	2103      	movs	r1, #3
 8001da2:	fa01 f303 	lsl.w	r3, r1, r3
 8001da6:	43db      	mvns	r3, r3
 8001da8:	401a      	ands	r2, r3
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	3301      	adds	r3, #1
 8001db2:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8001db4:	683a      	ldr	r2, [r7, #0]
 8001db6:	697b      	ldr	r3, [r7, #20]
 8001db8:	fa22 f303 	lsr.w	r3, r2, r3
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	f47f af4d 	bne.w	8001c5c <HAL_GPIO_DeInit+0x10>
  }
}
 8001dc2:	bf00      	nop
 8001dc4:	bf00      	nop
 8001dc6:	371c      	adds	r7, #28
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dce:	4770      	bx	lr
 8001dd0:	40010000 	.word	0x40010000
 8001dd4:	48000400 	.word	0x48000400
 8001dd8:	48000800 	.word	0x48000800
 8001ddc:	40010400 	.word	0x40010400

08001de0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b085      	sub	sp, #20
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
 8001de8:	460b      	mov	r3, r1
 8001dea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	691a      	ldr	r2, [r3, #16]
 8001df0:	887b      	ldrh	r3, [r7, #2]
 8001df2:	4013      	ands	r3, r2
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d002      	beq.n	8001dfe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	73fb      	strb	r3, [r7, #15]
 8001dfc:	e001      	b.n	8001e02 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001e02:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	3714      	adds	r7, #20
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0e:	4770      	bx	lr

08001e10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b083      	sub	sp, #12
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
 8001e18:	460b      	mov	r3, r1
 8001e1a:	807b      	strh	r3, [r7, #2]
 8001e1c:	4613      	mov	r3, r2
 8001e1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e20:	787b      	ldrb	r3, [r7, #1]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d003      	beq.n	8001e2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001e26:	887a      	ldrh	r2, [r7, #2]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001e2c:	e002      	b.n	8001e34 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001e2e:	887a      	ldrh	r2, [r7, #2]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001e34:	bf00      	nop
 8001e36:	370c      	adds	r7, #12
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3e:	4770      	bx	lr

08001e40 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b085      	sub	sp, #20
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
 8001e48:	460b      	mov	r3, r1
 8001e4a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	695b      	ldr	r3, [r3, #20]
 8001e50:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001e52:	887a      	ldrh	r2, [r7, #2]
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	4013      	ands	r3, r2
 8001e58:	041a      	lsls	r2, r3, #16
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	43d9      	mvns	r1, r3
 8001e5e:	887b      	ldrh	r3, [r7, #2]
 8001e60:	400b      	ands	r3, r1
 8001e62:	431a      	orrs	r2, r3
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	619a      	str	r2, [r3, #24]
}
 8001e68:	bf00      	nop
 8001e6a:	3714      	adds	r7, #20
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e72:	4770      	bx	lr

08001e74 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b082      	sub	sp, #8
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001e7e:	4b08      	ldr	r3, [pc, #32]	; (8001ea0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001e80:	695a      	ldr	r2, [r3, #20]
 8001e82:	88fb      	ldrh	r3, [r7, #6]
 8001e84:	4013      	ands	r3, r2
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d006      	beq.n	8001e98 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001e8a:	4a05      	ldr	r2, [pc, #20]	; (8001ea0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001e8c:	88fb      	ldrh	r3, [r7, #6]
 8001e8e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001e90:	88fb      	ldrh	r3, [r7, #6]
 8001e92:	4618      	mov	r0, r3
 8001e94:	f7fe fece 	bl	8000c34 <HAL_GPIO_EXTI_Callback>
  }
}
 8001e98:	bf00      	nop
 8001e9a:	3708      	adds	r7, #8
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}
 8001ea0:	40010400 	.word	0x40010400

08001ea4 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ea8:	4b05      	ldr	r3, [pc, #20]	; (8001ec0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a04      	ldr	r2, [pc, #16]	; (8001ec0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001eae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001eb2:	6013      	str	r3, [r2, #0]
}
 8001eb4:	bf00      	nop
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr
 8001ebe:	bf00      	nop
 8001ec0:	40007000 	.word	0x40007000

08001ec4 <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b082      	sub	sp, #8
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
 8001ecc:	460b      	mov	r3, r1
 8001ece:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d10c      	bne.n	8001ef0 <HAL_PWR_EnterSLEEPMode+0x2c>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 8001ed6:	4b13      	ldr	r3, [pc, #76]	; (8001f24 <HAL_PWR_EnterSLEEPMode+0x60>)
 8001ed8:	695b      	ldr	r3, [r3, #20]
 8001eda:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ede:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ee2:	d10e      	bne.n	8001f02 <HAL_PWR_EnterSLEEPMode+0x3e>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 8001ee4:	f000 f896 	bl	8002014 <HAL_PWREx_DisableLowPowerRunMode>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d009      	beq.n	8001f02 <HAL_PWR_EnterSLEEPMode+0x3e>
      {
        return ;
 8001eee:	e016      	b.n	8001f1e <HAL_PWR_EnterSLEEPMode+0x5a>
  }
  else
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF) == RESET)
 8001ef0:	4b0c      	ldr	r3, [pc, #48]	; (8001f24 <HAL_PWR_EnterSLEEPMode+0x60>)
 8001ef2:	695b      	ldr	r3, [r3, #20]
 8001ef4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ef8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001efc:	d001      	beq.n	8001f02 <HAL_PWR_EnterSLEEPMode+0x3e>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 8001efe:	f000 f879 	bl	8001ff4 <HAL_PWREx_EnableLowPowerRunMode>
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001f02:	4b09      	ldr	r3, [pc, #36]	; (8001f28 <HAL_PWR_EnterSLEEPMode+0x64>)
 8001f04:	691b      	ldr	r3, [r3, #16]
 8001f06:	4a08      	ldr	r2, [pc, #32]	; (8001f28 <HAL_PWR_EnterSLEEPMode+0x64>)
 8001f08:	f023 0304 	bic.w	r3, r3, #4
 8001f0c:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8001f0e:	78fb      	ldrb	r3, [r7, #3]
 8001f10:	2b01      	cmp	r3, #1
 8001f12:	d101      	bne.n	8001f18 <HAL_PWR_EnterSLEEPMode+0x54>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8001f14:	bf30      	wfi
 8001f16:	e002      	b.n	8001f1e <HAL_PWR_EnterSLEEPMode+0x5a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8001f18:	bf40      	sev
    __WFE();
 8001f1a:	bf20      	wfe
    __WFE();
 8001f1c:	bf20      	wfe
  }

}
 8001f1e:	3708      	adds	r7, #8
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}
 8001f24:	40007000 	.word	0x40007000
 8001f28:	e000ed00 	.word	0xe000ed00

08001f2c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001f30:	4b04      	ldr	r3, [pc, #16]	; (8001f44 <HAL_PWREx_GetVoltageRange+0x18>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f40:	4770      	bx	lr
 8001f42:	bf00      	nop
 8001f44:	40007000 	.word	0x40007000

08001f48 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b085      	sub	sp, #20
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f56:	d130      	bne.n	8001fba <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f58:	4b23      	ldr	r3, [pc, #140]	; (8001fe8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001f60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f64:	d038      	beq.n	8001fd8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f66:	4b20      	ldr	r3, [pc, #128]	; (8001fe8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001f6e:	4a1e      	ldr	r2, [pc, #120]	; (8001fe8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f70:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f74:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001f76:	4b1d      	ldr	r3, [pc, #116]	; (8001fec <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	2232      	movs	r2, #50	; 0x32
 8001f7c:	fb02 f303 	mul.w	r3, r2, r3
 8001f80:	4a1b      	ldr	r2, [pc, #108]	; (8001ff0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001f82:	fba2 2303 	umull	r2, r3, r2, r3
 8001f86:	0c9b      	lsrs	r3, r3, #18
 8001f88:	3301      	adds	r3, #1
 8001f8a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f8c:	e002      	b.n	8001f94 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	3b01      	subs	r3, #1
 8001f92:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f94:	4b14      	ldr	r3, [pc, #80]	; (8001fe8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f96:	695b      	ldr	r3, [r3, #20]
 8001f98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fa0:	d102      	bne.n	8001fa8 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d1f2      	bne.n	8001f8e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001fa8:	4b0f      	ldr	r3, [pc, #60]	; (8001fe8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001faa:	695b      	ldr	r3, [r3, #20]
 8001fac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fb0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fb4:	d110      	bne.n	8001fd8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001fb6:	2303      	movs	r3, #3
 8001fb8:	e00f      	b.n	8001fda <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001fba:	4b0b      	ldr	r3, [pc, #44]	; (8001fe8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001fc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fc6:	d007      	beq.n	8001fd8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001fc8:	4b07      	ldr	r3, [pc, #28]	; (8001fe8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001fd0:	4a05      	ldr	r2, [pc, #20]	; (8001fe8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fd2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001fd6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001fd8:	2300      	movs	r3, #0
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	3714      	adds	r7, #20
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe4:	4770      	bx	lr
 8001fe6:	bf00      	nop
 8001fe8:	40007000 	.word	0x40007000
 8001fec:	20000000 	.word	0x20000000
 8001ff0:	431bde83 	.word	0x431bde83

08001ff4 <HAL_PWREx_EnableLowPowerRunMode>:
  *        Setting RUN_PD in FLASH_ACR then appropriately reducing the clock frequency must
  *        be done before calling HAL_PWREx_EnableLowPowerRunMode() API.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 8001ff8:	4b05      	ldr	r3, [pc, #20]	; (8002010 <HAL_PWREx_EnableLowPowerRunMode+0x1c>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a04      	ldr	r2, [pc, #16]	; (8002010 <HAL_PWREx_EnableLowPowerRunMode+0x1c>)
 8001ffe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002002:	6013      	str	r3, [r2, #0]
}
 8002004:	bf00      	nop
 8002006:	46bd      	mov	sp, r7
 8002008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200c:	4770      	bx	lr
 800200e:	bf00      	nop
 8002010:	40007000 	.word	0x40007000

08002014 <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 8002014:	b480      	push	{r7}
 8002016:	b083      	sub	sp, #12
 8002018:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 800201a:	4b17      	ldr	r3, [pc, #92]	; (8002078 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4a16      	ldr	r2, [pc, #88]	; (8002078 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8002020:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002024:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002026:	4b15      	ldr	r3, [pc, #84]	; (800207c <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	2232      	movs	r2, #50	; 0x32
 800202c:	fb02 f303 	mul.w	r3, r2, r3
 8002030:	4a13      	ldr	r2, [pc, #76]	; (8002080 <HAL_PWREx_DisableLowPowerRunMode+0x6c>)
 8002032:	fba2 2303 	umull	r2, r3, r2, r3
 8002036:	0c9b      	lsrs	r3, r3, #18
 8002038:	3301      	adds	r3, #1
 800203a:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 800203c:	e002      	b.n	8002044 <HAL_PWREx_DisableLowPowerRunMode+0x30>
  {
    wait_loop_index--;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	3b01      	subs	r3, #1
 8002042:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8002044:	4b0c      	ldr	r3, [pc, #48]	; (8002078 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8002046:	695b      	ldr	r3, [r3, #20]
 8002048:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800204c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002050:	d102      	bne.n	8002058 <HAL_PWREx_DisableLowPowerRunMode+0x44>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d1f2      	bne.n	800203e <HAL_PWREx_DisableLowPowerRunMode+0x2a>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 8002058:	4b07      	ldr	r3, [pc, #28]	; (8002078 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 800205a:	695b      	ldr	r3, [r3, #20]
 800205c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002060:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002064:	d101      	bne.n	800206a <HAL_PWREx_DisableLowPowerRunMode+0x56>
  {
    return HAL_TIMEOUT;
 8002066:	2303      	movs	r3, #3
 8002068:	e000      	b.n	800206c <HAL_PWREx_DisableLowPowerRunMode+0x58>
  }

  return HAL_OK;
 800206a:	2300      	movs	r3, #0
}
 800206c:	4618      	mov	r0, r3
 800206e:	370c      	adds	r7, #12
 8002070:	46bd      	mov	sp, r7
 8002072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002076:	4770      	bx	lr
 8002078:	40007000 	.word	0x40007000
 800207c:	20000000 	.word	0x20000000
 8002080:	431bde83 	.word	0x431bde83

08002084 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b088      	sub	sp, #32
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d102      	bne.n	8002098 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002092:	2301      	movs	r3, #1
 8002094:	f000 bc02 	b.w	800289c <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002098:	4b96      	ldr	r3, [pc, #600]	; (80022f4 <HAL_RCC_OscConfig+0x270>)
 800209a:	689b      	ldr	r3, [r3, #8]
 800209c:	f003 030c 	and.w	r3, r3, #12
 80020a0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80020a2:	4b94      	ldr	r3, [pc, #592]	; (80022f4 <HAL_RCC_OscConfig+0x270>)
 80020a4:	68db      	ldr	r3, [r3, #12]
 80020a6:	f003 0303 	and.w	r3, r3, #3
 80020aa:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f003 0310 	and.w	r3, r3, #16
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	f000 80e4 	beq.w	8002282 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80020ba:	69bb      	ldr	r3, [r7, #24]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d007      	beq.n	80020d0 <HAL_RCC_OscConfig+0x4c>
 80020c0:	69bb      	ldr	r3, [r7, #24]
 80020c2:	2b0c      	cmp	r3, #12
 80020c4:	f040 808b 	bne.w	80021de <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	2b01      	cmp	r3, #1
 80020cc:	f040 8087 	bne.w	80021de <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80020d0:	4b88      	ldr	r3, [pc, #544]	; (80022f4 <HAL_RCC_OscConfig+0x270>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f003 0302 	and.w	r3, r3, #2
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d005      	beq.n	80020e8 <HAL_RCC_OscConfig+0x64>
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	699b      	ldr	r3, [r3, #24]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d101      	bne.n	80020e8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80020e4:	2301      	movs	r3, #1
 80020e6:	e3d9      	b.n	800289c <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6a1a      	ldr	r2, [r3, #32]
 80020ec:	4b81      	ldr	r3, [pc, #516]	; (80022f4 <HAL_RCC_OscConfig+0x270>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f003 0308 	and.w	r3, r3, #8
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d004      	beq.n	8002102 <HAL_RCC_OscConfig+0x7e>
 80020f8:	4b7e      	ldr	r3, [pc, #504]	; (80022f4 <HAL_RCC_OscConfig+0x270>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002100:	e005      	b.n	800210e <HAL_RCC_OscConfig+0x8a>
 8002102:	4b7c      	ldr	r3, [pc, #496]	; (80022f4 <HAL_RCC_OscConfig+0x270>)
 8002104:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002108:	091b      	lsrs	r3, r3, #4
 800210a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800210e:	4293      	cmp	r3, r2
 8002110:	d223      	bcs.n	800215a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6a1b      	ldr	r3, [r3, #32]
 8002116:	4618      	mov	r0, r3
 8002118:	f000 fd8c 	bl	8002c34 <RCC_SetFlashLatencyFromMSIRange>
 800211c:	4603      	mov	r3, r0
 800211e:	2b00      	cmp	r3, #0
 8002120:	d001      	beq.n	8002126 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	e3ba      	b.n	800289c <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002126:	4b73      	ldr	r3, [pc, #460]	; (80022f4 <HAL_RCC_OscConfig+0x270>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a72      	ldr	r2, [pc, #456]	; (80022f4 <HAL_RCC_OscConfig+0x270>)
 800212c:	f043 0308 	orr.w	r3, r3, #8
 8002130:	6013      	str	r3, [r2, #0]
 8002132:	4b70      	ldr	r3, [pc, #448]	; (80022f4 <HAL_RCC_OscConfig+0x270>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6a1b      	ldr	r3, [r3, #32]
 800213e:	496d      	ldr	r1, [pc, #436]	; (80022f4 <HAL_RCC_OscConfig+0x270>)
 8002140:	4313      	orrs	r3, r2
 8002142:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002144:	4b6b      	ldr	r3, [pc, #428]	; (80022f4 <HAL_RCC_OscConfig+0x270>)
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	69db      	ldr	r3, [r3, #28]
 8002150:	021b      	lsls	r3, r3, #8
 8002152:	4968      	ldr	r1, [pc, #416]	; (80022f4 <HAL_RCC_OscConfig+0x270>)
 8002154:	4313      	orrs	r3, r2
 8002156:	604b      	str	r3, [r1, #4]
 8002158:	e025      	b.n	80021a6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800215a:	4b66      	ldr	r3, [pc, #408]	; (80022f4 <HAL_RCC_OscConfig+0x270>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a65      	ldr	r2, [pc, #404]	; (80022f4 <HAL_RCC_OscConfig+0x270>)
 8002160:	f043 0308 	orr.w	r3, r3, #8
 8002164:	6013      	str	r3, [r2, #0]
 8002166:	4b63      	ldr	r3, [pc, #396]	; (80022f4 <HAL_RCC_OscConfig+0x270>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6a1b      	ldr	r3, [r3, #32]
 8002172:	4960      	ldr	r1, [pc, #384]	; (80022f4 <HAL_RCC_OscConfig+0x270>)
 8002174:	4313      	orrs	r3, r2
 8002176:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002178:	4b5e      	ldr	r3, [pc, #376]	; (80022f4 <HAL_RCC_OscConfig+0x270>)
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	69db      	ldr	r3, [r3, #28]
 8002184:	021b      	lsls	r3, r3, #8
 8002186:	495b      	ldr	r1, [pc, #364]	; (80022f4 <HAL_RCC_OscConfig+0x270>)
 8002188:	4313      	orrs	r3, r2
 800218a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800218c:	69bb      	ldr	r3, [r7, #24]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d109      	bne.n	80021a6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6a1b      	ldr	r3, [r3, #32]
 8002196:	4618      	mov	r0, r3
 8002198:	f000 fd4c 	bl	8002c34 <RCC_SetFlashLatencyFromMSIRange>
 800219c:	4603      	mov	r3, r0
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d001      	beq.n	80021a6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
 80021a4:	e37a      	b.n	800289c <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80021a6:	f000 fc81 	bl	8002aac <HAL_RCC_GetSysClockFreq>
 80021aa:	4602      	mov	r2, r0
 80021ac:	4b51      	ldr	r3, [pc, #324]	; (80022f4 <HAL_RCC_OscConfig+0x270>)
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	091b      	lsrs	r3, r3, #4
 80021b2:	f003 030f 	and.w	r3, r3, #15
 80021b6:	4950      	ldr	r1, [pc, #320]	; (80022f8 <HAL_RCC_OscConfig+0x274>)
 80021b8:	5ccb      	ldrb	r3, [r1, r3]
 80021ba:	f003 031f 	and.w	r3, r3, #31
 80021be:	fa22 f303 	lsr.w	r3, r2, r3
 80021c2:	4a4e      	ldr	r2, [pc, #312]	; (80022fc <HAL_RCC_OscConfig+0x278>)
 80021c4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80021c6:	4b4e      	ldr	r3, [pc, #312]	; (8002300 <HAL_RCC_OscConfig+0x27c>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4618      	mov	r0, r3
 80021cc:	f7fe ffaa 	bl	8001124 <HAL_InitTick>
 80021d0:	4603      	mov	r3, r0
 80021d2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80021d4:	7bfb      	ldrb	r3, [r7, #15]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d052      	beq.n	8002280 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80021da:	7bfb      	ldrb	r3, [r7, #15]
 80021dc:	e35e      	b.n	800289c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	699b      	ldr	r3, [r3, #24]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d032      	beq.n	800224c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80021e6:	4b43      	ldr	r3, [pc, #268]	; (80022f4 <HAL_RCC_OscConfig+0x270>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4a42      	ldr	r2, [pc, #264]	; (80022f4 <HAL_RCC_OscConfig+0x270>)
 80021ec:	f043 0301 	orr.w	r3, r3, #1
 80021f0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80021f2:	f7fe ffe7 	bl	80011c4 <HAL_GetTick>
 80021f6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80021f8:	e008      	b.n	800220c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80021fa:	f7fe ffe3 	bl	80011c4 <HAL_GetTick>
 80021fe:	4602      	mov	r2, r0
 8002200:	693b      	ldr	r3, [r7, #16]
 8002202:	1ad3      	subs	r3, r2, r3
 8002204:	2b02      	cmp	r3, #2
 8002206:	d901      	bls.n	800220c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002208:	2303      	movs	r3, #3
 800220a:	e347      	b.n	800289c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800220c:	4b39      	ldr	r3, [pc, #228]	; (80022f4 <HAL_RCC_OscConfig+0x270>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f003 0302 	and.w	r3, r3, #2
 8002214:	2b00      	cmp	r3, #0
 8002216:	d0f0      	beq.n	80021fa <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002218:	4b36      	ldr	r3, [pc, #216]	; (80022f4 <HAL_RCC_OscConfig+0x270>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a35      	ldr	r2, [pc, #212]	; (80022f4 <HAL_RCC_OscConfig+0x270>)
 800221e:	f043 0308 	orr.w	r3, r3, #8
 8002222:	6013      	str	r3, [r2, #0]
 8002224:	4b33      	ldr	r3, [pc, #204]	; (80022f4 <HAL_RCC_OscConfig+0x270>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6a1b      	ldr	r3, [r3, #32]
 8002230:	4930      	ldr	r1, [pc, #192]	; (80022f4 <HAL_RCC_OscConfig+0x270>)
 8002232:	4313      	orrs	r3, r2
 8002234:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002236:	4b2f      	ldr	r3, [pc, #188]	; (80022f4 <HAL_RCC_OscConfig+0x270>)
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	69db      	ldr	r3, [r3, #28]
 8002242:	021b      	lsls	r3, r3, #8
 8002244:	492b      	ldr	r1, [pc, #172]	; (80022f4 <HAL_RCC_OscConfig+0x270>)
 8002246:	4313      	orrs	r3, r2
 8002248:	604b      	str	r3, [r1, #4]
 800224a:	e01a      	b.n	8002282 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800224c:	4b29      	ldr	r3, [pc, #164]	; (80022f4 <HAL_RCC_OscConfig+0x270>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a28      	ldr	r2, [pc, #160]	; (80022f4 <HAL_RCC_OscConfig+0x270>)
 8002252:	f023 0301 	bic.w	r3, r3, #1
 8002256:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002258:	f7fe ffb4 	bl	80011c4 <HAL_GetTick>
 800225c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800225e:	e008      	b.n	8002272 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002260:	f7fe ffb0 	bl	80011c4 <HAL_GetTick>
 8002264:	4602      	mov	r2, r0
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	2b02      	cmp	r3, #2
 800226c:	d901      	bls.n	8002272 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800226e:	2303      	movs	r3, #3
 8002270:	e314      	b.n	800289c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002272:	4b20      	ldr	r3, [pc, #128]	; (80022f4 <HAL_RCC_OscConfig+0x270>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f003 0302 	and.w	r3, r3, #2
 800227a:	2b00      	cmp	r3, #0
 800227c:	d1f0      	bne.n	8002260 <HAL_RCC_OscConfig+0x1dc>
 800227e:	e000      	b.n	8002282 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002280:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f003 0301 	and.w	r3, r3, #1
 800228a:	2b00      	cmp	r3, #0
 800228c:	d073      	beq.n	8002376 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800228e:	69bb      	ldr	r3, [r7, #24]
 8002290:	2b08      	cmp	r3, #8
 8002292:	d005      	beq.n	80022a0 <HAL_RCC_OscConfig+0x21c>
 8002294:	69bb      	ldr	r3, [r7, #24]
 8002296:	2b0c      	cmp	r3, #12
 8002298:	d10e      	bne.n	80022b8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800229a:	697b      	ldr	r3, [r7, #20]
 800229c:	2b03      	cmp	r3, #3
 800229e:	d10b      	bne.n	80022b8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022a0:	4b14      	ldr	r3, [pc, #80]	; (80022f4 <HAL_RCC_OscConfig+0x270>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d063      	beq.n	8002374 <HAL_RCC_OscConfig+0x2f0>
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d15f      	bne.n	8002374 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80022b4:	2301      	movs	r3, #1
 80022b6:	e2f1      	b.n	800289c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022c0:	d106      	bne.n	80022d0 <HAL_RCC_OscConfig+0x24c>
 80022c2:	4b0c      	ldr	r3, [pc, #48]	; (80022f4 <HAL_RCC_OscConfig+0x270>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a0b      	ldr	r2, [pc, #44]	; (80022f4 <HAL_RCC_OscConfig+0x270>)
 80022c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022cc:	6013      	str	r3, [r2, #0]
 80022ce:	e025      	b.n	800231c <HAL_RCC_OscConfig+0x298>
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022d8:	d114      	bne.n	8002304 <HAL_RCC_OscConfig+0x280>
 80022da:	4b06      	ldr	r3, [pc, #24]	; (80022f4 <HAL_RCC_OscConfig+0x270>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a05      	ldr	r2, [pc, #20]	; (80022f4 <HAL_RCC_OscConfig+0x270>)
 80022e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022e4:	6013      	str	r3, [r2, #0]
 80022e6:	4b03      	ldr	r3, [pc, #12]	; (80022f4 <HAL_RCC_OscConfig+0x270>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4a02      	ldr	r2, [pc, #8]	; (80022f4 <HAL_RCC_OscConfig+0x270>)
 80022ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022f0:	6013      	str	r3, [r2, #0]
 80022f2:	e013      	b.n	800231c <HAL_RCC_OscConfig+0x298>
 80022f4:	40021000 	.word	0x40021000
 80022f8:	08004b40 	.word	0x08004b40
 80022fc:	20000000 	.word	0x20000000
 8002300:	20000004 	.word	0x20000004
 8002304:	4ba0      	ldr	r3, [pc, #640]	; (8002588 <HAL_RCC_OscConfig+0x504>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a9f      	ldr	r2, [pc, #636]	; (8002588 <HAL_RCC_OscConfig+0x504>)
 800230a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800230e:	6013      	str	r3, [r2, #0]
 8002310:	4b9d      	ldr	r3, [pc, #628]	; (8002588 <HAL_RCC_OscConfig+0x504>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a9c      	ldr	r2, [pc, #624]	; (8002588 <HAL_RCC_OscConfig+0x504>)
 8002316:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800231a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d013      	beq.n	800234c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002324:	f7fe ff4e 	bl	80011c4 <HAL_GetTick>
 8002328:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800232a:	e008      	b.n	800233e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800232c:	f7fe ff4a 	bl	80011c4 <HAL_GetTick>
 8002330:	4602      	mov	r2, r0
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	1ad3      	subs	r3, r2, r3
 8002336:	2b64      	cmp	r3, #100	; 0x64
 8002338:	d901      	bls.n	800233e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800233a:	2303      	movs	r3, #3
 800233c:	e2ae      	b.n	800289c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800233e:	4b92      	ldr	r3, [pc, #584]	; (8002588 <HAL_RCC_OscConfig+0x504>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002346:	2b00      	cmp	r3, #0
 8002348:	d0f0      	beq.n	800232c <HAL_RCC_OscConfig+0x2a8>
 800234a:	e014      	b.n	8002376 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800234c:	f7fe ff3a 	bl	80011c4 <HAL_GetTick>
 8002350:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002352:	e008      	b.n	8002366 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002354:	f7fe ff36 	bl	80011c4 <HAL_GetTick>
 8002358:	4602      	mov	r2, r0
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	1ad3      	subs	r3, r2, r3
 800235e:	2b64      	cmp	r3, #100	; 0x64
 8002360:	d901      	bls.n	8002366 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002362:	2303      	movs	r3, #3
 8002364:	e29a      	b.n	800289c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002366:	4b88      	ldr	r3, [pc, #544]	; (8002588 <HAL_RCC_OscConfig+0x504>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800236e:	2b00      	cmp	r3, #0
 8002370:	d1f0      	bne.n	8002354 <HAL_RCC_OscConfig+0x2d0>
 8002372:	e000      	b.n	8002376 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002374:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f003 0302 	and.w	r3, r3, #2
 800237e:	2b00      	cmp	r3, #0
 8002380:	d060      	beq.n	8002444 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002382:	69bb      	ldr	r3, [r7, #24]
 8002384:	2b04      	cmp	r3, #4
 8002386:	d005      	beq.n	8002394 <HAL_RCC_OscConfig+0x310>
 8002388:	69bb      	ldr	r3, [r7, #24]
 800238a:	2b0c      	cmp	r3, #12
 800238c:	d119      	bne.n	80023c2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800238e:	697b      	ldr	r3, [r7, #20]
 8002390:	2b02      	cmp	r3, #2
 8002392:	d116      	bne.n	80023c2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002394:	4b7c      	ldr	r3, [pc, #496]	; (8002588 <HAL_RCC_OscConfig+0x504>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800239c:	2b00      	cmp	r3, #0
 800239e:	d005      	beq.n	80023ac <HAL_RCC_OscConfig+0x328>
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	68db      	ldr	r3, [r3, #12]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d101      	bne.n	80023ac <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80023a8:	2301      	movs	r3, #1
 80023aa:	e277      	b.n	800289c <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023ac:	4b76      	ldr	r3, [pc, #472]	; (8002588 <HAL_RCC_OscConfig+0x504>)
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	691b      	ldr	r3, [r3, #16]
 80023b8:	061b      	lsls	r3, r3, #24
 80023ba:	4973      	ldr	r1, [pc, #460]	; (8002588 <HAL_RCC_OscConfig+0x504>)
 80023bc:	4313      	orrs	r3, r2
 80023be:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80023c0:	e040      	b.n	8002444 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	68db      	ldr	r3, [r3, #12]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d023      	beq.n	8002412 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023ca:	4b6f      	ldr	r3, [pc, #444]	; (8002588 <HAL_RCC_OscConfig+0x504>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a6e      	ldr	r2, [pc, #440]	; (8002588 <HAL_RCC_OscConfig+0x504>)
 80023d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023d6:	f7fe fef5 	bl	80011c4 <HAL_GetTick>
 80023da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023dc:	e008      	b.n	80023f0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023de:	f7fe fef1 	bl	80011c4 <HAL_GetTick>
 80023e2:	4602      	mov	r2, r0
 80023e4:	693b      	ldr	r3, [r7, #16]
 80023e6:	1ad3      	subs	r3, r2, r3
 80023e8:	2b02      	cmp	r3, #2
 80023ea:	d901      	bls.n	80023f0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80023ec:	2303      	movs	r3, #3
 80023ee:	e255      	b.n	800289c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023f0:	4b65      	ldr	r3, [pc, #404]	; (8002588 <HAL_RCC_OscConfig+0x504>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d0f0      	beq.n	80023de <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023fc:	4b62      	ldr	r3, [pc, #392]	; (8002588 <HAL_RCC_OscConfig+0x504>)
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	691b      	ldr	r3, [r3, #16]
 8002408:	061b      	lsls	r3, r3, #24
 800240a:	495f      	ldr	r1, [pc, #380]	; (8002588 <HAL_RCC_OscConfig+0x504>)
 800240c:	4313      	orrs	r3, r2
 800240e:	604b      	str	r3, [r1, #4]
 8002410:	e018      	b.n	8002444 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002412:	4b5d      	ldr	r3, [pc, #372]	; (8002588 <HAL_RCC_OscConfig+0x504>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a5c      	ldr	r2, [pc, #368]	; (8002588 <HAL_RCC_OscConfig+0x504>)
 8002418:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800241c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800241e:	f7fe fed1 	bl	80011c4 <HAL_GetTick>
 8002422:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002424:	e008      	b.n	8002438 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002426:	f7fe fecd 	bl	80011c4 <HAL_GetTick>
 800242a:	4602      	mov	r2, r0
 800242c:	693b      	ldr	r3, [r7, #16]
 800242e:	1ad3      	subs	r3, r2, r3
 8002430:	2b02      	cmp	r3, #2
 8002432:	d901      	bls.n	8002438 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002434:	2303      	movs	r3, #3
 8002436:	e231      	b.n	800289c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002438:	4b53      	ldr	r3, [pc, #332]	; (8002588 <HAL_RCC_OscConfig+0x504>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002440:	2b00      	cmp	r3, #0
 8002442:	d1f0      	bne.n	8002426 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f003 0308 	and.w	r3, r3, #8
 800244c:	2b00      	cmp	r3, #0
 800244e:	d03c      	beq.n	80024ca <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	695b      	ldr	r3, [r3, #20]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d01c      	beq.n	8002492 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002458:	4b4b      	ldr	r3, [pc, #300]	; (8002588 <HAL_RCC_OscConfig+0x504>)
 800245a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800245e:	4a4a      	ldr	r2, [pc, #296]	; (8002588 <HAL_RCC_OscConfig+0x504>)
 8002460:	f043 0301 	orr.w	r3, r3, #1
 8002464:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002468:	f7fe feac 	bl	80011c4 <HAL_GetTick>
 800246c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800246e:	e008      	b.n	8002482 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002470:	f7fe fea8 	bl	80011c4 <HAL_GetTick>
 8002474:	4602      	mov	r2, r0
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	1ad3      	subs	r3, r2, r3
 800247a:	2b02      	cmp	r3, #2
 800247c:	d901      	bls.n	8002482 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800247e:	2303      	movs	r3, #3
 8002480:	e20c      	b.n	800289c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002482:	4b41      	ldr	r3, [pc, #260]	; (8002588 <HAL_RCC_OscConfig+0x504>)
 8002484:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002488:	f003 0302 	and.w	r3, r3, #2
 800248c:	2b00      	cmp	r3, #0
 800248e:	d0ef      	beq.n	8002470 <HAL_RCC_OscConfig+0x3ec>
 8002490:	e01b      	b.n	80024ca <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002492:	4b3d      	ldr	r3, [pc, #244]	; (8002588 <HAL_RCC_OscConfig+0x504>)
 8002494:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002498:	4a3b      	ldr	r2, [pc, #236]	; (8002588 <HAL_RCC_OscConfig+0x504>)
 800249a:	f023 0301 	bic.w	r3, r3, #1
 800249e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024a2:	f7fe fe8f 	bl	80011c4 <HAL_GetTick>
 80024a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80024a8:	e008      	b.n	80024bc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024aa:	f7fe fe8b 	bl	80011c4 <HAL_GetTick>
 80024ae:	4602      	mov	r2, r0
 80024b0:	693b      	ldr	r3, [r7, #16]
 80024b2:	1ad3      	subs	r3, r2, r3
 80024b4:	2b02      	cmp	r3, #2
 80024b6:	d901      	bls.n	80024bc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80024b8:	2303      	movs	r3, #3
 80024ba:	e1ef      	b.n	800289c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80024bc:	4b32      	ldr	r3, [pc, #200]	; (8002588 <HAL_RCC_OscConfig+0x504>)
 80024be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024c2:	f003 0302 	and.w	r3, r3, #2
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d1ef      	bne.n	80024aa <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f003 0304 	and.w	r3, r3, #4
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	f000 80a6 	beq.w	8002624 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024d8:	2300      	movs	r3, #0
 80024da:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80024dc:	4b2a      	ldr	r3, [pc, #168]	; (8002588 <HAL_RCC_OscConfig+0x504>)
 80024de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d10d      	bne.n	8002504 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024e8:	4b27      	ldr	r3, [pc, #156]	; (8002588 <HAL_RCC_OscConfig+0x504>)
 80024ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024ec:	4a26      	ldr	r2, [pc, #152]	; (8002588 <HAL_RCC_OscConfig+0x504>)
 80024ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024f2:	6593      	str	r3, [r2, #88]	; 0x58
 80024f4:	4b24      	ldr	r3, [pc, #144]	; (8002588 <HAL_RCC_OscConfig+0x504>)
 80024f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024fc:	60bb      	str	r3, [r7, #8]
 80024fe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002500:	2301      	movs	r3, #1
 8002502:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002504:	4b21      	ldr	r3, [pc, #132]	; (800258c <HAL_RCC_OscConfig+0x508>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800250c:	2b00      	cmp	r3, #0
 800250e:	d118      	bne.n	8002542 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002510:	4b1e      	ldr	r3, [pc, #120]	; (800258c <HAL_RCC_OscConfig+0x508>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a1d      	ldr	r2, [pc, #116]	; (800258c <HAL_RCC_OscConfig+0x508>)
 8002516:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800251a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800251c:	f7fe fe52 	bl	80011c4 <HAL_GetTick>
 8002520:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002522:	e008      	b.n	8002536 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002524:	f7fe fe4e 	bl	80011c4 <HAL_GetTick>
 8002528:	4602      	mov	r2, r0
 800252a:	693b      	ldr	r3, [r7, #16]
 800252c:	1ad3      	subs	r3, r2, r3
 800252e:	2b02      	cmp	r3, #2
 8002530:	d901      	bls.n	8002536 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002532:	2303      	movs	r3, #3
 8002534:	e1b2      	b.n	800289c <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002536:	4b15      	ldr	r3, [pc, #84]	; (800258c <HAL_RCC_OscConfig+0x508>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800253e:	2b00      	cmp	r3, #0
 8002540:	d0f0      	beq.n	8002524 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	2b01      	cmp	r3, #1
 8002548:	d108      	bne.n	800255c <HAL_RCC_OscConfig+0x4d8>
 800254a:	4b0f      	ldr	r3, [pc, #60]	; (8002588 <HAL_RCC_OscConfig+0x504>)
 800254c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002550:	4a0d      	ldr	r2, [pc, #52]	; (8002588 <HAL_RCC_OscConfig+0x504>)
 8002552:	f043 0301 	orr.w	r3, r3, #1
 8002556:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800255a:	e029      	b.n	80025b0 <HAL_RCC_OscConfig+0x52c>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	689b      	ldr	r3, [r3, #8]
 8002560:	2b05      	cmp	r3, #5
 8002562:	d115      	bne.n	8002590 <HAL_RCC_OscConfig+0x50c>
 8002564:	4b08      	ldr	r3, [pc, #32]	; (8002588 <HAL_RCC_OscConfig+0x504>)
 8002566:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800256a:	4a07      	ldr	r2, [pc, #28]	; (8002588 <HAL_RCC_OscConfig+0x504>)
 800256c:	f043 0304 	orr.w	r3, r3, #4
 8002570:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002574:	4b04      	ldr	r3, [pc, #16]	; (8002588 <HAL_RCC_OscConfig+0x504>)
 8002576:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800257a:	4a03      	ldr	r2, [pc, #12]	; (8002588 <HAL_RCC_OscConfig+0x504>)
 800257c:	f043 0301 	orr.w	r3, r3, #1
 8002580:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002584:	e014      	b.n	80025b0 <HAL_RCC_OscConfig+0x52c>
 8002586:	bf00      	nop
 8002588:	40021000 	.word	0x40021000
 800258c:	40007000 	.word	0x40007000
 8002590:	4b9a      	ldr	r3, [pc, #616]	; (80027fc <HAL_RCC_OscConfig+0x778>)
 8002592:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002596:	4a99      	ldr	r2, [pc, #612]	; (80027fc <HAL_RCC_OscConfig+0x778>)
 8002598:	f023 0301 	bic.w	r3, r3, #1
 800259c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80025a0:	4b96      	ldr	r3, [pc, #600]	; (80027fc <HAL_RCC_OscConfig+0x778>)
 80025a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025a6:	4a95      	ldr	r2, [pc, #596]	; (80027fc <HAL_RCC_OscConfig+0x778>)
 80025a8:	f023 0304 	bic.w	r3, r3, #4
 80025ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	689b      	ldr	r3, [r3, #8]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d016      	beq.n	80025e6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025b8:	f7fe fe04 	bl	80011c4 <HAL_GetTick>
 80025bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025be:	e00a      	b.n	80025d6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025c0:	f7fe fe00 	bl	80011c4 <HAL_GetTick>
 80025c4:	4602      	mov	r2, r0
 80025c6:	693b      	ldr	r3, [r7, #16]
 80025c8:	1ad3      	subs	r3, r2, r3
 80025ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d901      	bls.n	80025d6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80025d2:	2303      	movs	r3, #3
 80025d4:	e162      	b.n	800289c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025d6:	4b89      	ldr	r3, [pc, #548]	; (80027fc <HAL_RCC_OscConfig+0x778>)
 80025d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025dc:	f003 0302 	and.w	r3, r3, #2
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d0ed      	beq.n	80025c0 <HAL_RCC_OscConfig+0x53c>
 80025e4:	e015      	b.n	8002612 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025e6:	f7fe fded 	bl	80011c4 <HAL_GetTick>
 80025ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80025ec:	e00a      	b.n	8002604 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025ee:	f7fe fde9 	bl	80011c4 <HAL_GetTick>
 80025f2:	4602      	mov	r2, r0
 80025f4:	693b      	ldr	r3, [r7, #16]
 80025f6:	1ad3      	subs	r3, r2, r3
 80025f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d901      	bls.n	8002604 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002600:	2303      	movs	r3, #3
 8002602:	e14b      	b.n	800289c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002604:	4b7d      	ldr	r3, [pc, #500]	; (80027fc <HAL_RCC_OscConfig+0x778>)
 8002606:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800260a:	f003 0302 	and.w	r3, r3, #2
 800260e:	2b00      	cmp	r3, #0
 8002610:	d1ed      	bne.n	80025ee <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002612:	7ffb      	ldrb	r3, [r7, #31]
 8002614:	2b01      	cmp	r3, #1
 8002616:	d105      	bne.n	8002624 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002618:	4b78      	ldr	r3, [pc, #480]	; (80027fc <HAL_RCC_OscConfig+0x778>)
 800261a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800261c:	4a77      	ldr	r2, [pc, #476]	; (80027fc <HAL_RCC_OscConfig+0x778>)
 800261e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002622:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f003 0320 	and.w	r3, r3, #32
 800262c:	2b00      	cmp	r3, #0
 800262e:	d03c      	beq.n	80026aa <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002634:	2b00      	cmp	r3, #0
 8002636:	d01c      	beq.n	8002672 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002638:	4b70      	ldr	r3, [pc, #448]	; (80027fc <HAL_RCC_OscConfig+0x778>)
 800263a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800263e:	4a6f      	ldr	r2, [pc, #444]	; (80027fc <HAL_RCC_OscConfig+0x778>)
 8002640:	f043 0301 	orr.w	r3, r3, #1
 8002644:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002648:	f7fe fdbc 	bl	80011c4 <HAL_GetTick>
 800264c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800264e:	e008      	b.n	8002662 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002650:	f7fe fdb8 	bl	80011c4 <HAL_GetTick>
 8002654:	4602      	mov	r2, r0
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	1ad3      	subs	r3, r2, r3
 800265a:	2b02      	cmp	r3, #2
 800265c:	d901      	bls.n	8002662 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800265e:	2303      	movs	r3, #3
 8002660:	e11c      	b.n	800289c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002662:	4b66      	ldr	r3, [pc, #408]	; (80027fc <HAL_RCC_OscConfig+0x778>)
 8002664:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002668:	f003 0302 	and.w	r3, r3, #2
 800266c:	2b00      	cmp	r3, #0
 800266e:	d0ef      	beq.n	8002650 <HAL_RCC_OscConfig+0x5cc>
 8002670:	e01b      	b.n	80026aa <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002672:	4b62      	ldr	r3, [pc, #392]	; (80027fc <HAL_RCC_OscConfig+0x778>)
 8002674:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002678:	4a60      	ldr	r2, [pc, #384]	; (80027fc <HAL_RCC_OscConfig+0x778>)
 800267a:	f023 0301 	bic.w	r3, r3, #1
 800267e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002682:	f7fe fd9f 	bl	80011c4 <HAL_GetTick>
 8002686:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002688:	e008      	b.n	800269c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800268a:	f7fe fd9b 	bl	80011c4 <HAL_GetTick>
 800268e:	4602      	mov	r2, r0
 8002690:	693b      	ldr	r3, [r7, #16]
 8002692:	1ad3      	subs	r3, r2, r3
 8002694:	2b02      	cmp	r3, #2
 8002696:	d901      	bls.n	800269c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002698:	2303      	movs	r3, #3
 800269a:	e0ff      	b.n	800289c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800269c:	4b57      	ldr	r3, [pc, #348]	; (80027fc <HAL_RCC_OscConfig+0x778>)
 800269e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80026a2:	f003 0302 	and.w	r3, r3, #2
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d1ef      	bne.n	800268a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	f000 80f3 	beq.w	800289a <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026b8:	2b02      	cmp	r3, #2
 80026ba:	f040 80c9 	bne.w	8002850 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80026be:	4b4f      	ldr	r3, [pc, #316]	; (80027fc <HAL_RCC_OscConfig+0x778>)
 80026c0:	68db      	ldr	r3, [r3, #12]
 80026c2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	f003 0203 	and.w	r2, r3, #3
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026ce:	429a      	cmp	r2, r3
 80026d0:	d12c      	bne.n	800272c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80026d2:	697b      	ldr	r3, [r7, #20]
 80026d4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026dc:	3b01      	subs	r3, #1
 80026de:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80026e0:	429a      	cmp	r2, r3
 80026e2:	d123      	bne.n	800272c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026ee:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80026f0:	429a      	cmp	r2, r3
 80026f2:	d11b      	bne.n	800272c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80026f4:	697b      	ldr	r3, [r7, #20]
 80026f6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026fe:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002700:	429a      	cmp	r2, r3
 8002702:	d113      	bne.n	800272c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800270e:	085b      	lsrs	r3, r3, #1
 8002710:	3b01      	subs	r3, #1
 8002712:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002714:	429a      	cmp	r2, r3
 8002716:	d109      	bne.n	800272c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002722:	085b      	lsrs	r3, r3, #1
 8002724:	3b01      	subs	r3, #1
 8002726:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002728:	429a      	cmp	r2, r3
 800272a:	d06b      	beq.n	8002804 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800272c:	69bb      	ldr	r3, [r7, #24]
 800272e:	2b0c      	cmp	r3, #12
 8002730:	d062      	beq.n	80027f8 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002732:	4b32      	ldr	r3, [pc, #200]	; (80027fc <HAL_RCC_OscConfig+0x778>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800273a:	2b00      	cmp	r3, #0
 800273c:	d001      	beq.n	8002742 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	e0ac      	b.n	800289c <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002742:	4b2e      	ldr	r3, [pc, #184]	; (80027fc <HAL_RCC_OscConfig+0x778>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a2d      	ldr	r2, [pc, #180]	; (80027fc <HAL_RCC_OscConfig+0x778>)
 8002748:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800274c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800274e:	f7fe fd39 	bl	80011c4 <HAL_GetTick>
 8002752:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002754:	e008      	b.n	8002768 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002756:	f7fe fd35 	bl	80011c4 <HAL_GetTick>
 800275a:	4602      	mov	r2, r0
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	1ad3      	subs	r3, r2, r3
 8002760:	2b02      	cmp	r3, #2
 8002762:	d901      	bls.n	8002768 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002764:	2303      	movs	r3, #3
 8002766:	e099      	b.n	800289c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002768:	4b24      	ldr	r3, [pc, #144]	; (80027fc <HAL_RCC_OscConfig+0x778>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002770:	2b00      	cmp	r3, #0
 8002772:	d1f0      	bne.n	8002756 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002774:	4b21      	ldr	r3, [pc, #132]	; (80027fc <HAL_RCC_OscConfig+0x778>)
 8002776:	68da      	ldr	r2, [r3, #12]
 8002778:	4b21      	ldr	r3, [pc, #132]	; (8002800 <HAL_RCC_OscConfig+0x77c>)
 800277a:	4013      	ands	r3, r2
 800277c:	687a      	ldr	r2, [r7, #4]
 800277e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002780:	687a      	ldr	r2, [r7, #4]
 8002782:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002784:	3a01      	subs	r2, #1
 8002786:	0112      	lsls	r2, r2, #4
 8002788:	4311      	orrs	r1, r2
 800278a:	687a      	ldr	r2, [r7, #4]
 800278c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800278e:	0212      	lsls	r2, r2, #8
 8002790:	4311      	orrs	r1, r2
 8002792:	687a      	ldr	r2, [r7, #4]
 8002794:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002796:	0852      	lsrs	r2, r2, #1
 8002798:	3a01      	subs	r2, #1
 800279a:	0552      	lsls	r2, r2, #21
 800279c:	4311      	orrs	r1, r2
 800279e:	687a      	ldr	r2, [r7, #4]
 80027a0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80027a2:	0852      	lsrs	r2, r2, #1
 80027a4:	3a01      	subs	r2, #1
 80027a6:	0652      	lsls	r2, r2, #25
 80027a8:	4311      	orrs	r1, r2
 80027aa:	687a      	ldr	r2, [r7, #4]
 80027ac:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80027ae:	06d2      	lsls	r2, r2, #27
 80027b0:	430a      	orrs	r2, r1
 80027b2:	4912      	ldr	r1, [pc, #72]	; (80027fc <HAL_RCC_OscConfig+0x778>)
 80027b4:	4313      	orrs	r3, r2
 80027b6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80027b8:	4b10      	ldr	r3, [pc, #64]	; (80027fc <HAL_RCC_OscConfig+0x778>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a0f      	ldr	r2, [pc, #60]	; (80027fc <HAL_RCC_OscConfig+0x778>)
 80027be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027c2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80027c4:	4b0d      	ldr	r3, [pc, #52]	; (80027fc <HAL_RCC_OscConfig+0x778>)
 80027c6:	68db      	ldr	r3, [r3, #12]
 80027c8:	4a0c      	ldr	r2, [pc, #48]	; (80027fc <HAL_RCC_OscConfig+0x778>)
 80027ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027ce:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80027d0:	f7fe fcf8 	bl	80011c4 <HAL_GetTick>
 80027d4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027d6:	e008      	b.n	80027ea <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027d8:	f7fe fcf4 	bl	80011c4 <HAL_GetTick>
 80027dc:	4602      	mov	r2, r0
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	1ad3      	subs	r3, r2, r3
 80027e2:	2b02      	cmp	r3, #2
 80027e4:	d901      	bls.n	80027ea <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80027e6:	2303      	movs	r3, #3
 80027e8:	e058      	b.n	800289c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027ea:	4b04      	ldr	r3, [pc, #16]	; (80027fc <HAL_RCC_OscConfig+0x778>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d0f0      	beq.n	80027d8 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80027f6:	e050      	b.n	800289a <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80027f8:	2301      	movs	r3, #1
 80027fa:	e04f      	b.n	800289c <HAL_RCC_OscConfig+0x818>
 80027fc:	40021000 	.word	0x40021000
 8002800:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002804:	4b27      	ldr	r3, [pc, #156]	; (80028a4 <HAL_RCC_OscConfig+0x820>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800280c:	2b00      	cmp	r3, #0
 800280e:	d144      	bne.n	800289a <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002810:	4b24      	ldr	r3, [pc, #144]	; (80028a4 <HAL_RCC_OscConfig+0x820>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a23      	ldr	r2, [pc, #140]	; (80028a4 <HAL_RCC_OscConfig+0x820>)
 8002816:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800281a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800281c:	4b21      	ldr	r3, [pc, #132]	; (80028a4 <HAL_RCC_OscConfig+0x820>)
 800281e:	68db      	ldr	r3, [r3, #12]
 8002820:	4a20      	ldr	r2, [pc, #128]	; (80028a4 <HAL_RCC_OscConfig+0x820>)
 8002822:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002826:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002828:	f7fe fccc 	bl	80011c4 <HAL_GetTick>
 800282c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800282e:	e008      	b.n	8002842 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002830:	f7fe fcc8 	bl	80011c4 <HAL_GetTick>
 8002834:	4602      	mov	r2, r0
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	1ad3      	subs	r3, r2, r3
 800283a:	2b02      	cmp	r3, #2
 800283c:	d901      	bls.n	8002842 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800283e:	2303      	movs	r3, #3
 8002840:	e02c      	b.n	800289c <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002842:	4b18      	ldr	r3, [pc, #96]	; (80028a4 <HAL_RCC_OscConfig+0x820>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800284a:	2b00      	cmp	r3, #0
 800284c:	d0f0      	beq.n	8002830 <HAL_RCC_OscConfig+0x7ac>
 800284e:	e024      	b.n	800289a <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002850:	69bb      	ldr	r3, [r7, #24]
 8002852:	2b0c      	cmp	r3, #12
 8002854:	d01f      	beq.n	8002896 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002856:	4b13      	ldr	r3, [pc, #76]	; (80028a4 <HAL_RCC_OscConfig+0x820>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a12      	ldr	r2, [pc, #72]	; (80028a4 <HAL_RCC_OscConfig+0x820>)
 800285c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002860:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002862:	f7fe fcaf 	bl	80011c4 <HAL_GetTick>
 8002866:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002868:	e008      	b.n	800287c <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800286a:	f7fe fcab 	bl	80011c4 <HAL_GetTick>
 800286e:	4602      	mov	r2, r0
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	1ad3      	subs	r3, r2, r3
 8002874:	2b02      	cmp	r3, #2
 8002876:	d901      	bls.n	800287c <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8002878:	2303      	movs	r3, #3
 800287a:	e00f      	b.n	800289c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800287c:	4b09      	ldr	r3, [pc, #36]	; (80028a4 <HAL_RCC_OscConfig+0x820>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002884:	2b00      	cmp	r3, #0
 8002886:	d1f0      	bne.n	800286a <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002888:	4b06      	ldr	r3, [pc, #24]	; (80028a4 <HAL_RCC_OscConfig+0x820>)
 800288a:	68da      	ldr	r2, [r3, #12]
 800288c:	4905      	ldr	r1, [pc, #20]	; (80028a4 <HAL_RCC_OscConfig+0x820>)
 800288e:	4b06      	ldr	r3, [pc, #24]	; (80028a8 <HAL_RCC_OscConfig+0x824>)
 8002890:	4013      	ands	r3, r2
 8002892:	60cb      	str	r3, [r1, #12]
 8002894:	e001      	b.n	800289a <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	e000      	b.n	800289c <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800289a:	2300      	movs	r3, #0
}
 800289c:	4618      	mov	r0, r3
 800289e:	3720      	adds	r7, #32
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bd80      	pop	{r7, pc}
 80028a4:	40021000 	.word	0x40021000
 80028a8:	feeefffc 	.word	0xfeeefffc

080028ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b084      	sub	sp, #16
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
 80028b4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d101      	bne.n	80028c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028bc:	2301      	movs	r3, #1
 80028be:	e0e7      	b.n	8002a90 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80028c0:	4b75      	ldr	r3, [pc, #468]	; (8002a98 <HAL_RCC_ClockConfig+0x1ec>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f003 0307 	and.w	r3, r3, #7
 80028c8:	683a      	ldr	r2, [r7, #0]
 80028ca:	429a      	cmp	r2, r3
 80028cc:	d910      	bls.n	80028f0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028ce:	4b72      	ldr	r3, [pc, #456]	; (8002a98 <HAL_RCC_ClockConfig+0x1ec>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f023 0207 	bic.w	r2, r3, #7
 80028d6:	4970      	ldr	r1, [pc, #448]	; (8002a98 <HAL_RCC_ClockConfig+0x1ec>)
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	4313      	orrs	r3, r2
 80028dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028de:	4b6e      	ldr	r3, [pc, #440]	; (8002a98 <HAL_RCC_ClockConfig+0x1ec>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f003 0307 	and.w	r3, r3, #7
 80028e6:	683a      	ldr	r2, [r7, #0]
 80028e8:	429a      	cmp	r2, r3
 80028ea:	d001      	beq.n	80028f0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80028ec:	2301      	movs	r3, #1
 80028ee:	e0cf      	b.n	8002a90 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f003 0302 	and.w	r3, r3, #2
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d010      	beq.n	800291e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	689a      	ldr	r2, [r3, #8]
 8002900:	4b66      	ldr	r3, [pc, #408]	; (8002a9c <HAL_RCC_ClockConfig+0x1f0>)
 8002902:	689b      	ldr	r3, [r3, #8]
 8002904:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002908:	429a      	cmp	r2, r3
 800290a:	d908      	bls.n	800291e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800290c:	4b63      	ldr	r3, [pc, #396]	; (8002a9c <HAL_RCC_ClockConfig+0x1f0>)
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	4960      	ldr	r1, [pc, #384]	; (8002a9c <HAL_RCC_ClockConfig+0x1f0>)
 800291a:	4313      	orrs	r3, r2
 800291c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 0301 	and.w	r3, r3, #1
 8002926:	2b00      	cmp	r3, #0
 8002928:	d04c      	beq.n	80029c4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	2b03      	cmp	r3, #3
 8002930:	d107      	bne.n	8002942 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002932:	4b5a      	ldr	r3, [pc, #360]	; (8002a9c <HAL_RCC_ClockConfig+0x1f0>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800293a:	2b00      	cmp	r3, #0
 800293c:	d121      	bne.n	8002982 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800293e:	2301      	movs	r3, #1
 8002940:	e0a6      	b.n	8002a90 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	2b02      	cmp	r3, #2
 8002948:	d107      	bne.n	800295a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800294a:	4b54      	ldr	r3, [pc, #336]	; (8002a9c <HAL_RCC_ClockConfig+0x1f0>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002952:	2b00      	cmp	r3, #0
 8002954:	d115      	bne.n	8002982 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002956:	2301      	movs	r3, #1
 8002958:	e09a      	b.n	8002a90 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d107      	bne.n	8002972 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002962:	4b4e      	ldr	r3, [pc, #312]	; (8002a9c <HAL_RCC_ClockConfig+0x1f0>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f003 0302 	and.w	r3, r3, #2
 800296a:	2b00      	cmp	r3, #0
 800296c:	d109      	bne.n	8002982 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	e08e      	b.n	8002a90 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002972:	4b4a      	ldr	r3, [pc, #296]	; (8002a9c <HAL_RCC_ClockConfig+0x1f0>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800297a:	2b00      	cmp	r3, #0
 800297c:	d101      	bne.n	8002982 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800297e:	2301      	movs	r3, #1
 8002980:	e086      	b.n	8002a90 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002982:	4b46      	ldr	r3, [pc, #280]	; (8002a9c <HAL_RCC_ClockConfig+0x1f0>)
 8002984:	689b      	ldr	r3, [r3, #8]
 8002986:	f023 0203 	bic.w	r2, r3, #3
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	4943      	ldr	r1, [pc, #268]	; (8002a9c <HAL_RCC_ClockConfig+0x1f0>)
 8002990:	4313      	orrs	r3, r2
 8002992:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002994:	f7fe fc16 	bl	80011c4 <HAL_GetTick>
 8002998:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800299a:	e00a      	b.n	80029b2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800299c:	f7fe fc12 	bl	80011c4 <HAL_GetTick>
 80029a0:	4602      	mov	r2, r0
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	1ad3      	subs	r3, r2, r3
 80029a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d901      	bls.n	80029b2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80029ae:	2303      	movs	r3, #3
 80029b0:	e06e      	b.n	8002a90 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029b2:	4b3a      	ldr	r3, [pc, #232]	; (8002a9c <HAL_RCC_ClockConfig+0x1f0>)
 80029b4:	689b      	ldr	r3, [r3, #8]
 80029b6:	f003 020c 	and.w	r2, r3, #12
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	009b      	lsls	r3, r3, #2
 80029c0:	429a      	cmp	r2, r3
 80029c2:	d1eb      	bne.n	800299c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f003 0302 	and.w	r3, r3, #2
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d010      	beq.n	80029f2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	689a      	ldr	r2, [r3, #8]
 80029d4:	4b31      	ldr	r3, [pc, #196]	; (8002a9c <HAL_RCC_ClockConfig+0x1f0>)
 80029d6:	689b      	ldr	r3, [r3, #8]
 80029d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80029dc:	429a      	cmp	r2, r3
 80029de:	d208      	bcs.n	80029f2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029e0:	4b2e      	ldr	r3, [pc, #184]	; (8002a9c <HAL_RCC_ClockConfig+0x1f0>)
 80029e2:	689b      	ldr	r3, [r3, #8]
 80029e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	492b      	ldr	r1, [pc, #172]	; (8002a9c <HAL_RCC_ClockConfig+0x1f0>)
 80029ee:	4313      	orrs	r3, r2
 80029f0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80029f2:	4b29      	ldr	r3, [pc, #164]	; (8002a98 <HAL_RCC_ClockConfig+0x1ec>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 0307 	and.w	r3, r3, #7
 80029fa:	683a      	ldr	r2, [r7, #0]
 80029fc:	429a      	cmp	r2, r3
 80029fe:	d210      	bcs.n	8002a22 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a00:	4b25      	ldr	r3, [pc, #148]	; (8002a98 <HAL_RCC_ClockConfig+0x1ec>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f023 0207 	bic.w	r2, r3, #7
 8002a08:	4923      	ldr	r1, [pc, #140]	; (8002a98 <HAL_RCC_ClockConfig+0x1ec>)
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a10:	4b21      	ldr	r3, [pc, #132]	; (8002a98 <HAL_RCC_ClockConfig+0x1ec>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f003 0307 	and.w	r3, r3, #7
 8002a18:	683a      	ldr	r2, [r7, #0]
 8002a1a:	429a      	cmp	r2, r3
 8002a1c:	d001      	beq.n	8002a22 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e036      	b.n	8002a90 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f003 0304 	and.w	r3, r3, #4
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d008      	beq.n	8002a40 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a2e:	4b1b      	ldr	r3, [pc, #108]	; (8002a9c <HAL_RCC_ClockConfig+0x1f0>)
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	68db      	ldr	r3, [r3, #12]
 8002a3a:	4918      	ldr	r1, [pc, #96]	; (8002a9c <HAL_RCC_ClockConfig+0x1f0>)
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f003 0308 	and.w	r3, r3, #8
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d009      	beq.n	8002a60 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a4c:	4b13      	ldr	r3, [pc, #76]	; (8002a9c <HAL_RCC_ClockConfig+0x1f0>)
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	691b      	ldr	r3, [r3, #16]
 8002a58:	00db      	lsls	r3, r3, #3
 8002a5a:	4910      	ldr	r1, [pc, #64]	; (8002a9c <HAL_RCC_ClockConfig+0x1f0>)
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002a60:	f000 f824 	bl	8002aac <HAL_RCC_GetSysClockFreq>
 8002a64:	4602      	mov	r2, r0
 8002a66:	4b0d      	ldr	r3, [pc, #52]	; (8002a9c <HAL_RCC_ClockConfig+0x1f0>)
 8002a68:	689b      	ldr	r3, [r3, #8]
 8002a6a:	091b      	lsrs	r3, r3, #4
 8002a6c:	f003 030f 	and.w	r3, r3, #15
 8002a70:	490b      	ldr	r1, [pc, #44]	; (8002aa0 <HAL_RCC_ClockConfig+0x1f4>)
 8002a72:	5ccb      	ldrb	r3, [r1, r3]
 8002a74:	f003 031f 	and.w	r3, r3, #31
 8002a78:	fa22 f303 	lsr.w	r3, r2, r3
 8002a7c:	4a09      	ldr	r2, [pc, #36]	; (8002aa4 <HAL_RCC_ClockConfig+0x1f8>)
 8002a7e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002a80:	4b09      	ldr	r3, [pc, #36]	; (8002aa8 <HAL_RCC_ClockConfig+0x1fc>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4618      	mov	r0, r3
 8002a86:	f7fe fb4d 	bl	8001124 <HAL_InitTick>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	72fb      	strb	r3, [r7, #11]

  return status;
 8002a8e:	7afb      	ldrb	r3, [r7, #11]
}
 8002a90:	4618      	mov	r0, r3
 8002a92:	3710      	adds	r7, #16
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bd80      	pop	{r7, pc}
 8002a98:	40022000 	.word	0x40022000
 8002a9c:	40021000 	.word	0x40021000
 8002aa0:	08004b40 	.word	0x08004b40
 8002aa4:	20000000 	.word	0x20000000
 8002aa8:	20000004 	.word	0x20000004

08002aac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002aac:	b480      	push	{r7}
 8002aae:	b089      	sub	sp, #36	; 0x24
 8002ab0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	61fb      	str	r3, [r7, #28]
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002aba:	4b3e      	ldr	r3, [pc, #248]	; (8002bb4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002abc:	689b      	ldr	r3, [r3, #8]
 8002abe:	f003 030c 	and.w	r3, r3, #12
 8002ac2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ac4:	4b3b      	ldr	r3, [pc, #236]	; (8002bb4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ac6:	68db      	ldr	r3, [r3, #12]
 8002ac8:	f003 0303 	and.w	r3, r3, #3
 8002acc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d005      	beq.n	8002ae0 <HAL_RCC_GetSysClockFreq+0x34>
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	2b0c      	cmp	r3, #12
 8002ad8:	d121      	bne.n	8002b1e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	2b01      	cmp	r3, #1
 8002ade:	d11e      	bne.n	8002b1e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002ae0:	4b34      	ldr	r3, [pc, #208]	; (8002bb4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f003 0308 	and.w	r3, r3, #8
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d107      	bne.n	8002afc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002aec:	4b31      	ldr	r3, [pc, #196]	; (8002bb4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002aee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002af2:	0a1b      	lsrs	r3, r3, #8
 8002af4:	f003 030f 	and.w	r3, r3, #15
 8002af8:	61fb      	str	r3, [r7, #28]
 8002afa:	e005      	b.n	8002b08 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002afc:	4b2d      	ldr	r3, [pc, #180]	; (8002bb4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	091b      	lsrs	r3, r3, #4
 8002b02:	f003 030f 	and.w	r3, r3, #15
 8002b06:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002b08:	4a2b      	ldr	r2, [pc, #172]	; (8002bb8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002b0a:	69fb      	ldr	r3, [r7, #28]
 8002b0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b10:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002b12:	693b      	ldr	r3, [r7, #16]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d10d      	bne.n	8002b34 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002b18:	69fb      	ldr	r3, [r7, #28]
 8002b1a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002b1c:	e00a      	b.n	8002b34 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002b1e:	693b      	ldr	r3, [r7, #16]
 8002b20:	2b04      	cmp	r3, #4
 8002b22:	d102      	bne.n	8002b2a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002b24:	4b25      	ldr	r3, [pc, #148]	; (8002bbc <HAL_RCC_GetSysClockFreq+0x110>)
 8002b26:	61bb      	str	r3, [r7, #24]
 8002b28:	e004      	b.n	8002b34 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	2b08      	cmp	r3, #8
 8002b2e:	d101      	bne.n	8002b34 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002b30:	4b23      	ldr	r3, [pc, #140]	; (8002bc0 <HAL_RCC_GetSysClockFreq+0x114>)
 8002b32:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002b34:	693b      	ldr	r3, [r7, #16]
 8002b36:	2b0c      	cmp	r3, #12
 8002b38:	d134      	bne.n	8002ba4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002b3a:	4b1e      	ldr	r3, [pc, #120]	; (8002bb4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b3c:	68db      	ldr	r3, [r3, #12]
 8002b3e:	f003 0303 	and.w	r3, r3, #3
 8002b42:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	2b02      	cmp	r3, #2
 8002b48:	d003      	beq.n	8002b52 <HAL_RCC_GetSysClockFreq+0xa6>
 8002b4a:	68bb      	ldr	r3, [r7, #8]
 8002b4c:	2b03      	cmp	r3, #3
 8002b4e:	d003      	beq.n	8002b58 <HAL_RCC_GetSysClockFreq+0xac>
 8002b50:	e005      	b.n	8002b5e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002b52:	4b1a      	ldr	r3, [pc, #104]	; (8002bbc <HAL_RCC_GetSysClockFreq+0x110>)
 8002b54:	617b      	str	r3, [r7, #20]
      break;
 8002b56:	e005      	b.n	8002b64 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002b58:	4b19      	ldr	r3, [pc, #100]	; (8002bc0 <HAL_RCC_GetSysClockFreq+0x114>)
 8002b5a:	617b      	str	r3, [r7, #20]
      break;
 8002b5c:	e002      	b.n	8002b64 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002b5e:	69fb      	ldr	r3, [r7, #28]
 8002b60:	617b      	str	r3, [r7, #20]
      break;
 8002b62:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002b64:	4b13      	ldr	r3, [pc, #76]	; (8002bb4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b66:	68db      	ldr	r3, [r3, #12]
 8002b68:	091b      	lsrs	r3, r3, #4
 8002b6a:	f003 0307 	and.w	r3, r3, #7
 8002b6e:	3301      	adds	r3, #1
 8002b70:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002b72:	4b10      	ldr	r3, [pc, #64]	; (8002bb4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b74:	68db      	ldr	r3, [r3, #12]
 8002b76:	0a1b      	lsrs	r3, r3, #8
 8002b78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002b7c:	697a      	ldr	r2, [r7, #20]
 8002b7e:	fb03 f202 	mul.w	r2, r3, r2
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b88:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002b8a:	4b0a      	ldr	r3, [pc, #40]	; (8002bb4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b8c:	68db      	ldr	r3, [r3, #12]
 8002b8e:	0e5b      	lsrs	r3, r3, #25
 8002b90:	f003 0303 	and.w	r3, r3, #3
 8002b94:	3301      	adds	r3, #1
 8002b96:	005b      	lsls	r3, r3, #1
 8002b98:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002b9a:	697a      	ldr	r2, [r7, #20]
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ba2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002ba4:	69bb      	ldr	r3, [r7, #24]
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	3724      	adds	r7, #36	; 0x24
 8002baa:	46bd      	mov	sp, r7
 8002bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb0:	4770      	bx	lr
 8002bb2:	bf00      	nop
 8002bb4:	40021000 	.word	0x40021000
 8002bb8:	08004b58 	.word	0x08004b58
 8002bbc:	00f42400 	.word	0x00f42400
 8002bc0:	007a1200 	.word	0x007a1200

08002bc4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002bc8:	4b03      	ldr	r3, [pc, #12]	; (8002bd8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002bca:	681b      	ldr	r3, [r3, #0]
}
 8002bcc:	4618      	mov	r0, r3
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd4:	4770      	bx	lr
 8002bd6:	bf00      	nop
 8002bd8:	20000000 	.word	0x20000000

08002bdc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002be0:	f7ff fff0 	bl	8002bc4 <HAL_RCC_GetHCLKFreq>
 8002be4:	4602      	mov	r2, r0
 8002be6:	4b06      	ldr	r3, [pc, #24]	; (8002c00 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	0a1b      	lsrs	r3, r3, #8
 8002bec:	f003 0307 	and.w	r3, r3, #7
 8002bf0:	4904      	ldr	r1, [pc, #16]	; (8002c04 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002bf2:	5ccb      	ldrb	r3, [r1, r3]
 8002bf4:	f003 031f 	and.w	r3, r3, #31
 8002bf8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	bd80      	pop	{r7, pc}
 8002c00:	40021000 	.word	0x40021000
 8002c04:	08004b50 	.word	0x08004b50

08002c08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002c0c:	f7ff ffda 	bl	8002bc4 <HAL_RCC_GetHCLKFreq>
 8002c10:	4602      	mov	r2, r0
 8002c12:	4b06      	ldr	r3, [pc, #24]	; (8002c2c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	0adb      	lsrs	r3, r3, #11
 8002c18:	f003 0307 	and.w	r3, r3, #7
 8002c1c:	4904      	ldr	r1, [pc, #16]	; (8002c30 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002c1e:	5ccb      	ldrb	r3, [r1, r3]
 8002c20:	f003 031f 	and.w	r3, r3, #31
 8002c24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	bd80      	pop	{r7, pc}
 8002c2c:	40021000 	.word	0x40021000
 8002c30:	08004b50 	.word	0x08004b50

08002c34 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b086      	sub	sp, #24
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002c40:	4b2a      	ldr	r3, [pc, #168]	; (8002cec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d003      	beq.n	8002c54 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002c4c:	f7ff f96e 	bl	8001f2c <HAL_PWREx_GetVoltageRange>
 8002c50:	6178      	str	r0, [r7, #20]
 8002c52:	e014      	b.n	8002c7e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002c54:	4b25      	ldr	r3, [pc, #148]	; (8002cec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c58:	4a24      	ldr	r2, [pc, #144]	; (8002cec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c5e:	6593      	str	r3, [r2, #88]	; 0x58
 8002c60:	4b22      	ldr	r3, [pc, #136]	; (8002cec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c68:	60fb      	str	r3, [r7, #12]
 8002c6a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002c6c:	f7ff f95e 	bl	8001f2c <HAL_PWREx_GetVoltageRange>
 8002c70:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002c72:	4b1e      	ldr	r3, [pc, #120]	; (8002cec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c76:	4a1d      	ldr	r2, [pc, #116]	; (8002cec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c78:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c7c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c7e:	697b      	ldr	r3, [r7, #20]
 8002c80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c84:	d10b      	bne.n	8002c9e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2b80      	cmp	r3, #128	; 0x80
 8002c8a:	d919      	bls.n	8002cc0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2ba0      	cmp	r3, #160	; 0xa0
 8002c90:	d902      	bls.n	8002c98 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002c92:	2302      	movs	r3, #2
 8002c94:	613b      	str	r3, [r7, #16]
 8002c96:	e013      	b.n	8002cc0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002c98:	2301      	movs	r3, #1
 8002c9a:	613b      	str	r3, [r7, #16]
 8002c9c:	e010      	b.n	8002cc0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2b80      	cmp	r3, #128	; 0x80
 8002ca2:	d902      	bls.n	8002caa <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002ca4:	2303      	movs	r3, #3
 8002ca6:	613b      	str	r3, [r7, #16]
 8002ca8:	e00a      	b.n	8002cc0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2b80      	cmp	r3, #128	; 0x80
 8002cae:	d102      	bne.n	8002cb6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002cb0:	2302      	movs	r3, #2
 8002cb2:	613b      	str	r3, [r7, #16]
 8002cb4:	e004      	b.n	8002cc0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2b70      	cmp	r3, #112	; 0x70
 8002cba:	d101      	bne.n	8002cc0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002cc0:	4b0b      	ldr	r3, [pc, #44]	; (8002cf0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f023 0207 	bic.w	r2, r3, #7
 8002cc8:	4909      	ldr	r1, [pc, #36]	; (8002cf0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002cd0:	4b07      	ldr	r3, [pc, #28]	; (8002cf0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f003 0307 	and.w	r3, r3, #7
 8002cd8:	693a      	ldr	r2, [r7, #16]
 8002cda:	429a      	cmp	r2, r3
 8002cdc:	d001      	beq.n	8002ce2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e000      	b.n	8002ce4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002ce2:	2300      	movs	r3, #0
}
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	3718      	adds	r7, #24
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}
 8002cec:	40021000 	.word	0x40021000
 8002cf0:	40022000 	.word	0x40022000

08002cf4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b086      	sub	sp, #24
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002d00:	2300      	movs	r3, #0
 8002d02:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d031      	beq.n	8002d74 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d14:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002d18:	d01a      	beq.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8002d1a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002d1e:	d814      	bhi.n	8002d4a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d009      	beq.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002d24:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002d28:	d10f      	bne.n	8002d4a <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8002d2a:	4b5d      	ldr	r3, [pc, #372]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002d2c:	68db      	ldr	r3, [r3, #12]
 8002d2e:	4a5c      	ldr	r2, [pc, #368]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002d30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d34:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002d36:	e00c      	b.n	8002d52 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	3304      	adds	r3, #4
 8002d3c:	2100      	movs	r1, #0
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f000 f9de 	bl	8003100 <RCCEx_PLLSAI1_Config>
 8002d44:	4603      	mov	r3, r0
 8002d46:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002d48:	e003      	b.n	8002d52 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	74fb      	strb	r3, [r7, #19]
      break;
 8002d4e:	e000      	b.n	8002d52 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002d50:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d52:	7cfb      	ldrb	r3, [r7, #19]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d10b      	bne.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002d58:	4b51      	ldr	r3, [pc, #324]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002d5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d5e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d66:	494e      	ldr	r1, [pc, #312]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002d6e:	e001      	b.n	8002d74 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d70:	7cfb      	ldrb	r3, [r7, #19]
 8002d72:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	f000 809e 	beq.w	8002ebe <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d82:	2300      	movs	r3, #0
 8002d84:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002d86:	4b46      	ldr	r3, [pc, #280]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002d88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d101      	bne.n	8002d96 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8002d92:	2301      	movs	r3, #1
 8002d94:	e000      	b.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8002d96:	2300      	movs	r3, #0
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d00d      	beq.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d9c:	4b40      	ldr	r3, [pc, #256]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002d9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002da0:	4a3f      	ldr	r2, [pc, #252]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002da2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002da6:	6593      	str	r3, [r2, #88]	; 0x58
 8002da8:	4b3d      	ldr	r3, [pc, #244]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002daa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002db0:	60bb      	str	r3, [r7, #8]
 8002db2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002db4:	2301      	movs	r3, #1
 8002db6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002db8:	4b3a      	ldr	r3, [pc, #232]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a39      	ldr	r2, [pc, #228]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002dbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dc2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002dc4:	f7fe f9fe 	bl	80011c4 <HAL_GetTick>
 8002dc8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002dca:	e009      	b.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dcc:	f7fe f9fa 	bl	80011c4 <HAL_GetTick>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	1ad3      	subs	r3, r2, r3
 8002dd6:	2b02      	cmp	r3, #2
 8002dd8:	d902      	bls.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8002dda:	2303      	movs	r3, #3
 8002ddc:	74fb      	strb	r3, [r7, #19]
        break;
 8002dde:	e005      	b.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002de0:	4b30      	ldr	r3, [pc, #192]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d0ef      	beq.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002dec:	7cfb      	ldrb	r3, [r7, #19]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d15a      	bne.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002df2:	4b2b      	ldr	r3, [pc, #172]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002df4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002df8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002dfc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d01e      	beq.n	8002e42 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e08:	697a      	ldr	r2, [r7, #20]
 8002e0a:	429a      	cmp	r2, r3
 8002e0c:	d019      	beq.n	8002e42 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002e0e:	4b24      	ldr	r3, [pc, #144]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e18:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002e1a:	4b21      	ldr	r3, [pc, #132]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e20:	4a1f      	ldr	r2, [pc, #124]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e26:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002e2a:	4b1d      	ldr	r3, [pc, #116]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e30:	4a1b      	ldr	r2, [pc, #108]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e36:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002e3a:	4a19      	ldr	r2, [pc, #100]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e3c:	697b      	ldr	r3, [r7, #20]
 8002e3e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002e42:	697b      	ldr	r3, [r7, #20]
 8002e44:	f003 0301 	and.w	r3, r3, #1
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d016      	beq.n	8002e7a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e4c:	f7fe f9ba 	bl	80011c4 <HAL_GetTick>
 8002e50:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e52:	e00b      	b.n	8002e6c <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e54:	f7fe f9b6 	bl	80011c4 <HAL_GetTick>
 8002e58:	4602      	mov	r2, r0
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	1ad3      	subs	r3, r2, r3
 8002e5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d902      	bls.n	8002e6c <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8002e66:	2303      	movs	r3, #3
 8002e68:	74fb      	strb	r3, [r7, #19]
            break;
 8002e6a:	e006      	b.n	8002e7a <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e6c:	4b0c      	ldr	r3, [pc, #48]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e72:	f003 0302 	and.w	r3, r3, #2
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d0ec      	beq.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8002e7a:	7cfb      	ldrb	r3, [r7, #19]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d10b      	bne.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e80:	4b07      	ldr	r3, [pc, #28]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e86:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e8e:	4904      	ldr	r1, [pc, #16]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e90:	4313      	orrs	r3, r2
 8002e92:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002e96:	e009      	b.n	8002eac <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002e98:	7cfb      	ldrb	r3, [r7, #19]
 8002e9a:	74bb      	strb	r3, [r7, #18]
 8002e9c:	e006      	b.n	8002eac <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8002e9e:	bf00      	nop
 8002ea0:	40021000 	.word	0x40021000
 8002ea4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ea8:	7cfb      	ldrb	r3, [r7, #19]
 8002eaa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002eac:	7c7b      	ldrb	r3, [r7, #17]
 8002eae:	2b01      	cmp	r3, #1
 8002eb0:	d105      	bne.n	8002ebe <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002eb2:	4b8a      	ldr	r3, [pc, #552]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002eb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eb6:	4a89      	ldr	r2, [pc, #548]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002eb8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ebc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f003 0301 	and.w	r3, r3, #1
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d00a      	beq.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002eca:	4b84      	ldr	r3, [pc, #528]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002ecc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ed0:	f023 0203 	bic.w	r2, r3, #3
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6a1b      	ldr	r3, [r3, #32]
 8002ed8:	4980      	ldr	r1, [pc, #512]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002eda:	4313      	orrs	r3, r2
 8002edc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f003 0302 	and.w	r3, r3, #2
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d00a      	beq.n	8002f02 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002eec:	4b7b      	ldr	r3, [pc, #492]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002eee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ef2:	f023 020c 	bic.w	r2, r3, #12
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002efa:	4978      	ldr	r1, [pc, #480]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002efc:	4313      	orrs	r3, r2
 8002efe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f003 0320 	and.w	r3, r3, #32
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d00a      	beq.n	8002f24 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002f0e:	4b73      	ldr	r3, [pc, #460]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f14:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f1c:	496f      	ldr	r1, [pc, #444]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d00a      	beq.n	8002f46 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002f30:	4b6a      	ldr	r3, [pc, #424]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f36:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f3e:	4967      	ldr	r1, [pc, #412]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f40:	4313      	orrs	r3, r2
 8002f42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d00a      	beq.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002f52:	4b62      	ldr	r3, [pc, #392]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f58:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f60:	495e      	ldr	r1, [pc, #376]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f62:	4313      	orrs	r3, r2
 8002f64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d00a      	beq.n	8002f8a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002f74:	4b59      	ldr	r3, [pc, #356]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f7a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f82:	4956      	ldr	r1, [pc, #344]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f84:	4313      	orrs	r3, r2
 8002f86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d00a      	beq.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002f96:	4b51      	ldr	r3, [pc, #324]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f9c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fa4:	494d      	ldr	r1, [pc, #308]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d028      	beq.n	800300a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002fb8:	4b48      	ldr	r3, [pc, #288]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002fba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fbe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc6:	4945      	ldr	r1, [pc, #276]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002fd6:	d106      	bne.n	8002fe6 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002fd8:	4b40      	ldr	r3, [pc, #256]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002fda:	68db      	ldr	r3, [r3, #12]
 8002fdc:	4a3f      	ldr	r2, [pc, #252]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002fde:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002fe2:	60d3      	str	r3, [r2, #12]
 8002fe4:	e011      	b.n	800300a <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fea:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002fee:	d10c      	bne.n	800300a <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	3304      	adds	r3, #4
 8002ff4:	2101      	movs	r1, #1
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f000 f882 	bl	8003100 <RCCEx_PLLSAI1_Config>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003000:	7cfb      	ldrb	r3, [r7, #19]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d001      	beq.n	800300a <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8003006:	7cfb      	ldrb	r3, [r7, #19]
 8003008:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003012:	2b00      	cmp	r3, #0
 8003014:	d028      	beq.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003016:	4b31      	ldr	r3, [pc, #196]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003018:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800301c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003024:	492d      	ldr	r1, [pc, #180]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003026:	4313      	orrs	r3, r2
 8003028:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003030:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003034:	d106      	bne.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003036:	4b29      	ldr	r3, [pc, #164]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003038:	68db      	ldr	r3, [r3, #12]
 800303a:	4a28      	ldr	r2, [pc, #160]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800303c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003040:	60d3      	str	r3, [r2, #12]
 8003042:	e011      	b.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003048:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800304c:	d10c      	bne.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	3304      	adds	r3, #4
 8003052:	2101      	movs	r1, #1
 8003054:	4618      	mov	r0, r3
 8003056:	f000 f853 	bl	8003100 <RCCEx_PLLSAI1_Config>
 800305a:	4603      	mov	r3, r0
 800305c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800305e:	7cfb      	ldrb	r3, [r7, #19]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d001      	beq.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8003064:	7cfb      	ldrb	r3, [r7, #19]
 8003066:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003070:	2b00      	cmp	r3, #0
 8003072:	d01c      	beq.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003074:	4b19      	ldr	r3, [pc, #100]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003076:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800307a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003082:	4916      	ldr	r1, [pc, #88]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003084:	4313      	orrs	r3, r2
 8003086:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800308e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003092:	d10c      	bne.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	3304      	adds	r3, #4
 8003098:	2102      	movs	r1, #2
 800309a:	4618      	mov	r0, r3
 800309c:	f000 f830 	bl	8003100 <RCCEx_PLLSAI1_Config>
 80030a0:	4603      	mov	r3, r0
 80030a2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80030a4:	7cfb      	ldrb	r3, [r7, #19]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d001      	beq.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 80030aa:	7cfb      	ldrb	r3, [r7, #19]
 80030ac:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d00a      	beq.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80030ba:	4b08      	ldr	r3, [pc, #32]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80030bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030c0:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030c8:	4904      	ldr	r1, [pc, #16]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80030ca:	4313      	orrs	r3, r2
 80030cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80030d0:	7cbb      	ldrb	r3, [r7, #18]
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	3718      	adds	r7, #24
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}
 80030da:	bf00      	nop
 80030dc:	40021000 	.word	0x40021000

080030e0 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80030e0:	b480      	push	{r7}
 80030e2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80030e4:	4b05      	ldr	r3, [pc, #20]	; (80030fc <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a04      	ldr	r2, [pc, #16]	; (80030fc <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80030ea:	f043 0304 	orr.w	r3, r3, #4
 80030ee:	6013      	str	r3, [r2, #0]
}
 80030f0:	bf00      	nop
 80030f2:	46bd      	mov	sp, r7
 80030f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f8:	4770      	bx	lr
 80030fa:	bf00      	nop
 80030fc:	40021000 	.word	0x40021000

08003100 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b084      	sub	sp, #16
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
 8003108:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800310a:	2300      	movs	r3, #0
 800310c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800310e:	4b74      	ldr	r3, [pc, #464]	; (80032e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003110:	68db      	ldr	r3, [r3, #12]
 8003112:	f003 0303 	and.w	r3, r3, #3
 8003116:	2b00      	cmp	r3, #0
 8003118:	d018      	beq.n	800314c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800311a:	4b71      	ldr	r3, [pc, #452]	; (80032e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800311c:	68db      	ldr	r3, [r3, #12]
 800311e:	f003 0203 	and.w	r2, r3, #3
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	429a      	cmp	r2, r3
 8003128:	d10d      	bne.n	8003146 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
       ||
 800312e:	2b00      	cmp	r3, #0
 8003130:	d009      	beq.n	8003146 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003132:	4b6b      	ldr	r3, [pc, #428]	; (80032e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003134:	68db      	ldr	r3, [r3, #12]
 8003136:	091b      	lsrs	r3, r3, #4
 8003138:	f003 0307 	and.w	r3, r3, #7
 800313c:	1c5a      	adds	r2, r3, #1
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	685b      	ldr	r3, [r3, #4]
       ||
 8003142:	429a      	cmp	r2, r3
 8003144:	d047      	beq.n	80031d6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	73fb      	strb	r3, [r7, #15]
 800314a:	e044      	b.n	80031d6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	2b03      	cmp	r3, #3
 8003152:	d018      	beq.n	8003186 <RCCEx_PLLSAI1_Config+0x86>
 8003154:	2b03      	cmp	r3, #3
 8003156:	d825      	bhi.n	80031a4 <RCCEx_PLLSAI1_Config+0xa4>
 8003158:	2b01      	cmp	r3, #1
 800315a:	d002      	beq.n	8003162 <RCCEx_PLLSAI1_Config+0x62>
 800315c:	2b02      	cmp	r3, #2
 800315e:	d009      	beq.n	8003174 <RCCEx_PLLSAI1_Config+0x74>
 8003160:	e020      	b.n	80031a4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003162:	4b5f      	ldr	r3, [pc, #380]	; (80032e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f003 0302 	and.w	r3, r3, #2
 800316a:	2b00      	cmp	r3, #0
 800316c:	d11d      	bne.n	80031aa <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003172:	e01a      	b.n	80031aa <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003174:	4b5a      	ldr	r3, [pc, #360]	; (80032e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800317c:	2b00      	cmp	r3, #0
 800317e:	d116      	bne.n	80031ae <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003180:	2301      	movs	r3, #1
 8003182:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003184:	e013      	b.n	80031ae <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003186:	4b56      	ldr	r3, [pc, #344]	; (80032e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800318e:	2b00      	cmp	r3, #0
 8003190:	d10f      	bne.n	80031b2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003192:	4b53      	ldr	r3, [pc, #332]	; (80032e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800319a:	2b00      	cmp	r3, #0
 800319c:	d109      	bne.n	80031b2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800319e:	2301      	movs	r3, #1
 80031a0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80031a2:	e006      	b.n	80031b2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80031a4:	2301      	movs	r3, #1
 80031a6:	73fb      	strb	r3, [r7, #15]
      break;
 80031a8:	e004      	b.n	80031b4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80031aa:	bf00      	nop
 80031ac:	e002      	b.n	80031b4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80031ae:	bf00      	nop
 80031b0:	e000      	b.n	80031b4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80031b2:	bf00      	nop
    }

    if(status == HAL_OK)
 80031b4:	7bfb      	ldrb	r3, [r7, #15]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d10d      	bne.n	80031d6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80031ba:	4b49      	ldr	r3, [pc, #292]	; (80032e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80031bc:	68db      	ldr	r3, [r3, #12]
 80031be:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6819      	ldr	r1, [r3, #0]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	3b01      	subs	r3, #1
 80031cc:	011b      	lsls	r3, r3, #4
 80031ce:	430b      	orrs	r3, r1
 80031d0:	4943      	ldr	r1, [pc, #268]	; (80032e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80031d2:	4313      	orrs	r3, r2
 80031d4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80031d6:	7bfb      	ldrb	r3, [r7, #15]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d17c      	bne.n	80032d6 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80031dc:	4b40      	ldr	r3, [pc, #256]	; (80032e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a3f      	ldr	r2, [pc, #252]	; (80032e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80031e2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80031e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031e8:	f7fd ffec 	bl	80011c4 <HAL_GetTick>
 80031ec:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80031ee:	e009      	b.n	8003204 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80031f0:	f7fd ffe8 	bl	80011c4 <HAL_GetTick>
 80031f4:	4602      	mov	r2, r0
 80031f6:	68bb      	ldr	r3, [r7, #8]
 80031f8:	1ad3      	subs	r3, r2, r3
 80031fa:	2b02      	cmp	r3, #2
 80031fc:	d902      	bls.n	8003204 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80031fe:	2303      	movs	r3, #3
 8003200:	73fb      	strb	r3, [r7, #15]
        break;
 8003202:	e005      	b.n	8003210 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003204:	4b36      	ldr	r3, [pc, #216]	; (80032e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800320c:	2b00      	cmp	r3, #0
 800320e:	d1ef      	bne.n	80031f0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003210:	7bfb      	ldrb	r3, [r7, #15]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d15f      	bne.n	80032d6 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d110      	bne.n	800323e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800321c:	4b30      	ldr	r3, [pc, #192]	; (80032e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800321e:	691b      	ldr	r3, [r3, #16]
 8003220:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003224:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003228:	687a      	ldr	r2, [r7, #4]
 800322a:	6892      	ldr	r2, [r2, #8]
 800322c:	0211      	lsls	r1, r2, #8
 800322e:	687a      	ldr	r2, [r7, #4]
 8003230:	68d2      	ldr	r2, [r2, #12]
 8003232:	06d2      	lsls	r2, r2, #27
 8003234:	430a      	orrs	r2, r1
 8003236:	492a      	ldr	r1, [pc, #168]	; (80032e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003238:	4313      	orrs	r3, r2
 800323a:	610b      	str	r3, [r1, #16]
 800323c:	e027      	b.n	800328e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	2b01      	cmp	r3, #1
 8003242:	d112      	bne.n	800326a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003244:	4b26      	ldr	r3, [pc, #152]	; (80032e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003246:	691b      	ldr	r3, [r3, #16]
 8003248:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800324c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003250:	687a      	ldr	r2, [r7, #4]
 8003252:	6892      	ldr	r2, [r2, #8]
 8003254:	0211      	lsls	r1, r2, #8
 8003256:	687a      	ldr	r2, [r7, #4]
 8003258:	6912      	ldr	r2, [r2, #16]
 800325a:	0852      	lsrs	r2, r2, #1
 800325c:	3a01      	subs	r2, #1
 800325e:	0552      	lsls	r2, r2, #21
 8003260:	430a      	orrs	r2, r1
 8003262:	491f      	ldr	r1, [pc, #124]	; (80032e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003264:	4313      	orrs	r3, r2
 8003266:	610b      	str	r3, [r1, #16]
 8003268:	e011      	b.n	800328e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800326a:	4b1d      	ldr	r3, [pc, #116]	; (80032e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800326c:	691b      	ldr	r3, [r3, #16]
 800326e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003272:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003276:	687a      	ldr	r2, [r7, #4]
 8003278:	6892      	ldr	r2, [r2, #8]
 800327a:	0211      	lsls	r1, r2, #8
 800327c:	687a      	ldr	r2, [r7, #4]
 800327e:	6952      	ldr	r2, [r2, #20]
 8003280:	0852      	lsrs	r2, r2, #1
 8003282:	3a01      	subs	r2, #1
 8003284:	0652      	lsls	r2, r2, #25
 8003286:	430a      	orrs	r2, r1
 8003288:	4915      	ldr	r1, [pc, #84]	; (80032e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800328a:	4313      	orrs	r3, r2
 800328c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800328e:	4b14      	ldr	r3, [pc, #80]	; (80032e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a13      	ldr	r2, [pc, #76]	; (80032e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003294:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003298:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800329a:	f7fd ff93 	bl	80011c4 <HAL_GetTick>
 800329e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80032a0:	e009      	b.n	80032b6 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80032a2:	f7fd ff8f 	bl	80011c4 <HAL_GetTick>
 80032a6:	4602      	mov	r2, r0
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	1ad3      	subs	r3, r2, r3
 80032ac:	2b02      	cmp	r3, #2
 80032ae:	d902      	bls.n	80032b6 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80032b0:	2303      	movs	r3, #3
 80032b2:	73fb      	strb	r3, [r7, #15]
          break;
 80032b4:	e005      	b.n	80032c2 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80032b6:	4b0a      	ldr	r3, [pc, #40]	; (80032e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d0ef      	beq.n	80032a2 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80032c2:	7bfb      	ldrb	r3, [r7, #15]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d106      	bne.n	80032d6 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80032c8:	4b05      	ldr	r3, [pc, #20]	; (80032e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80032ca:	691a      	ldr	r2, [r3, #16]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	699b      	ldr	r3, [r3, #24]
 80032d0:	4903      	ldr	r1, [pc, #12]	; (80032e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80032d2:	4313      	orrs	r3, r2
 80032d4:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80032d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80032d8:	4618      	mov	r0, r3
 80032da:	3710      	adds	r7, #16
 80032dc:	46bd      	mov	sp, r7
 80032de:	bd80      	pop	{r7, pc}
 80032e0:	40021000 	.word	0x40021000

080032e4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b082      	sub	sp, #8
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d101      	bne.n	80032f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	e040      	b.n	8003378 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d106      	bne.n	800330c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2200      	movs	r2, #0
 8003302:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003306:	6878      	ldr	r0, [r7, #4]
 8003308:	f7fd fdc8 	bl	8000e9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2224      	movs	r2, #36	; 0x24
 8003310:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	681a      	ldr	r2, [r3, #0]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f022 0201 	bic.w	r2, r2, #1
 8003320:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003326:	2b00      	cmp	r3, #0
 8003328:	d002      	beq.n	8003330 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800332a:	6878      	ldr	r0, [r7, #4]
 800332c:	f000 fbe4 	bl	8003af8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003330:	6878      	ldr	r0, [r7, #4]
 8003332:	f000 f9b5 	bl	80036a0 <UART_SetConfig>
 8003336:	4603      	mov	r3, r0
 8003338:	2b01      	cmp	r3, #1
 800333a:	d101      	bne.n	8003340 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800333c:	2301      	movs	r3, #1
 800333e:	e01b      	b.n	8003378 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	685a      	ldr	r2, [r3, #4]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800334e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	689a      	ldr	r2, [r3, #8]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800335e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	681a      	ldr	r2, [r3, #0]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f042 0201 	orr.w	r2, r2, #1
 800336e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003370:	6878      	ldr	r0, [r7, #4]
 8003372:	f000 fc63 	bl	8003c3c <UART_CheckIdleState>
 8003376:	4603      	mov	r3, r0
}
 8003378:	4618      	mov	r0, r3
 800337a:	3708      	adds	r7, #8
 800337c:	46bd      	mov	sp, r7
 800337e:	bd80      	pop	{r7, pc}

08003380 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b082      	sub	sp, #8
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d101      	bne.n	8003392 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	e02f      	b.n	80033f2 <HAL_UART_DeInit+0x72>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2224      	movs	r2, #36	; 0x24
 8003396:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	681a      	ldr	r2, [r3, #0]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f022 0201 	bic.w	r2, r2, #1
 80033a6:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	2200      	movs	r2, #0
 80033ae:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	2200      	movs	r2, #0
 80033b6:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	2200      	movs	r2, #0
 80033be:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 80033c0:	6878      	ldr	r0, [r7, #4]
 80033c2:	f7fd fdd5 	bl	8000f70 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2200      	movs	r2, #0
 80033ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->gState = HAL_UART_STATE_RESET;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2200      	movs	r2, #0
 80033d2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_RESET;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2200      	movs	r2, #0
 80033d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2200      	movs	r2, #0
 80033e0:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2200      	movs	r2, #0
 80033e6:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2200      	movs	r2, #0
 80033ec:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80033f0:	2300      	movs	r3, #0
}
 80033f2:	4618      	mov	r0, r3
 80033f4:	3708      	adds	r7, #8
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}

080033fa <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033fa:	b580      	push	{r7, lr}
 80033fc:	b08a      	sub	sp, #40	; 0x28
 80033fe:	af02      	add	r7, sp, #8
 8003400:	60f8      	str	r0, [r7, #12]
 8003402:	60b9      	str	r1, [r7, #8]
 8003404:	603b      	str	r3, [r7, #0]
 8003406:	4613      	mov	r3, r2
 8003408:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800340e:	2b20      	cmp	r3, #32
 8003410:	d178      	bne.n	8003504 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003412:	68bb      	ldr	r3, [r7, #8]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d002      	beq.n	800341e <HAL_UART_Transmit+0x24>
 8003418:	88fb      	ldrh	r3, [r7, #6]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d101      	bne.n	8003422 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	e071      	b.n	8003506 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	2200      	movs	r2, #0
 8003426:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	2221      	movs	r2, #33	; 0x21
 800342e:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003430:	f7fd fec8 	bl	80011c4 <HAL_GetTick>
 8003434:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	88fa      	ldrh	r2, [r7, #6]
 800343a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	88fa      	ldrh	r2, [r7, #6]
 8003442:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	689b      	ldr	r3, [r3, #8]
 800344a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800344e:	d108      	bne.n	8003462 <HAL_UART_Transmit+0x68>
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	691b      	ldr	r3, [r3, #16]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d104      	bne.n	8003462 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003458:	2300      	movs	r3, #0
 800345a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	61bb      	str	r3, [r7, #24]
 8003460:	e003      	b.n	800346a <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003462:	68bb      	ldr	r3, [r7, #8]
 8003464:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003466:	2300      	movs	r3, #0
 8003468:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800346a:	e030      	b.n	80034ce <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	9300      	str	r3, [sp, #0]
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	2200      	movs	r2, #0
 8003474:	2180      	movs	r1, #128	; 0x80
 8003476:	68f8      	ldr	r0, [r7, #12]
 8003478:	f000 fc88 	bl	8003d8c <UART_WaitOnFlagUntilTimeout>
 800347c:	4603      	mov	r3, r0
 800347e:	2b00      	cmp	r3, #0
 8003480:	d004      	beq.n	800348c <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	2220      	movs	r2, #32
 8003486:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8003488:	2303      	movs	r3, #3
 800348a:	e03c      	b.n	8003506 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 800348c:	69fb      	ldr	r3, [r7, #28]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d10b      	bne.n	80034aa <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003492:	69bb      	ldr	r3, [r7, #24]
 8003494:	881a      	ldrh	r2, [r3, #0]
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800349e:	b292      	uxth	r2, r2
 80034a0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80034a2:	69bb      	ldr	r3, [r7, #24]
 80034a4:	3302      	adds	r3, #2
 80034a6:	61bb      	str	r3, [r7, #24]
 80034a8:	e008      	b.n	80034bc <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80034aa:	69fb      	ldr	r3, [r7, #28]
 80034ac:	781a      	ldrb	r2, [r3, #0]
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	b292      	uxth	r2, r2
 80034b4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80034b6:	69fb      	ldr	r3, [r7, #28]
 80034b8:	3301      	adds	r3, #1
 80034ba:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80034c2:	b29b      	uxth	r3, r3
 80034c4:	3b01      	subs	r3, #1
 80034c6:	b29a      	uxth	r2, r3
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80034d4:	b29b      	uxth	r3, r3
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d1c8      	bne.n	800346c <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	9300      	str	r3, [sp, #0]
 80034de:	697b      	ldr	r3, [r7, #20]
 80034e0:	2200      	movs	r2, #0
 80034e2:	2140      	movs	r1, #64	; 0x40
 80034e4:	68f8      	ldr	r0, [r7, #12]
 80034e6:	f000 fc51 	bl	8003d8c <UART_WaitOnFlagUntilTimeout>
 80034ea:	4603      	mov	r3, r0
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d004      	beq.n	80034fa <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	2220      	movs	r2, #32
 80034f4:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80034f6:	2303      	movs	r3, #3
 80034f8:	e005      	b.n	8003506 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	2220      	movs	r2, #32
 80034fe:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003500:	2300      	movs	r3, #0
 8003502:	e000      	b.n	8003506 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8003504:	2302      	movs	r3, #2
  }
}
 8003506:	4618      	mov	r0, r3
 8003508:	3720      	adds	r7, #32
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}

0800350e <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800350e:	b580      	push	{r7, lr}
 8003510:	b08a      	sub	sp, #40	; 0x28
 8003512:	af02      	add	r7, sp, #8
 8003514:	60f8      	str	r0, [r7, #12]
 8003516:	60b9      	str	r1, [r7, #8]
 8003518:	603b      	str	r3, [r7, #0]
 800351a:	4613      	mov	r3, r2
 800351c:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003524:	2b20      	cmp	r3, #32
 8003526:	f040 80b6 	bne.w	8003696 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d002      	beq.n	8003536 <HAL_UART_Receive+0x28>
 8003530:	88fb      	ldrh	r3, [r7, #6]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d101      	bne.n	800353a <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8003536:	2301      	movs	r3, #1
 8003538:	e0ae      	b.n	8003698 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	2200      	movs	r2, #0
 800353e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	2222      	movs	r2, #34	; 0x22
 8003546:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	2200      	movs	r2, #0
 800354e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003550:	f7fd fe38 	bl	80011c4 <HAL_GetTick>
 8003554:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	88fa      	ldrh	r2, [r7, #6]
 800355a:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	88fa      	ldrh	r2, [r7, #6]
 8003562:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	689b      	ldr	r3, [r3, #8]
 800356a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800356e:	d10e      	bne.n	800358e <HAL_UART_Receive+0x80>
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	691b      	ldr	r3, [r3, #16]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d105      	bne.n	8003584 <HAL_UART_Receive+0x76>
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800357e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003582:	e02d      	b.n	80035e0 <HAL_UART_Receive+0xd2>
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	22ff      	movs	r2, #255	; 0xff
 8003588:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800358c:	e028      	b.n	80035e0 <HAL_UART_Receive+0xd2>
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	689b      	ldr	r3, [r3, #8]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d10d      	bne.n	80035b2 <HAL_UART_Receive+0xa4>
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	691b      	ldr	r3, [r3, #16]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d104      	bne.n	80035a8 <HAL_UART_Receive+0x9a>
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	22ff      	movs	r2, #255	; 0xff
 80035a2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80035a6:	e01b      	b.n	80035e0 <HAL_UART_Receive+0xd2>
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	227f      	movs	r2, #127	; 0x7f
 80035ac:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80035b0:	e016      	b.n	80035e0 <HAL_UART_Receive+0xd2>
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	689b      	ldr	r3, [r3, #8]
 80035b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80035ba:	d10d      	bne.n	80035d8 <HAL_UART_Receive+0xca>
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	691b      	ldr	r3, [r3, #16]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d104      	bne.n	80035ce <HAL_UART_Receive+0xc0>
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	227f      	movs	r2, #127	; 0x7f
 80035c8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80035cc:	e008      	b.n	80035e0 <HAL_UART_Receive+0xd2>
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	223f      	movs	r2, #63	; 0x3f
 80035d2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80035d6:	e003      	b.n	80035e0 <HAL_UART_Receive+0xd2>
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	2200      	movs	r2, #0
 80035dc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80035e6:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	689b      	ldr	r3, [r3, #8]
 80035ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035f0:	d108      	bne.n	8003604 <HAL_UART_Receive+0xf6>
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	691b      	ldr	r3, [r3, #16]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d104      	bne.n	8003604 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80035fa:	2300      	movs	r3, #0
 80035fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	61bb      	str	r3, [r7, #24]
 8003602:	e003      	b.n	800360c <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003608:	2300      	movs	r3, #0
 800360a:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800360c:	e037      	b.n	800367e <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	9300      	str	r3, [sp, #0]
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	2200      	movs	r2, #0
 8003616:	2120      	movs	r1, #32
 8003618:	68f8      	ldr	r0, [r7, #12]
 800361a:	f000 fbb7 	bl	8003d8c <UART_WaitOnFlagUntilTimeout>
 800361e:	4603      	mov	r3, r0
 8003620:	2b00      	cmp	r3, #0
 8003622:	d005      	beq.n	8003630 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	2220      	movs	r2, #32
 8003628:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800362c:	2303      	movs	r3, #3
 800362e:	e033      	b.n	8003698 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 8003630:	69fb      	ldr	r3, [r7, #28]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d10c      	bne.n	8003650 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800363c:	b29a      	uxth	r2, r3
 800363e:	8a7b      	ldrh	r3, [r7, #18]
 8003640:	4013      	ands	r3, r2
 8003642:	b29a      	uxth	r2, r3
 8003644:	69bb      	ldr	r3, [r7, #24]
 8003646:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003648:	69bb      	ldr	r3, [r7, #24]
 800364a:	3302      	adds	r3, #2
 800364c:	61bb      	str	r3, [r7, #24]
 800364e:	e00d      	b.n	800366c <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003656:	b29b      	uxth	r3, r3
 8003658:	b2da      	uxtb	r2, r3
 800365a:	8a7b      	ldrh	r3, [r7, #18]
 800365c:	b2db      	uxtb	r3, r3
 800365e:	4013      	ands	r3, r2
 8003660:	b2da      	uxtb	r2, r3
 8003662:	69fb      	ldr	r3, [r7, #28]
 8003664:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8003666:	69fb      	ldr	r3, [r7, #28]
 8003668:	3301      	adds	r3, #1
 800366a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003672:	b29b      	uxth	r3, r3
 8003674:	3b01      	subs	r3, #1
 8003676:	b29a      	uxth	r2, r3
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003684:	b29b      	uxth	r3, r3
 8003686:	2b00      	cmp	r3, #0
 8003688:	d1c1      	bne.n	800360e <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	2220      	movs	r2, #32
 800368e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8003692:	2300      	movs	r3, #0
 8003694:	e000      	b.n	8003698 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8003696:	2302      	movs	r3, #2
  }
}
 8003698:	4618      	mov	r0, r3
 800369a:	3720      	adds	r7, #32
 800369c:	46bd      	mov	sp, r7
 800369e:	bd80      	pop	{r7, pc}

080036a0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80036a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80036a4:	b08a      	sub	sp, #40	; 0x28
 80036a6:	af00      	add	r7, sp, #0
 80036a8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80036aa:	2300      	movs	r3, #0
 80036ac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	689a      	ldr	r2, [r3, #8]
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	691b      	ldr	r3, [r3, #16]
 80036b8:	431a      	orrs	r2, r3
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	695b      	ldr	r3, [r3, #20]
 80036be:	431a      	orrs	r2, r3
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	69db      	ldr	r3, [r3, #28]
 80036c4:	4313      	orrs	r3, r2
 80036c6:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	681a      	ldr	r2, [r3, #0]
 80036ce:	4bb4      	ldr	r3, [pc, #720]	; (80039a0 <UART_SetConfig+0x300>)
 80036d0:	4013      	ands	r3, r2
 80036d2:	68fa      	ldr	r2, [r7, #12]
 80036d4:	6812      	ldr	r2, [r2, #0]
 80036d6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80036d8:	430b      	orrs	r3, r1
 80036da:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	68da      	ldr	r2, [r3, #12]
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	430a      	orrs	r2, r1
 80036f0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	699b      	ldr	r3, [r3, #24]
 80036f6:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4aa9      	ldr	r2, [pc, #676]	; (80039a4 <UART_SetConfig+0x304>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d004      	beq.n	800370c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	6a1b      	ldr	r3, [r3, #32]
 8003706:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003708:	4313      	orrs	r3, r2
 800370a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	689b      	ldr	r3, [r3, #8]
 8003712:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800371c:	430a      	orrs	r2, r1
 800371e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4aa0      	ldr	r2, [pc, #640]	; (80039a8 <UART_SetConfig+0x308>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d126      	bne.n	8003778 <UART_SetConfig+0xd8>
 800372a:	4ba0      	ldr	r3, [pc, #640]	; (80039ac <UART_SetConfig+0x30c>)
 800372c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003730:	f003 0303 	and.w	r3, r3, #3
 8003734:	2b03      	cmp	r3, #3
 8003736:	d81b      	bhi.n	8003770 <UART_SetConfig+0xd0>
 8003738:	a201      	add	r2, pc, #4	; (adr r2, 8003740 <UART_SetConfig+0xa0>)
 800373a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800373e:	bf00      	nop
 8003740:	08003751 	.word	0x08003751
 8003744:	08003761 	.word	0x08003761
 8003748:	08003759 	.word	0x08003759
 800374c:	08003769 	.word	0x08003769
 8003750:	2301      	movs	r3, #1
 8003752:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003756:	e080      	b.n	800385a <UART_SetConfig+0x1ba>
 8003758:	2302      	movs	r3, #2
 800375a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800375e:	e07c      	b.n	800385a <UART_SetConfig+0x1ba>
 8003760:	2304      	movs	r3, #4
 8003762:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003766:	e078      	b.n	800385a <UART_SetConfig+0x1ba>
 8003768:	2308      	movs	r3, #8
 800376a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800376e:	e074      	b.n	800385a <UART_SetConfig+0x1ba>
 8003770:	2310      	movs	r3, #16
 8003772:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003776:	e070      	b.n	800385a <UART_SetConfig+0x1ba>
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a8c      	ldr	r2, [pc, #560]	; (80039b0 <UART_SetConfig+0x310>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d138      	bne.n	80037f4 <UART_SetConfig+0x154>
 8003782:	4b8a      	ldr	r3, [pc, #552]	; (80039ac <UART_SetConfig+0x30c>)
 8003784:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003788:	f003 030c 	and.w	r3, r3, #12
 800378c:	2b0c      	cmp	r3, #12
 800378e:	d82d      	bhi.n	80037ec <UART_SetConfig+0x14c>
 8003790:	a201      	add	r2, pc, #4	; (adr r2, 8003798 <UART_SetConfig+0xf8>)
 8003792:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003796:	bf00      	nop
 8003798:	080037cd 	.word	0x080037cd
 800379c:	080037ed 	.word	0x080037ed
 80037a0:	080037ed 	.word	0x080037ed
 80037a4:	080037ed 	.word	0x080037ed
 80037a8:	080037dd 	.word	0x080037dd
 80037ac:	080037ed 	.word	0x080037ed
 80037b0:	080037ed 	.word	0x080037ed
 80037b4:	080037ed 	.word	0x080037ed
 80037b8:	080037d5 	.word	0x080037d5
 80037bc:	080037ed 	.word	0x080037ed
 80037c0:	080037ed 	.word	0x080037ed
 80037c4:	080037ed 	.word	0x080037ed
 80037c8:	080037e5 	.word	0x080037e5
 80037cc:	2300      	movs	r3, #0
 80037ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037d2:	e042      	b.n	800385a <UART_SetConfig+0x1ba>
 80037d4:	2302      	movs	r3, #2
 80037d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037da:	e03e      	b.n	800385a <UART_SetConfig+0x1ba>
 80037dc:	2304      	movs	r3, #4
 80037de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037e2:	e03a      	b.n	800385a <UART_SetConfig+0x1ba>
 80037e4:	2308      	movs	r3, #8
 80037e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037ea:	e036      	b.n	800385a <UART_SetConfig+0x1ba>
 80037ec:	2310      	movs	r3, #16
 80037ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037f2:	e032      	b.n	800385a <UART_SetConfig+0x1ba>
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a6a      	ldr	r2, [pc, #424]	; (80039a4 <UART_SetConfig+0x304>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d12a      	bne.n	8003854 <UART_SetConfig+0x1b4>
 80037fe:	4b6b      	ldr	r3, [pc, #428]	; (80039ac <UART_SetConfig+0x30c>)
 8003800:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003804:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003808:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800380c:	d01a      	beq.n	8003844 <UART_SetConfig+0x1a4>
 800380e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003812:	d81b      	bhi.n	800384c <UART_SetConfig+0x1ac>
 8003814:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003818:	d00c      	beq.n	8003834 <UART_SetConfig+0x194>
 800381a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800381e:	d815      	bhi.n	800384c <UART_SetConfig+0x1ac>
 8003820:	2b00      	cmp	r3, #0
 8003822:	d003      	beq.n	800382c <UART_SetConfig+0x18c>
 8003824:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003828:	d008      	beq.n	800383c <UART_SetConfig+0x19c>
 800382a:	e00f      	b.n	800384c <UART_SetConfig+0x1ac>
 800382c:	2300      	movs	r3, #0
 800382e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003832:	e012      	b.n	800385a <UART_SetConfig+0x1ba>
 8003834:	2302      	movs	r3, #2
 8003836:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800383a:	e00e      	b.n	800385a <UART_SetConfig+0x1ba>
 800383c:	2304      	movs	r3, #4
 800383e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003842:	e00a      	b.n	800385a <UART_SetConfig+0x1ba>
 8003844:	2308      	movs	r3, #8
 8003846:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800384a:	e006      	b.n	800385a <UART_SetConfig+0x1ba>
 800384c:	2310      	movs	r3, #16
 800384e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003852:	e002      	b.n	800385a <UART_SetConfig+0x1ba>
 8003854:	2310      	movs	r3, #16
 8003856:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a51      	ldr	r2, [pc, #324]	; (80039a4 <UART_SetConfig+0x304>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d17a      	bne.n	800395a <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003864:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003868:	2b08      	cmp	r3, #8
 800386a:	d824      	bhi.n	80038b6 <UART_SetConfig+0x216>
 800386c:	a201      	add	r2, pc, #4	; (adr r2, 8003874 <UART_SetConfig+0x1d4>)
 800386e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003872:	bf00      	nop
 8003874:	08003899 	.word	0x08003899
 8003878:	080038b7 	.word	0x080038b7
 800387c:	080038a1 	.word	0x080038a1
 8003880:	080038b7 	.word	0x080038b7
 8003884:	080038a7 	.word	0x080038a7
 8003888:	080038b7 	.word	0x080038b7
 800388c:	080038b7 	.word	0x080038b7
 8003890:	080038b7 	.word	0x080038b7
 8003894:	080038af 	.word	0x080038af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003898:	f7ff f9a0 	bl	8002bdc <HAL_RCC_GetPCLK1Freq>
 800389c:	61f8      	str	r0, [r7, #28]
        break;
 800389e:	e010      	b.n	80038c2 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80038a0:	4b44      	ldr	r3, [pc, #272]	; (80039b4 <UART_SetConfig+0x314>)
 80038a2:	61fb      	str	r3, [r7, #28]
        break;
 80038a4:	e00d      	b.n	80038c2 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80038a6:	f7ff f901 	bl	8002aac <HAL_RCC_GetSysClockFreq>
 80038aa:	61f8      	str	r0, [r7, #28]
        break;
 80038ac:	e009      	b.n	80038c2 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80038ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80038b2:	61fb      	str	r3, [r7, #28]
        break;
 80038b4:	e005      	b.n	80038c2 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 80038b6:	2300      	movs	r3, #0
 80038b8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80038ba:	2301      	movs	r3, #1
 80038bc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80038c0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80038c2:	69fb      	ldr	r3, [r7, #28]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	f000 8107 	beq.w	8003ad8 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	685a      	ldr	r2, [r3, #4]
 80038ce:	4613      	mov	r3, r2
 80038d0:	005b      	lsls	r3, r3, #1
 80038d2:	4413      	add	r3, r2
 80038d4:	69fa      	ldr	r2, [r7, #28]
 80038d6:	429a      	cmp	r2, r3
 80038d8:	d305      	bcc.n	80038e6 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80038e0:	69fa      	ldr	r2, [r7, #28]
 80038e2:	429a      	cmp	r2, r3
 80038e4:	d903      	bls.n	80038ee <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 80038e6:	2301      	movs	r3, #1
 80038e8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80038ec:	e0f4      	b.n	8003ad8 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80038ee:	69fb      	ldr	r3, [r7, #28]
 80038f0:	2200      	movs	r2, #0
 80038f2:	461c      	mov	r4, r3
 80038f4:	4615      	mov	r5, r2
 80038f6:	f04f 0200 	mov.w	r2, #0
 80038fa:	f04f 0300 	mov.w	r3, #0
 80038fe:	022b      	lsls	r3, r5, #8
 8003900:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003904:	0222      	lsls	r2, r4, #8
 8003906:	68f9      	ldr	r1, [r7, #12]
 8003908:	6849      	ldr	r1, [r1, #4]
 800390a:	0849      	lsrs	r1, r1, #1
 800390c:	2000      	movs	r0, #0
 800390e:	4688      	mov	r8, r1
 8003910:	4681      	mov	r9, r0
 8003912:	eb12 0a08 	adds.w	sl, r2, r8
 8003916:	eb43 0b09 	adc.w	fp, r3, r9
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	2200      	movs	r2, #0
 8003920:	603b      	str	r3, [r7, #0]
 8003922:	607a      	str	r2, [r7, #4]
 8003924:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003928:	4650      	mov	r0, sl
 800392a:	4659      	mov	r1, fp
 800392c:	f7fc fc4e 	bl	80001cc <__aeabi_uldivmod>
 8003930:	4602      	mov	r2, r0
 8003932:	460b      	mov	r3, r1
 8003934:	4613      	mov	r3, r2
 8003936:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003938:	69bb      	ldr	r3, [r7, #24]
 800393a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800393e:	d308      	bcc.n	8003952 <UART_SetConfig+0x2b2>
 8003940:	69bb      	ldr	r3, [r7, #24]
 8003942:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003946:	d204      	bcs.n	8003952 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	69ba      	ldr	r2, [r7, #24]
 800394e:	60da      	str	r2, [r3, #12]
 8003950:	e0c2      	b.n	8003ad8 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003958:	e0be      	b.n	8003ad8 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	69db      	ldr	r3, [r3, #28]
 800395e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003962:	d16a      	bne.n	8003a3a <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8003964:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003968:	2b08      	cmp	r3, #8
 800396a:	d834      	bhi.n	80039d6 <UART_SetConfig+0x336>
 800396c:	a201      	add	r2, pc, #4	; (adr r2, 8003974 <UART_SetConfig+0x2d4>)
 800396e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003972:	bf00      	nop
 8003974:	08003999 	.word	0x08003999
 8003978:	080039b9 	.word	0x080039b9
 800397c:	080039c1 	.word	0x080039c1
 8003980:	080039d7 	.word	0x080039d7
 8003984:	080039c7 	.word	0x080039c7
 8003988:	080039d7 	.word	0x080039d7
 800398c:	080039d7 	.word	0x080039d7
 8003990:	080039d7 	.word	0x080039d7
 8003994:	080039cf 	.word	0x080039cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003998:	f7ff f920 	bl	8002bdc <HAL_RCC_GetPCLK1Freq>
 800399c:	61f8      	str	r0, [r7, #28]
        break;
 800399e:	e020      	b.n	80039e2 <UART_SetConfig+0x342>
 80039a0:	efff69f3 	.word	0xefff69f3
 80039a4:	40008000 	.word	0x40008000
 80039a8:	40013800 	.word	0x40013800
 80039ac:	40021000 	.word	0x40021000
 80039b0:	40004400 	.word	0x40004400
 80039b4:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80039b8:	f7ff f926 	bl	8002c08 <HAL_RCC_GetPCLK2Freq>
 80039bc:	61f8      	str	r0, [r7, #28]
        break;
 80039be:	e010      	b.n	80039e2 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80039c0:	4b4c      	ldr	r3, [pc, #304]	; (8003af4 <UART_SetConfig+0x454>)
 80039c2:	61fb      	str	r3, [r7, #28]
        break;
 80039c4:	e00d      	b.n	80039e2 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80039c6:	f7ff f871 	bl	8002aac <HAL_RCC_GetSysClockFreq>
 80039ca:	61f8      	str	r0, [r7, #28]
        break;
 80039cc:	e009      	b.n	80039e2 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80039ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80039d2:	61fb      	str	r3, [r7, #28]
        break;
 80039d4:	e005      	b.n	80039e2 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 80039d6:	2300      	movs	r3, #0
 80039d8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80039e0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80039e2:	69fb      	ldr	r3, [r7, #28]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d077      	beq.n	8003ad8 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80039e8:	69fb      	ldr	r3, [r7, #28]
 80039ea:	005a      	lsls	r2, r3, #1
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	085b      	lsrs	r3, r3, #1
 80039f2:	441a      	add	r2, r3
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80039fc:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80039fe:	69bb      	ldr	r3, [r7, #24]
 8003a00:	2b0f      	cmp	r3, #15
 8003a02:	d916      	bls.n	8003a32 <UART_SetConfig+0x392>
 8003a04:	69bb      	ldr	r3, [r7, #24]
 8003a06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a0a:	d212      	bcs.n	8003a32 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003a0c:	69bb      	ldr	r3, [r7, #24]
 8003a0e:	b29b      	uxth	r3, r3
 8003a10:	f023 030f 	bic.w	r3, r3, #15
 8003a14:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003a16:	69bb      	ldr	r3, [r7, #24]
 8003a18:	085b      	lsrs	r3, r3, #1
 8003a1a:	b29b      	uxth	r3, r3
 8003a1c:	f003 0307 	and.w	r3, r3, #7
 8003a20:	b29a      	uxth	r2, r3
 8003a22:	8afb      	ldrh	r3, [r7, #22]
 8003a24:	4313      	orrs	r3, r2
 8003a26:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	8afa      	ldrh	r2, [r7, #22]
 8003a2e:	60da      	str	r2, [r3, #12]
 8003a30:	e052      	b.n	8003ad8 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8003a32:	2301      	movs	r3, #1
 8003a34:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003a38:	e04e      	b.n	8003ad8 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003a3a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003a3e:	2b08      	cmp	r3, #8
 8003a40:	d827      	bhi.n	8003a92 <UART_SetConfig+0x3f2>
 8003a42:	a201      	add	r2, pc, #4	; (adr r2, 8003a48 <UART_SetConfig+0x3a8>)
 8003a44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a48:	08003a6d 	.word	0x08003a6d
 8003a4c:	08003a75 	.word	0x08003a75
 8003a50:	08003a7d 	.word	0x08003a7d
 8003a54:	08003a93 	.word	0x08003a93
 8003a58:	08003a83 	.word	0x08003a83
 8003a5c:	08003a93 	.word	0x08003a93
 8003a60:	08003a93 	.word	0x08003a93
 8003a64:	08003a93 	.word	0x08003a93
 8003a68:	08003a8b 	.word	0x08003a8b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a6c:	f7ff f8b6 	bl	8002bdc <HAL_RCC_GetPCLK1Freq>
 8003a70:	61f8      	str	r0, [r7, #28]
        break;
 8003a72:	e014      	b.n	8003a9e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003a74:	f7ff f8c8 	bl	8002c08 <HAL_RCC_GetPCLK2Freq>
 8003a78:	61f8      	str	r0, [r7, #28]
        break;
 8003a7a:	e010      	b.n	8003a9e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a7c:	4b1d      	ldr	r3, [pc, #116]	; (8003af4 <UART_SetConfig+0x454>)
 8003a7e:	61fb      	str	r3, [r7, #28]
        break;
 8003a80:	e00d      	b.n	8003a9e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a82:	f7ff f813 	bl	8002aac <HAL_RCC_GetSysClockFreq>
 8003a86:	61f8      	str	r0, [r7, #28]
        break;
 8003a88:	e009      	b.n	8003a9e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a8e:	61fb      	str	r3, [r7, #28]
        break;
 8003a90:	e005      	b.n	8003a9e <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8003a92:	2300      	movs	r3, #0
 8003a94:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003a96:	2301      	movs	r3, #1
 8003a98:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003a9c:	bf00      	nop
    }

    if (pclk != 0U)
 8003a9e:	69fb      	ldr	r3, [r7, #28]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d019      	beq.n	8003ad8 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	085a      	lsrs	r2, r3, #1
 8003aaa:	69fb      	ldr	r3, [r7, #28]
 8003aac:	441a      	add	r2, r3
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ab6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ab8:	69bb      	ldr	r3, [r7, #24]
 8003aba:	2b0f      	cmp	r3, #15
 8003abc:	d909      	bls.n	8003ad2 <UART_SetConfig+0x432>
 8003abe:	69bb      	ldr	r3, [r7, #24]
 8003ac0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ac4:	d205      	bcs.n	8003ad2 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003ac6:	69bb      	ldr	r3, [r7, #24]
 8003ac8:	b29a      	uxth	r2, r3
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	60da      	str	r2, [r3, #12]
 8003ad0:	e002      	b.n	8003ad8 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	2200      	movs	r2, #0
 8003adc:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003ae4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003ae8:	4618      	mov	r0, r3
 8003aea:	3728      	adds	r7, #40	; 0x28
 8003aec:	46bd      	mov	sp, r7
 8003aee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003af2:	bf00      	nop
 8003af4:	00f42400 	.word	0x00f42400

08003af8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003af8:	b480      	push	{r7}
 8003afa:	b083      	sub	sp, #12
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b04:	f003 0308 	and.w	r3, r3, #8
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d00a      	beq.n	8003b22 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	430a      	orrs	r2, r1
 8003b20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b26:	f003 0301 	and.w	r3, r3, #1
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d00a      	beq.n	8003b44 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	430a      	orrs	r2, r1
 8003b42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b48:	f003 0302 	and.w	r3, r3, #2
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d00a      	beq.n	8003b66 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	430a      	orrs	r2, r1
 8003b64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b6a:	f003 0304 	and.w	r3, r3, #4
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d00a      	beq.n	8003b88 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	430a      	orrs	r2, r1
 8003b86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b8c:	f003 0310 	and.w	r3, r3, #16
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d00a      	beq.n	8003baa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	689b      	ldr	r3, [r3, #8]
 8003b9a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	430a      	orrs	r2, r1
 8003ba8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bae:	f003 0320 	and.w	r3, r3, #32
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d00a      	beq.n	8003bcc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	689b      	ldr	r3, [r3, #8]
 8003bbc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	430a      	orrs	r2, r1
 8003bca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d01a      	beq.n	8003c0e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	430a      	orrs	r2, r1
 8003bec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003bf6:	d10a      	bne.n	8003c0e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	430a      	orrs	r2, r1
 8003c0c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d00a      	beq.n	8003c30 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	430a      	orrs	r2, r1
 8003c2e:	605a      	str	r2, [r3, #4]
  }
}
 8003c30:	bf00      	nop
 8003c32:	370c      	adds	r7, #12
 8003c34:	46bd      	mov	sp, r7
 8003c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3a:	4770      	bx	lr

08003c3c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b098      	sub	sp, #96	; 0x60
 8003c40:	af02      	add	r7, sp, #8
 8003c42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2200      	movs	r2, #0
 8003c48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003c4c:	f7fd faba 	bl	80011c4 <HAL_GetTick>
 8003c50:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f003 0308 	and.w	r3, r3, #8
 8003c5c:	2b08      	cmp	r3, #8
 8003c5e:	d12e      	bne.n	8003cbe <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c60:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003c64:	9300      	str	r3, [sp, #0]
 8003c66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c68:	2200      	movs	r2, #0
 8003c6a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	f000 f88c 	bl	8003d8c <UART_WaitOnFlagUntilTimeout>
 8003c74:	4603      	mov	r3, r0
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d021      	beq.n	8003cbe <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c82:	e853 3f00 	ldrex	r3, [r3]
 8003c86:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003c88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c8a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c8e:	653b      	str	r3, [r7, #80]	; 0x50
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	461a      	mov	r2, r3
 8003c96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c98:	647b      	str	r3, [r7, #68]	; 0x44
 8003c9a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c9c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003c9e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003ca0:	e841 2300 	strex	r3, r2, [r1]
 8003ca4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003ca6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d1e6      	bne.n	8003c7a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2220      	movs	r2, #32
 8003cb0:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003cba:	2303      	movs	r3, #3
 8003cbc:	e062      	b.n	8003d84 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f003 0304 	and.w	r3, r3, #4
 8003cc8:	2b04      	cmp	r3, #4
 8003cca:	d149      	bne.n	8003d60 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ccc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003cd0:	9300      	str	r3, [sp, #0]
 8003cd2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003cda:	6878      	ldr	r0, [r7, #4]
 8003cdc:	f000 f856 	bl	8003d8c <UART_WaitOnFlagUntilTimeout>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d03c      	beq.n	8003d60 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cee:	e853 3f00 	ldrex	r3, [r3]
 8003cf2:	623b      	str	r3, [r7, #32]
   return(result);
 8003cf4:	6a3b      	ldr	r3, [r7, #32]
 8003cf6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003cfa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	461a      	mov	r2, r3
 8003d02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d04:	633b      	str	r3, [r7, #48]	; 0x30
 8003d06:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d08:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003d0a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d0c:	e841 2300 	strex	r3, r2, [r1]
 8003d10:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d1e6      	bne.n	8003ce6 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	3308      	adds	r3, #8
 8003d1e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d20:	693b      	ldr	r3, [r7, #16]
 8003d22:	e853 3f00 	ldrex	r3, [r3]
 8003d26:	60fb      	str	r3, [r7, #12]
   return(result);
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	f023 0301 	bic.w	r3, r3, #1
 8003d2e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	3308      	adds	r3, #8
 8003d36:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003d38:	61fa      	str	r2, [r7, #28]
 8003d3a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d3c:	69b9      	ldr	r1, [r7, #24]
 8003d3e:	69fa      	ldr	r2, [r7, #28]
 8003d40:	e841 2300 	strex	r3, r2, [r1]
 8003d44:	617b      	str	r3, [r7, #20]
   return(result);
 8003d46:	697b      	ldr	r3, [r7, #20]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d1e5      	bne.n	8003d18 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2220      	movs	r2, #32
 8003d50:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2200      	movs	r2, #0
 8003d58:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003d5c:	2303      	movs	r3, #3
 8003d5e:	e011      	b.n	8003d84 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2220      	movs	r2, #32
 8003d64:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2220      	movs	r2, #32
 8003d6a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2200      	movs	r2, #0
 8003d72:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2200      	movs	r2, #0
 8003d78:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003d82:	2300      	movs	r3, #0
}
 8003d84:	4618      	mov	r0, r3
 8003d86:	3758      	adds	r7, #88	; 0x58
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	bd80      	pop	{r7, pc}

08003d8c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b084      	sub	sp, #16
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	60f8      	str	r0, [r7, #12]
 8003d94:	60b9      	str	r1, [r7, #8]
 8003d96:	603b      	str	r3, [r7, #0]
 8003d98:	4613      	mov	r3, r2
 8003d9a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d9c:	e049      	b.n	8003e32 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d9e:	69bb      	ldr	r3, [r7, #24]
 8003da0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003da4:	d045      	beq.n	8003e32 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003da6:	f7fd fa0d 	bl	80011c4 <HAL_GetTick>
 8003daa:	4602      	mov	r2, r0
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	1ad3      	subs	r3, r2, r3
 8003db0:	69ba      	ldr	r2, [r7, #24]
 8003db2:	429a      	cmp	r2, r3
 8003db4:	d302      	bcc.n	8003dbc <UART_WaitOnFlagUntilTimeout+0x30>
 8003db6:	69bb      	ldr	r3, [r7, #24]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d101      	bne.n	8003dc0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003dbc:	2303      	movs	r3, #3
 8003dbe:	e048      	b.n	8003e52 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f003 0304 	and.w	r3, r3, #4
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d031      	beq.n	8003e32 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	69db      	ldr	r3, [r3, #28]
 8003dd4:	f003 0308 	and.w	r3, r3, #8
 8003dd8:	2b08      	cmp	r3, #8
 8003dda:	d110      	bne.n	8003dfe <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	2208      	movs	r2, #8
 8003de2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003de4:	68f8      	ldr	r0, [r7, #12]
 8003de6:	f000 f838 	bl	8003e5a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	2208      	movs	r2, #8
 8003dee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	2200      	movs	r2, #0
 8003df6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	e029      	b.n	8003e52 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	69db      	ldr	r3, [r3, #28]
 8003e04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e08:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e0c:	d111      	bne.n	8003e32 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003e16:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003e18:	68f8      	ldr	r0, [r7, #12]
 8003e1a:	f000 f81e 	bl	8003e5a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	2220      	movs	r2, #32
 8003e22:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003e2e:	2303      	movs	r3, #3
 8003e30:	e00f      	b.n	8003e52 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	69da      	ldr	r2, [r3, #28]
 8003e38:	68bb      	ldr	r3, [r7, #8]
 8003e3a:	4013      	ands	r3, r2
 8003e3c:	68ba      	ldr	r2, [r7, #8]
 8003e3e:	429a      	cmp	r2, r3
 8003e40:	bf0c      	ite	eq
 8003e42:	2301      	moveq	r3, #1
 8003e44:	2300      	movne	r3, #0
 8003e46:	b2db      	uxtb	r3, r3
 8003e48:	461a      	mov	r2, r3
 8003e4a:	79fb      	ldrb	r3, [r7, #7]
 8003e4c:	429a      	cmp	r2, r3
 8003e4e:	d0a6      	beq.n	8003d9e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003e50:	2300      	movs	r3, #0
}
 8003e52:	4618      	mov	r0, r3
 8003e54:	3710      	adds	r7, #16
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}

08003e5a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003e5a:	b480      	push	{r7}
 8003e5c:	b095      	sub	sp, #84	; 0x54
 8003e5e:	af00      	add	r7, sp, #0
 8003e60:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e6a:	e853 3f00 	ldrex	r3, [r3]
 8003e6e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003e70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e72:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003e76:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	461a      	mov	r2, r3
 8003e7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e80:	643b      	str	r3, [r7, #64]	; 0x40
 8003e82:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e84:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003e86:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003e88:	e841 2300 	strex	r3, r2, [r1]
 8003e8c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003e8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d1e6      	bne.n	8003e62 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	3308      	adds	r3, #8
 8003e9a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e9c:	6a3b      	ldr	r3, [r7, #32]
 8003e9e:	e853 3f00 	ldrex	r3, [r3]
 8003ea2:	61fb      	str	r3, [r7, #28]
   return(result);
 8003ea4:	69fb      	ldr	r3, [r7, #28]
 8003ea6:	f023 0301 	bic.w	r3, r3, #1
 8003eaa:	64bb      	str	r3, [r7, #72]	; 0x48
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	3308      	adds	r3, #8
 8003eb2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003eb4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003eb6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eb8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003eba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ebc:	e841 2300 	strex	r3, r2, [r1]
 8003ec0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d1e5      	bne.n	8003e94 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ecc:	2b01      	cmp	r3, #1
 8003ece:	d118      	bne.n	8003f02 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	e853 3f00 	ldrex	r3, [r3]
 8003edc:	60bb      	str	r3, [r7, #8]
   return(result);
 8003ede:	68bb      	ldr	r3, [r7, #8]
 8003ee0:	f023 0310 	bic.w	r3, r3, #16
 8003ee4:	647b      	str	r3, [r7, #68]	; 0x44
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	461a      	mov	r2, r3
 8003eec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003eee:	61bb      	str	r3, [r7, #24]
 8003ef0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ef2:	6979      	ldr	r1, [r7, #20]
 8003ef4:	69ba      	ldr	r2, [r7, #24]
 8003ef6:	e841 2300 	strex	r3, r2, [r1]
 8003efa:	613b      	str	r3, [r7, #16]
   return(result);
 8003efc:	693b      	ldr	r3, [r7, #16]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d1e6      	bne.n	8003ed0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2220      	movs	r2, #32
 8003f06:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2200      	movs	r2, #0
 8003f14:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003f16:	bf00      	nop
 8003f18:	3754      	adds	r7, #84	; 0x54
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f20:	4770      	bx	lr
	...

08003f24 <LED_Init>:
 * @author Carlos Ribeiro
 */

#include "led.h"

void LED_Init (void){
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b086      	sub	sp, #24
 8003f28:	af00      	add	r7, sp, #0

	  GPIO_InitTypeDef  GPIO_InitStruct;

	  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003f2a:	2340      	movs	r3, #64	; 0x40
 8003f2c:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003f2e:	2301      	movs	r3, #1
 8003f30:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull  = GPIO_PULLUP;
 8003f32:	2301      	movs	r3, #1
 8003f34:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f36:	2303      	movs	r3, #3
 8003f38:	613b      	str	r3, [r7, #16]
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f3a:	1d3b      	adds	r3, r7, #4
 8003f3c:	4619      	mov	r1, r3
 8003f3e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003f42:	f7fd fd19 	bl	8001978 <HAL_GPIO_Init>

	  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003f46:	2380      	movs	r3, #128	; 0x80
 8003f48:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull  = GPIO_PULLUP;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f52:	2303      	movs	r3, #3
 8003f54:	613b      	str	r3, [r7, #16]
	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f56:	1d3b      	adds	r3, r7, #4
 8003f58:	4619      	mov	r1, r3
 8003f5a:	4803      	ldr	r0, [pc, #12]	; (8003f68 <LED_Init+0x44>)
 8003f5c:	f7fd fd0c 	bl	8001978 <HAL_GPIO_Init>
}
 8003f60:	bf00      	nop
 8003f62:	3718      	adds	r7, #24
 8003f64:	46bd      	mov	sp, r7
 8003f66:	bd80      	pop	{r7, pc}
 8003f68:	48000400 	.word	0x48000400

08003f6c <LED_RedTurnOn>:

void LED_RedTurnOn (void){
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	af00      	add	r7, sp, #0

	 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 1);
 8003f70:	2201      	movs	r2, #1
 8003f72:	2180      	movs	r1, #128	; 0x80
 8003f74:	4802      	ldr	r0, [pc, #8]	; (8003f80 <LED_RedTurnOn+0x14>)
 8003f76:	f7fd ff4b 	bl	8001e10 <HAL_GPIO_WritePin>

}
 8003f7a:	bf00      	nop
 8003f7c:	bd80      	pop	{r7, pc}
 8003f7e:	bf00      	nop
 8003f80:	48000400 	.word	0x48000400

08003f84 <LED_RedTurnOff>:

void LED_RedTurnOff (void){
 8003f84:	b580      	push	{r7, lr}
 8003f86:	af00      	add	r7, sp, #0

	 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 0);
 8003f88:	2200      	movs	r2, #0
 8003f8a:	2180      	movs	r1, #128	; 0x80
 8003f8c:	4802      	ldr	r0, [pc, #8]	; (8003f98 <LED_RedTurnOff+0x14>)
 8003f8e:	f7fd ff3f 	bl	8001e10 <HAL_GPIO_WritePin>

}
 8003f92:	bf00      	nop
 8003f94:	bd80      	pop	{r7, pc}
 8003f96:	bf00      	nop
 8003f98:	48000400 	.word	0x48000400

08003f9c <LED_BlueTurnOn>:

void LED_BlueTurnOn (void){
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	af00      	add	r7, sp, #0

	 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 1);
 8003fa0:	2201      	movs	r2, #1
 8003fa2:	2140      	movs	r1, #64	; 0x40
 8003fa4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003fa8:	f7fd ff32 	bl	8001e10 <HAL_GPIO_WritePin>

}
 8003fac:	bf00      	nop
 8003fae:	bd80      	pop	{r7, pc}

08003fb0 <LED_BlueTurnOff>:

void LED_BlueTurnOff (void){
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	af00      	add	r7, sp, #0

	 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 0);
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	2140      	movs	r1, #64	; 0x40
 8003fb8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003fbc:	f7fd ff28 	bl	8001e10 <HAL_GPIO_WritePin>

}
 8003fc0:	bf00      	nop
 8003fc2:	bd80      	pop	{r7, pc}

08003fc4 <Lock_Init>:

#include "lock.h"
#include "utils.h"


void Lock_Init(LockTypeDef *Lock){
 8003fc4:	b5b0      	push	{r4, r5, r7, lr}
 8003fc6:	b086      	sub	sp, #24
 8003fc8:	af02      	add	r7, sp, #8
 8003fca:	6078      	str	r0, [r7, #4]

	for(int i = 0; i<NUM_OF_LOCKERS; i++){
 8003fcc:	2300      	movs	r3, #0
 8003fce:	60fb      	str	r3, [r7, #12]
 8003fd0:	e020      	b.n	8004014 <Lock_Init+0x50>
		  Lock_StructInit(&Lock[i], Lock_Pin1_GPIOx[i], Lock_Pin1[i],
 8003fd2:	68fa      	ldr	r2, [r7, #12]
 8003fd4:	4613      	mov	r3, r2
 8003fd6:	011b      	lsls	r3, r3, #4
 8003fd8:	1a9b      	subs	r3, r3, r2
 8003fda:	009b      	lsls	r3, r3, #2
 8003fdc:	461a      	mov	r2, r3
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	1898      	adds	r0, r3, r2
 8003fe2:	4a10      	ldr	r2, [pc, #64]	; (8004024 <Lock_Init+0x60>)
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003fea:	4a0f      	ldr	r2, [pc, #60]	; (8004028 <Lock_Init+0x64>)
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003ff2:	b29a      	uxth	r2, r3
		                 Lock_Pin2_GPIOx[i], Lock_Pin2[i]);
 8003ff4:	4c0d      	ldr	r4, [pc, #52]	; (800402c <Lock_Init+0x68>)
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	f854 4023 	ldr.w	r4, [r4, r3, lsl #2]
 8003ffc:	4d0c      	ldr	r5, [pc, #48]	; (8004030 <Lock_Init+0x6c>)
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	f835 3013 	ldrh.w	r3, [r5, r3, lsl #1]
 8004004:	b29b      	uxth	r3, r3
		  Lock_StructInit(&Lock[i], Lock_Pin1_GPIOx[i], Lock_Pin1[i],
 8004006:	9300      	str	r3, [sp, #0]
 8004008:	4623      	mov	r3, r4
 800400a:	f000 f813 	bl	8004034 <Lock_StructInit>
	for(int i = 0; i<NUM_OF_LOCKERS; i++){
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	3301      	adds	r3, #1
 8004012:	60fb      	str	r3, [r7, #12]
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	2b04      	cmp	r3, #4
 8004018:	dddb      	ble.n	8003fd2 <Lock_Init+0xe>

	}

}
 800401a:	bf00      	nop
 800401c:	bf00      	nop
 800401e:	3710      	adds	r7, #16
 8004020:	46bd      	mov	sp, r7
 8004022:	bdb0      	pop	{r4, r5, r7, pc}
 8004024:	20000044 	.word	0x20000044
 8004028:	2000002c 	.word	0x2000002c
 800402c:	20000058 	.word	0x20000058
 8004030:	20000038 	.word	0x20000038

08004034 <Lock_StructInit>:



void Lock_StructInit(LockTypeDef *Lock, GPIO_TypeDef *GPIOx1, uint16_t Pin1,
                     GPIO_TypeDef *GPIOx2, uint16_t Pin2) {
 8004034:	b580      	push	{r7, lr}
 8004036:	b084      	sub	sp, #16
 8004038:	af00      	add	r7, sp, #0
 800403a:	60f8      	str	r0, [r7, #12]
 800403c:	60b9      	str	r1, [r7, #8]
 800403e:	603b      	str	r3, [r7, #0]
 8004040:	4613      	mov	r3, r2
 8004042:	80fb      	strh	r3, [r7, #6]

    Lock->Lock_Pin1.GPIO_Init.Mode = GPIO_MODE_OUTPUT_PP;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	2201      	movs	r2, #1
 8004048:	609a      	str	r2, [r3, #8]
    Lock->Lock_Pin1.GPIO_Init.Pull = GPIO_PULLUP;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	2201      	movs	r2, #1
 800404e:	60da      	str	r2, [r3, #12]
    Lock->Lock_Pin1.GPIO_Init.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	2203      	movs	r2, #3
 8004054:	611a      	str	r2, [r3, #16]
    Lock->Lock_Pin1.GPIO_Init.Pin = Pin1;
 8004056:	88fa      	ldrh	r2, [r7, #6]
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	605a      	str	r2, [r3, #4]

    Lock->Lock_Pin1.GPIOx = GPIOx1;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	68ba      	ldr	r2, [r7, #8]
 8004060:	601a      	str	r2, [r3, #0]

    HAL_GPIO_Init(GPIOx1, &Lock->Lock_Pin1.GPIO_Init);
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	3304      	adds	r3, #4
 8004066:	4619      	mov	r1, r3
 8004068:	68b8      	ldr	r0, [r7, #8]
 800406a:	f7fd fc85 	bl	8001978 <HAL_GPIO_Init>

    Lock->Lock_Pin2.GPIO_Init.Mode = GPIO_MODE_IT_RISING ;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	f44f 1288 	mov.w	r2, #1114112	; 0x110000
 8004074:	621a      	str	r2, [r3, #32]
    Lock->Lock_Pin2.GPIO_Init.Pull = GPIO_PULLUP;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	2201      	movs	r2, #1
 800407a:	625a      	str	r2, [r3, #36]	; 0x24
    Lock->Lock_Pin2.GPIO_Init.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	2203      	movs	r2, #3
 8004080:	629a      	str	r2, [r3, #40]	; 0x28
    Lock->Lock_Pin2.GPIO_Init.Pin = Pin2;
 8004082:	8b3a      	ldrh	r2, [r7, #24]
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	61da      	str	r2, [r3, #28]

    Lock->Lock_Pin2.GPIOx = GPIOx2;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	683a      	ldr	r2, [r7, #0]
 800408c:	619a      	str	r2, [r3, #24]

    HAL_GPIO_Init(GPIOx2, &Lock->Lock_Pin2.GPIO_Init);
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	331c      	adds	r3, #28
 8004092:	4619      	mov	r1, r3
 8004094:	6838      	ldr	r0, [r7, #0]
 8004096:	f7fd fc6f 	bl	8001978 <HAL_GPIO_Init>


}
 800409a:	bf00      	nop
 800409c:	3710      	adds	r7, #16
 800409e:	46bd      	mov	sp, r7
 80040a0:	bd80      	pop	{r7, pc}

080040a2 <Lock_Toggle>:

void Lock_Toggle(LockTypeDef *Lock) {
 80040a2:	b580      	push	{r7, lr}
 80040a4:	b082      	sub	sp, #8
 80040a6:	af00      	add	r7, sp, #0
 80040a8:	6078      	str	r0, [r7, #4]

    HAL_GPIO_TogglePin(Lock->Lock_Pin1.GPIOx, Lock->Lock_Pin1.GPIO_Init.Pin);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681a      	ldr	r2, [r3, #0]
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	b29b      	uxth	r3, r3
 80040b4:	4619      	mov	r1, r3
 80040b6:	4610      	mov	r0, r2
 80040b8:	f7fd fec2 	bl	8001e40 <HAL_GPIO_TogglePin>

}
 80040bc:	bf00      	nop
 80040be:	3708      	adds	r7, #8
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bd80      	pop	{r7, pc}

080040c4 <Lock_Toggle_Wait_Toggle>:

bool Lock_Toggle_Wait_Toggle(LockTypeDef *Lock, uint8_t WaitMS){
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b086      	sub	sp, #24
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
 80040cc:	460b      	mov	r3, r1
 80040ce:	70fb      	strb	r3, [r7, #3]


	bool return_value = 0;
 80040d0:	2300      	movs	r3, #0
 80040d2:	75fb      	strb	r3, [r7, #23]

	Lock_Toggle(Lock);
 80040d4:	6878      	ldr	r0, [r7, #4]
 80040d6:	f7ff ffe4 	bl	80040a2 <Lock_Toggle>

	uint32_t tickstart = HAL_GetTick();
 80040da:	f7fd f873 	bl	80011c4 <HAL_GetTick>
 80040de:	6138      	str	r0, [r7, #16]
	uint32_t wait = WaitMS;
 80040e0:	78fb      	ldrb	r3, [r7, #3]
 80040e2:	60fb      	str	r3, [r7, #12]
	while((HAL_GetTick() - tickstart) < wait){
 80040e4:	e00e      	b.n	8004104 <Lock_Toggle_Wait_Toggle+0x40>
		if(HAL_GPIO_ReadPin(Lock->Lock_Pin2.GPIOx, Lock->Lock_Pin2.GPIO_Init.Pin)){
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	699a      	ldr	r2, [r3, #24]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	69db      	ldr	r3, [r3, #28]
 80040ee:	b29b      	uxth	r3, r3
 80040f0:	4619      	mov	r1, r3
 80040f2:	4610      	mov	r0, r2
 80040f4:	f7fd fe74 	bl	8001de0 <HAL_GPIO_ReadPin>
 80040f8:	4603      	mov	r3, r0
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d002      	beq.n	8004104 <Lock_Toggle_Wait_Toggle+0x40>
			return_value = 1;
 80040fe:	2301      	movs	r3, #1
 8004100:	75fb      	strb	r3, [r7, #23]
			break;
 8004102:	e007      	b.n	8004114 <Lock_Toggle_Wait_Toggle+0x50>
	while((HAL_GetTick() - tickstart) < wait){
 8004104:	f7fd f85e 	bl	80011c4 <HAL_GetTick>
 8004108:	4602      	mov	r2, r0
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	1ad3      	subs	r3, r2, r3
 800410e:	68fa      	ldr	r2, [r7, #12]
 8004110:	429a      	cmp	r2, r3
 8004112:	d8e8      	bhi.n	80040e6 <Lock_Toggle_Wait_Toggle+0x22>
		}
	}

	Lock_Toggle(Lock);
 8004114:	6878      	ldr	r0, [r7, #4]
 8004116:	f7ff ffc4 	bl	80040a2 <Lock_Toggle>

	return return_value;
 800411a:	7dfb      	ldrb	r3, [r7, #23]

}
 800411c:	4618      	mov	r0, r3
 800411e:	3718      	adds	r7, #24
 8004120:	46bd      	mov	sp, r7
 8004122:	bd80      	pop	{r7, pc}

08004124 <Lock_AddErrorLog>:

void Lock_AddErrorLog (Logs_TypeDef *Logs, uint32_t Pin, uint8_t errorCode){
 8004124:	b480      	push	{r7}
 8004126:	b085      	sub	sp, #20
 8004128:	af00      	add	r7, sp, #0
 800412a:	60f8      	str	r0, [r7, #12]
 800412c:	60b9      	str	r1, [r7, #8]
 800412e:	4613      	mov	r3, r2
 8004130:	71fb      	strb	r3, [r7, #7]

		if (logsCount == NUM_OF_LOGS) logsCount= 0;
 8004132:	4b13      	ldr	r3, [pc, #76]	; (8004180 <Lock_AddErrorLog+0x5c>)
 8004134:	781b      	ldrb	r3, [r3, #0]
 8004136:	b2db      	uxtb	r3, r3
 8004138:	2b64      	cmp	r3, #100	; 0x64
 800413a:	d102      	bne.n	8004142 <Lock_AddErrorLog+0x1e>
 800413c:	4b10      	ldr	r3, [pc, #64]	; (8004180 <Lock_AddErrorLog+0x5c>)
 800413e:	2200      	movs	r2, #0
 8004140:	701a      	strb	r2, [r3, #0]
		Logs[logsCount].Locker_Pin = Pin;
 8004142:	4b0f      	ldr	r3, [pc, #60]	; (8004180 <Lock_AddErrorLog+0x5c>)
 8004144:	781b      	ldrb	r3, [r3, #0]
 8004146:	b2db      	uxtb	r3, r3
 8004148:	009b      	lsls	r3, r3, #2
 800414a:	68fa      	ldr	r2, [r7, #12]
 800414c:	4413      	add	r3, r2
 800414e:	68ba      	ldr	r2, [r7, #8]
 8004150:	b292      	uxth	r2, r2
 8004152:	801a      	strh	r2, [r3, #0]
		Logs[logsCount].Error_Code = errorCode;
 8004154:	4b0a      	ldr	r3, [pc, #40]	; (8004180 <Lock_AddErrorLog+0x5c>)
 8004156:	781b      	ldrb	r3, [r3, #0]
 8004158:	b2db      	uxtb	r3, r3
 800415a:	009b      	lsls	r3, r3, #2
 800415c:	68fa      	ldr	r2, [r7, #12]
 800415e:	4413      	add	r3, r2
 8004160:	79fa      	ldrb	r2, [r7, #7]
 8004162:	709a      	strb	r2, [r3, #2]
		logsCount++;
 8004164:	4b06      	ldr	r3, [pc, #24]	; (8004180 <Lock_AddErrorLog+0x5c>)
 8004166:	781b      	ldrb	r3, [r3, #0]
 8004168:	b2db      	uxtb	r3, r3
 800416a:	3301      	adds	r3, #1
 800416c:	b2da      	uxtb	r2, r3
 800416e:	4b04      	ldr	r3, [pc, #16]	; (8004180 <Lock_AddErrorLog+0x5c>)
 8004170:	701a      	strb	r2, [r3, #0]

}
 8004172:	bf00      	nop
 8004174:	3714      	adds	r7, #20
 8004176:	46bd      	mov	sp, r7
 8004178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417c:	4770      	bx	lr
 800417e:	bf00      	nop
 8004180:	20000428 	.word	0x20000428

08004184 <Lock_SaveToFlash>:

void Lock_SaveToFlash(LockTypeDef *Lock) {
 8004184:	b580      	push	{r7, lr}
 8004186:	b09a      	sub	sp, #104	; 0x68
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
    SimplifiedLockTypeDef simplifiedLocks[NUM_OF_LOCKERS];
    for (int i = 0; i < NUM_OF_LOCKERS; i++) {
 800418c:	2300      	movs	r3, #0
 800418e:	667b      	str	r3, [r7, #100]	; 0x64
 8004190:	e015      	b.n	80041be <Lock_SaveToFlash+0x3a>
        ConvertLockToSimplified(&Lock[i], &simplifiedLocks[i]);
 8004192:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004194:	4613      	mov	r3, r2
 8004196:	011b      	lsls	r3, r3, #4
 8004198:	1a9b      	subs	r3, r3, r2
 800419a:	009b      	lsls	r3, r3, #2
 800419c:	461a      	mov	r2, r3
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	1898      	adds	r0, r3, r2
 80041a2:	f107 0108 	add.w	r1, r7, #8
 80041a6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80041a8:	4613      	mov	r3, r2
 80041aa:	00db      	lsls	r3, r3, #3
 80041ac:	4413      	add	r3, r2
 80041ae:	005b      	lsls	r3, r3, #1
 80041b0:	440b      	add	r3, r1
 80041b2:	4619      	mov	r1, r3
 80041b4:	f000 fbba 	bl	800492c <ConvertLockToSimplified>
    for (int i = 0; i < NUM_OF_LOCKERS; i++) {
 80041b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80041ba:	3301      	adds	r3, #1
 80041bc:	667b      	str	r3, [r7, #100]	; 0x64
 80041be:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80041c0:	2b04      	cmp	r3, #4
 80041c2:	dde6      	ble.n	8004192 <Lock_SaveToFlash+0xe>
    }

    // Save the array of simplified locks to Flash memory
    WriteStructToFlash(FLASH_USER_START_ADDR, simplifiedLocks, sizeof(simplifiedLocks));
 80041c4:	f107 0308 	add.w	r3, r7, #8
 80041c8:	225a      	movs	r2, #90	; 0x5a
 80041ca:	4619      	mov	r1, r3
 80041cc:	4803      	ldr	r0, [pc, #12]	; (80041dc <Lock_SaveToFlash+0x58>)
 80041ce:	f000 fb19 	bl	8004804 <WriteStructToFlash>
}
 80041d2:	bf00      	nop
 80041d4:	3768      	adds	r7, #104	; 0x68
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bd80      	pop	{r7, pc}
 80041da:	bf00      	nop
 80041dc:	0801f800 	.word	0x0801f800

080041e0 <Lock_ReadFromFlash>:

void Lock_ReadFromFlash(LockTypeDef *Lock) {
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b09a      	sub	sp, #104	; 0x68
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
    if (!IsFlashDataValid()) {
 80041e8:	f000 fbda 	bl	80049a0 <IsFlashDataValid>
 80041ec:	4603      	mov	r3, r0
 80041ee:	f083 0301 	eor.w	r3, r3, #1
 80041f2:	b2db      	uxtb	r3, r3
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d162      	bne.n	80042be <Lock_ReadFromFlash+0xde>
        // Handle the case where no valid data is found
        return;
    }

    SimplifiedLockTypeDef simplifiedLocks[NUM_OF_LOCKERS];
    ReadStructFromFlash(FLASH_USER_START_ADDR, simplifiedLocks, sizeof(simplifiedLocks));
 80041f8:	f107 0308 	add.w	r3, r7, #8
 80041fc:	225a      	movs	r2, #90	; 0x5a
 80041fe:	4619      	mov	r1, r3
 8004200:	4831      	ldr	r0, [pc, #196]	; (80042c8 <Lock_ReadFromFlash+0xe8>)
 8004202:	f000 fbbd 	bl	8004980 <ReadStructFromFlash>

    for (int i = 0; i < NUM_OF_LOCKERS; i++) {
 8004206:	2300      	movs	r3, #0
 8004208:	667b      	str	r3, [r7, #100]	; 0x64
 800420a:	e054      	b.n	80042b6 <Lock_ReadFromFlash+0xd6>
        Lock[i].isFull = simplifiedLocks[i].isFull;
 800420c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800420e:	4613      	mov	r3, r2
 8004210:	011b      	lsls	r3, r3, #4
 8004212:	1a9b      	subs	r3, r3, r2
 8004214:	009b      	lsls	r3, r3, #2
 8004216:	461a      	mov	r2, r3
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	1899      	adds	r1, r3, r2
 800421c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800421e:	4613      	mov	r3, r2
 8004220:	00db      	lsls	r3, r3, #3
 8004222:	4413      	add	r3, r2
 8004224:	005b      	lsls	r3, r3, #1
 8004226:	3368      	adds	r3, #104	; 0x68
 8004228:	443b      	add	r3, r7
 800422a:	3b58      	subs	r3, #88	; 0x58
 800422c:	781b      	ldrb	r3, [r3, #0]
 800422e:	f881 3030 	strb.w	r3, [r1, #48]	; 0x30
        memcpy(Lock[i].PIN1, simplifiedLocks[i].PIN1, PIN_SIZE);
 8004232:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004234:	4613      	mov	r3, r2
 8004236:	011b      	lsls	r3, r3, #4
 8004238:	1a9b      	subs	r3, r3, r2
 800423a:	009b      	lsls	r3, r3, #2
 800423c:	461a      	mov	r2, r3
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	4413      	add	r3, r2
 8004242:	f103 0131 	add.w	r1, r3, #49	; 0x31
 8004246:	f107 0008 	add.w	r0, r7, #8
 800424a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800424c:	4613      	mov	r3, r2
 800424e:	00db      	lsls	r3, r3, #3
 8004250:	4413      	add	r3, r2
 8004252:	005b      	lsls	r3, r3, #1
 8004254:	3308      	adds	r3, #8
 8004256:	4403      	add	r3, r0
 8004258:	3301      	adds	r3, #1
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	600b      	str	r3, [r1, #0]
        memcpy(Lock[i].PIN2, simplifiedLocks[i].PIN2, PIN_SIZE);
 800425e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004260:	4613      	mov	r3, r2
 8004262:	011b      	lsls	r3, r3, #4
 8004264:	1a9b      	subs	r3, r3, r2
 8004266:	009b      	lsls	r3, r3, #2
 8004268:	461a      	mov	r2, r3
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	4413      	add	r3, r2
 800426e:	f103 0135 	add.w	r1, r3, #53	; 0x35
 8004272:	f107 0008 	add.w	r0, r7, #8
 8004276:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004278:	4613      	mov	r3, r2
 800427a:	00db      	lsls	r3, r3, #3
 800427c:	4413      	add	r3, r2
 800427e:	005b      	lsls	r3, r3, #1
 8004280:	3308      	adds	r3, #8
 8004282:	4403      	add	r3, r0
 8004284:	3305      	adds	r3, #5
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	600b      	str	r3, [r1, #0]
        Lock[i].isVandalized = simplifiedLocks[i].isVandalized;
 800428a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800428c:	4613      	mov	r3, r2
 800428e:	011b      	lsls	r3, r3, #4
 8004290:	1a9b      	subs	r3, r3, r2
 8004292:	009b      	lsls	r3, r3, #2
 8004294:	461a      	mov	r2, r3
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	1899      	adds	r1, r3, r2
 800429a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800429c:	4613      	mov	r3, r2
 800429e:	00db      	lsls	r3, r3, #3
 80042a0:	4413      	add	r3, r2
 80042a2:	005b      	lsls	r3, r3, #1
 80042a4:	3368      	adds	r3, #104	; 0x68
 80042a6:	443b      	add	r3, r7
 80042a8:	3b4f      	subs	r3, #79	; 0x4f
 80042aa:	781b      	ldrb	r3, [r3, #0]
 80042ac:	f881 3039 	strb.w	r3, [r1, #57]	; 0x39
    for (int i = 0; i < NUM_OF_LOCKERS; i++) {
 80042b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80042b2:	3301      	adds	r3, #1
 80042b4:	667b      	str	r3, [r7, #100]	; 0x64
 80042b6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80042b8:	2b04      	cmp	r3, #4
 80042ba:	dda7      	ble.n	800420c <Lock_ReadFromFlash+0x2c>
 80042bc:	e000      	b.n	80042c0 <Lock_ReadFromFlash+0xe0>
        return;
 80042be:	bf00      	nop
    }
}
 80042c0:	3768      	adds	r7, #104	; 0x68
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bd80      	pop	{r7, pc}
 80042c6:	bf00      	nop
 80042c8:	0801f800 	.word	0x0801f800

080042cc <Scanner_Init>:

#include "scanner.h"

uint8_t aRxBufferCheckSuccess[QRREADER_CODE_SUCESS_SIZE];

void Scanner_Init (UART_HandleTypeDef *UartHandle){
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b082      	sub	sp, #8
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]

	  UartHandle->Instance = USART1;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	4a16      	ldr	r2, [pc, #88]	; (8004330 <Scanner_Init+0x64>)
 80042d8:	601a      	str	r2, [r3, #0]
	  UartHandle->Init.BaudRate = 9600;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80042e0:	605a      	str	r2, [r3, #4]
	  UartHandle->Init.WordLength = UART_WORDLENGTH_8B;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2200      	movs	r2, #0
 80042e6:	609a      	str	r2, [r3, #8]
	  UartHandle->Init.StopBits = UART_STOPBITS_1;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2200      	movs	r2, #0
 80042ec:	60da      	str	r2, [r3, #12]
	  UartHandle->Init.Parity = UART_PARITY_NONE;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2200      	movs	r2, #0
 80042f2:	611a      	str	r2, [r3, #16]
	  UartHandle->Init.Mode = UART_MODE_TX_RX;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	220c      	movs	r2, #12
 80042f8:	615a      	str	r2, [r3, #20]
	  UartHandle->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2200      	movs	r2, #0
 80042fe:	619a      	str	r2, [r3, #24]
	  UartHandle->Init.OverSampling = UART_OVERSAMPLING_16;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2200      	movs	r2, #0
 8004304:	61da      	str	r2, [r3, #28]
	//  UartHandle->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
	//  UartHandle->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;

	  if(HAL_UART_DeInit(UartHandle) != HAL_OK)
 8004306:	6878      	ldr	r0, [r7, #4]
 8004308:	f7ff f83a 	bl	8003380 <HAL_UART_DeInit>
 800430c:	4603      	mov	r3, r0
 800430e:	2b00      	cmp	r3, #0
 8004310:	d001      	beq.n	8004316 <Scanner_Init+0x4a>
	  {
	    Error_Handler();
 8004312:	f7fc fd99 	bl	8000e48 <Error_Handler>
	  }
	  if(HAL_UART_Init(UartHandle) != HAL_OK)
 8004316:	6878      	ldr	r0, [r7, #4]
 8004318:	f7fe ffe4 	bl	80032e4 <HAL_UART_Init>
 800431c:	4603      	mov	r3, r0
 800431e:	2b00      	cmp	r3, #0
 8004320:	d001      	beq.n	8004326 <Scanner_Init+0x5a>
	  {
	    Error_Handler();
 8004322:	f7fc fd91 	bl	8000e48 <Error_Handler>
	  }

}
 8004326:	bf00      	nop
 8004328:	3708      	adds	r7, #8
 800432a:	46bd      	mov	sp, r7
 800432c:	bd80      	pop	{r7, pc}
 800432e:	bf00      	nop
 8004330:	40013800 	.word	0x40013800

08004334 <Scanner_Sleep>:

uint8_t Scanner_Sleep (UART_HandleTypeDef *UartHandle){
 8004334:	b580      	push	{r7, lr}
 8004336:	b082      	sub	sp, #8
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]

	memset(aRxBufferCheckSuccess, 0, QRREADER_CODE_SUCESS_SIZE);
 800433c:	2207      	movs	r2, #7
 800433e:	2100      	movs	r1, #0
 8004340:	480f      	ldr	r0, [pc, #60]	; (8004380 <Scanner_Sleep+0x4c>)
 8004342:	f000 fb9b 	bl	8004a7c <memset>

	HAL_UART_Transmit(UartHandle, (uint8_t*)turn_off_lights_command, QRREADER_CODE_SIZE, QRREADER_TIMEOUT);
 8004346:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800434a:	2209      	movs	r2, #9
 800434c:	490d      	ldr	r1, [pc, #52]	; (8004384 <Scanner_Sleep+0x50>)
 800434e:	6878      	ldr	r0, [r7, #4]
 8004350:	f7ff f853 	bl	80033fa <HAL_UART_Transmit>
	HAL_UART_Receive(UartHandle, (uint8_t*)aRxBufferCheckSuccess,  QRREADER_CODE_SUCESS_SIZE, QRREADER_TIMEOUT);
 8004354:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8004358:	2207      	movs	r2, #7
 800435a:	4909      	ldr	r1, [pc, #36]	; (8004380 <Scanner_Sleep+0x4c>)
 800435c:	6878      	ldr	r0, [r7, #4]
 800435e:	f7ff f8d6 	bl	800350e <HAL_UART_Receive>

    // Check if the received buffer matches the expected success code
    if (memcmp(aRxBufferCheckSuccess, turn_off_lights_successful,  QRREADER_CODE_SUCESS_SIZE) == 0) {
 8004362:	2207      	movs	r2, #7
 8004364:	4908      	ldr	r1, [pc, #32]	; (8004388 <Scanner_Sleep+0x54>)
 8004366:	4806      	ldr	r0, [pc, #24]	; (8004380 <Scanner_Sleep+0x4c>)
 8004368:	f000 fb78 	bl	8004a5c <memcmp>
 800436c:	4603      	mov	r3, r0
 800436e:	2b00      	cmp	r3, #0
 8004370:	d101      	bne.n	8004376 <Scanner_Sleep+0x42>
        return 1;
 8004372:	2301      	movs	r3, #1
 8004374:	e000      	b.n	8004378 <Scanner_Sleep+0x44>
    } else {
        return 0;
 8004376:	2300      	movs	r3, #0
    }

}
 8004378:	4618      	mov	r0, r3
 800437a:	3708      	adds	r7, #8
 800437c:	46bd      	mov	sp, r7
 800437e:	bd80      	pop	{r7, pc}
 8004380:	2000042c 	.word	0x2000042c
 8004384:	2000006c 	.word	0x2000006c
 8004388:	200000a8 	.word	0x200000a8

0800438c <Scanner_Configure>:

uint8_t Scanner_Configure(UART_HandleTypeDef *UartHandle ){
 800438c:	b580      	push	{r7, lr}
 800438e:	b082      	sub	sp, #8
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]

	  memset(aRxBufferCheckSuccess, 0, QRREADER_CODE_SUCESS_SIZE);
 8004394:	2207      	movs	r2, #7
 8004396:	2100      	movs	r1, #0
 8004398:	4827      	ldr	r0, [pc, #156]	; (8004438 <Scanner_Configure+0xac>)
 800439a:	f000 fb6f 	bl	8004a7c <memset>

	  HAL_UART_Transmit(UartHandle, (uint8_t*)configure_command, QRREADER_CODE_SIZE, QRREADER_TIMEOUT);
 800439e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80043a2:	2209      	movs	r2, #9
 80043a4:	4925      	ldr	r1, [pc, #148]	; (800443c <Scanner_Configure+0xb0>)
 80043a6:	6878      	ldr	r0, [r7, #4]
 80043a8:	f7ff f827 	bl	80033fa <HAL_UART_Transmit>
	  HAL_UART_Receive(UartHandle, (uint8_t*)aRxBufferCheckSuccess, QRREADER_CODE_SUCESS_SIZE, QRREADER_TIMEOUT);
 80043ac:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80043b0:	2207      	movs	r2, #7
 80043b2:	4921      	ldr	r1, [pc, #132]	; (8004438 <Scanner_Configure+0xac>)
 80043b4:	6878      	ldr	r0, [r7, #4]
 80043b6:	f7ff f8aa 	bl	800350e <HAL_UART_Receive>

	    if (memcmp(aRxBufferCheckSuccess, configure_successful, QRREADER_CODE_SUCESS_SIZE) != 0) {
 80043ba:	2207      	movs	r2, #7
 80043bc:	4920      	ldr	r1, [pc, #128]	; (8004440 <Scanner_Configure+0xb4>)
 80043be:	481e      	ldr	r0, [pc, #120]	; (8004438 <Scanner_Configure+0xac>)
 80043c0:	f000 fb4c 	bl	8004a5c <memcmp>
 80043c4:	4603      	mov	r3, r0
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d001      	beq.n	80043ce <Scanner_Configure+0x42>
	        return 0;
 80043ca:	2300      	movs	r3, #0
 80043cc:	e030      	b.n	8004430 <Scanner_Configure+0xa4>
	    }

	  //memset(aRxBufferCheckSuccess, 0, QRREADER_CODE_SUCESS_SIZE);

	  HAL_UART_Transmit(UartHandle, (uint8_t*)configure2_command, QRREADER_CODE_SIZE, QRREADER_TIMEOUT);
 80043ce:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80043d2:	2209      	movs	r2, #9
 80043d4:	491b      	ldr	r1, [pc, #108]	; (8004444 <Scanner_Configure+0xb8>)
 80043d6:	6878      	ldr	r0, [r7, #4]
 80043d8:	f7ff f80f 	bl	80033fa <HAL_UART_Transmit>
	  HAL_UART_Receive(UartHandle, (uint8_t*)aRxBufferCheckSuccess, QRREADER_CODE_SUCESS_SIZE, QRREADER_TIMEOUT);
 80043dc:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80043e0:	2207      	movs	r2, #7
 80043e2:	4915      	ldr	r1, [pc, #84]	; (8004438 <Scanner_Configure+0xac>)
 80043e4:	6878      	ldr	r0, [r7, #4]
 80043e6:	f7ff f892 	bl	800350e <HAL_UART_Receive>

	    if (memcmp(aRxBufferCheckSuccess, configure_successful, QRREADER_CODE_SUCESS_SIZE) != 0) {
 80043ea:	2207      	movs	r2, #7
 80043ec:	4914      	ldr	r1, [pc, #80]	; (8004440 <Scanner_Configure+0xb4>)
 80043ee:	4812      	ldr	r0, [pc, #72]	; (8004438 <Scanner_Configure+0xac>)
 80043f0:	f000 fb34 	bl	8004a5c <memcmp>
 80043f4:	4603      	mov	r3, r0
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d001      	beq.n	80043fe <Scanner_Configure+0x72>
	        return 0;
 80043fa:	2300      	movs	r3, #0
 80043fc:	e018      	b.n	8004430 <Scanner_Configure+0xa4>
	    }

	  //memset(aRxBufferCheckSuccess, 0, QRREADER_CODE_SUCESS_SIZE);

	  HAL_UART_Transmit(UartHandle, (uint8_t*)configure3_command, QRREADER_CODE_SIZE, QRREADER_TIMEOUT);
 80043fe:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8004402:	2209      	movs	r2, #9
 8004404:	4910      	ldr	r1, [pc, #64]	; (8004448 <Scanner_Configure+0xbc>)
 8004406:	6878      	ldr	r0, [r7, #4]
 8004408:	f7fe fff7 	bl	80033fa <HAL_UART_Transmit>
	  HAL_UART_Receive(UartHandle, (uint8_t*)aRxBufferCheckSuccess, QRREADER_CODE_SUCESS_SIZE, QRREADER_TIMEOUT);
 800440c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8004410:	2207      	movs	r2, #7
 8004412:	4909      	ldr	r1, [pc, #36]	; (8004438 <Scanner_Configure+0xac>)
 8004414:	6878      	ldr	r0, [r7, #4]
 8004416:	f7ff f87a 	bl	800350e <HAL_UART_Receive>

	    if (memcmp(aRxBufferCheckSuccess, configure_successful, QRREADER_CODE_SUCESS_SIZE) != 0) {
 800441a:	2207      	movs	r2, #7
 800441c:	4908      	ldr	r1, [pc, #32]	; (8004440 <Scanner_Configure+0xb4>)
 800441e:	4806      	ldr	r0, [pc, #24]	; (8004438 <Scanner_Configure+0xac>)
 8004420:	f000 fb1c 	bl	8004a5c <memcmp>
 8004424:	4603      	mov	r3, r0
 8004426:	2b00      	cmp	r3, #0
 8004428:	d001      	beq.n	800442e <Scanner_Configure+0xa2>
	        return 0;
 800442a:	2300      	movs	r3, #0
 800442c:	e000      	b.n	8004430 <Scanner_Configure+0xa4>
	    }


	  return 1;
 800442e:	2301      	movs	r3, #1

}
 8004430:	4618      	mov	r0, r3
 8004432:	3708      	adds	r7, #8
 8004434:	46bd      	mov	sp, r7
 8004436:	bd80      	pop	{r7, pc}
 8004438:	2000042c 	.word	0x2000042c
 800443c:	20000084 	.word	0x20000084
 8004440:	200000b0 	.word	0x200000b0
 8004444:	20000090 	.word	0x20000090
 8004448:	2000009c 	.word	0x2000009c

0800444c <Scanner_TurnOn>:

uint8_t Scanner_TurnOn(UART_HandleTypeDef *UartHandle ){
 800444c:	b580      	push	{r7, lr}
 800444e:	b082      	sub	sp, #8
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]

	  memset(aRxBufferCheckSuccess, 0, QRREADER_CODE_SUCESS_SIZE);
 8004454:	2207      	movs	r2, #7
 8004456:	2100      	movs	r1, #0
 8004458:	480f      	ldr	r0, [pc, #60]	; (8004498 <Scanner_TurnOn+0x4c>)
 800445a:	f000 fb0f 	bl	8004a7c <memset>

	  HAL_UART_Transmit(UartHandle, (uint8_t*)turn_on_lights_command, QRREADER_CODE_SIZE, QRREADER_TIMEOUT);
 800445e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8004462:	2209      	movs	r2, #9
 8004464:	490d      	ldr	r1, [pc, #52]	; (800449c <Scanner_TurnOn+0x50>)
 8004466:	6878      	ldr	r0, [r7, #4]
 8004468:	f7fe ffc7 	bl	80033fa <HAL_UART_Transmit>
	  HAL_UART_Receive(UartHandle, (uint8_t*)aRxBufferCheckSuccess,  QRREADER_CODE_SUCESS_SIZE, QRREADER_TIMEOUT);
 800446c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8004470:	2207      	movs	r2, #7
 8004472:	4909      	ldr	r1, [pc, #36]	; (8004498 <Scanner_TurnOn+0x4c>)
 8004474:	6878      	ldr	r0, [r7, #4]
 8004476:	f7ff f84a 	bl	800350e <HAL_UART_Receive>

	    if (memcmp(aRxBufferCheckSuccess, turn_on_lights_successful,  QRREADER_CODE_SUCESS_SIZE) == 0) {
 800447a:	2207      	movs	r2, #7
 800447c:	4908      	ldr	r1, [pc, #32]	; (80044a0 <Scanner_TurnOn+0x54>)
 800447e:	4806      	ldr	r0, [pc, #24]	; (8004498 <Scanner_TurnOn+0x4c>)
 8004480:	f000 faec 	bl	8004a5c <memcmp>
 8004484:	4603      	mov	r3, r0
 8004486:	2b00      	cmp	r3, #0
 8004488:	d101      	bne.n	800448e <Scanner_TurnOn+0x42>
	        return 1;
 800448a:	2301      	movs	r3, #1
 800448c:	e000      	b.n	8004490 <Scanner_TurnOn+0x44>
	    } else {
	        return 0;
 800448e:	2300      	movs	r3, #0
	    }
}
 8004490:	4618      	mov	r0, r3
 8004492:	3708      	adds	r7, #8
 8004494:	46bd      	mov	sp, r7
 8004496:	bd80      	pop	{r7, pc}
 8004498:	2000042c 	.word	0x2000042c
 800449c:	20000078 	.word	0x20000078
 80044a0:	200000b8 	.word	0x200000b8

080044a4 <Scanner_ReceiveQRCode>:

uint8_t Scanner_ReceiveQRCode(UART_HandleTypeDef *UartHandle, const uint8_t *rcvBuffer, uint16_t Size, uint32_t Timeout){
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b084      	sub	sp, #16
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	60f8      	str	r0, [r7, #12]
 80044ac:	60b9      	str	r1, [r7, #8]
 80044ae:	603b      	str	r3, [r7, #0]
 80044b0:	4613      	mov	r3, r2
 80044b2:	80fb      	strh	r3, [r7, #6]

	return (HAL_UART_Receive(UartHandle, (uint8_t*)rcvBuffer, Size, Timeout));
 80044b4:	88fa      	ldrh	r2, [r7, #6]
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	68b9      	ldr	r1, [r7, #8]
 80044ba:	68f8      	ldr	r0, [r7, #12]
 80044bc:	f7ff f827 	bl	800350e <HAL_UART_Receive>
 80044c0:	4603      	mov	r3, r0

}
 80044c2:	4618      	mov	r0, r3
 80044c4:	3710      	adds	r7, #16
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd80      	pop	{r7, pc}

080044ca <Security_GetQRCodeType>:
 */

#include "security.h"


uint8_t Security_GetQRCodeType(const uint8_t *array,uint8_t coord1, uint8_t coord2, size_t size) {
 80044ca:	b480      	push	{r7}
 80044cc:	b085      	sub	sp, #20
 80044ce:	af00      	add	r7, sp, #0
 80044d0:	60f8      	str	r0, [r7, #12]
 80044d2:	607b      	str	r3, [r7, #4]
 80044d4:	460b      	mov	r3, r1
 80044d6:	72fb      	strb	r3, [r7, #11]
 80044d8:	4613      	mov	r3, r2
 80044da:	72bb      	strb	r3, [r7, #10]

    if(array[coord1]+array[coord2]==MAILMAN_CHECKSUM) return MAILMAN;
 80044dc:	7afb      	ldrb	r3, [r7, #11]
 80044de:	68fa      	ldr	r2, [r7, #12]
 80044e0:	4413      	add	r3, r2
 80044e2:	781b      	ldrb	r3, [r3, #0]
 80044e4:	4619      	mov	r1, r3
 80044e6:	7abb      	ldrb	r3, [r7, #10]
 80044e8:	68fa      	ldr	r2, [r7, #12]
 80044ea:	4413      	add	r3, r2
 80044ec:	781b      	ldrb	r3, [r3, #0]
 80044ee:	440b      	add	r3, r1
 80044f0:	2b96      	cmp	r3, #150	; 0x96
 80044f2:	d101      	bne.n	80044f8 <Security_GetQRCodeType+0x2e>
 80044f4:	2301      	movs	r3, #1
 80044f6:	e02a      	b.n	800454e <Security_GetQRCodeType+0x84>

    if(array[coord1]+array[coord2]==CLIENT_CHECKSUM) return CLIENT;
 80044f8:	7afb      	ldrb	r3, [r7, #11]
 80044fa:	68fa      	ldr	r2, [r7, #12]
 80044fc:	4413      	add	r3, r2
 80044fe:	781b      	ldrb	r3, [r3, #0]
 8004500:	4619      	mov	r1, r3
 8004502:	7abb      	ldrb	r3, [r7, #10]
 8004504:	68fa      	ldr	r2, [r7, #12]
 8004506:	4413      	add	r3, r2
 8004508:	781b      	ldrb	r3, [r3, #0]
 800450a:	440b      	add	r3, r1
 800450c:	2b9b      	cmp	r3, #155	; 0x9b
 800450e:	d101      	bne.n	8004514 <Security_GetQRCodeType+0x4a>
 8004510:	2302      	movs	r3, #2
 8004512:	e01c      	b.n	800454e <Security_GetQRCodeType+0x84>

    if(array[coord1]+array[coord2]==MAINTENANCE_CHECKSUM) return MAINTENANCE;
 8004514:	7afb      	ldrb	r3, [r7, #11]
 8004516:	68fa      	ldr	r2, [r7, #12]
 8004518:	4413      	add	r3, r2
 800451a:	781b      	ldrb	r3, [r3, #0]
 800451c:	4619      	mov	r1, r3
 800451e:	7abb      	ldrb	r3, [r7, #10]
 8004520:	68fa      	ldr	r2, [r7, #12]
 8004522:	4413      	add	r3, r2
 8004524:	781b      	ldrb	r3, [r3, #0]
 8004526:	440b      	add	r3, r1
 8004528:	2ba0      	cmp	r3, #160	; 0xa0
 800452a:	d101      	bne.n	8004530 <Security_GetQRCodeType+0x66>
 800452c:	2303      	movs	r3, #3
 800452e:	e00e      	b.n	800454e <Security_GetQRCodeType+0x84>

    if(array[coord1]+array[coord2]==RECOVERY_CHECKSUM) return RECOVERY;
 8004530:	7afb      	ldrb	r3, [r7, #11]
 8004532:	68fa      	ldr	r2, [r7, #12]
 8004534:	4413      	add	r3, r2
 8004536:	781b      	ldrb	r3, [r3, #0]
 8004538:	4619      	mov	r1, r3
 800453a:	7abb      	ldrb	r3, [r7, #10]
 800453c:	68fa      	ldr	r2, [r7, #12]
 800453e:	4413      	add	r3, r2
 8004540:	781b      	ldrb	r3, [r3, #0]
 8004542:	440b      	add	r3, r1
 8004544:	2ba5      	cmp	r3, #165	; 0xa5
 8004546:	d101      	bne.n	800454c <Security_GetQRCodeType+0x82>
 8004548:	2304      	movs	r3, #4
 800454a:	e000      	b.n	800454e <Security_GetQRCodeType+0x84>

    return INVALID;
 800454c:	2300      	movs	r3, #0
}
 800454e:	4618      	mov	r0, r3
 8004550:	3714      	adds	r7, #20
 8004552:	46bd      	mov	sp, r7
 8004554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004558:	4770      	bx	lr

0800455a <Security_GetLockerPosition>:

uint8_t Security_GetLockerPosition(const uint8_t *array, uint8_t coord_col, uint8_t coord_lin) {
 800455a:	b480      	push	{r7}
 800455c:	b085      	sub	sp, #20
 800455e:	af00      	add	r7, sp, #0
 8004560:	6078      	str	r0, [r7, #4]
 8004562:	460b      	mov	r3, r1
 8004564:	70fb      	strb	r3, [r7, #3]
 8004566:	4613      	mov	r3, r2
 8004568:	70bb      	strb	r3, [r7, #2]

    uint8_t col = array[coord_col];
 800456a:	78fb      	ldrb	r3, [r7, #3]
 800456c:	687a      	ldr	r2, [r7, #4]
 800456e:	4413      	add	r3, r2
 8004570:	781b      	ldrb	r3, [r3, #0]
 8004572:	73fb      	strb	r3, [r7, #15]
    uint8_t lin = array[coord_lin];
 8004574:	78bb      	ldrb	r3, [r7, #2]
 8004576:	687a      	ldr	r2, [r7, #4]
 8004578:	4413      	add	r3, r2
 800457a:	781b      	ldrb	r3, [r3, #0]
 800457c:	73bb      	strb	r3, [r7, #14]

    if(col >= '0' && col <= '9') col = col - '0';
 800457e:	7bfb      	ldrb	r3, [r7, #15]
 8004580:	2b2f      	cmp	r3, #47	; 0x2f
 8004582:	d905      	bls.n	8004590 <Security_GetLockerPosition+0x36>
 8004584:	7bfb      	ldrb	r3, [r7, #15]
 8004586:	2b39      	cmp	r3, #57	; 0x39
 8004588:	d802      	bhi.n	8004590 <Security_GetLockerPosition+0x36>
 800458a:	7bfb      	ldrb	r3, [r7, #15]
 800458c:	3b30      	subs	r3, #48	; 0x30
 800458e:	73fb      	strb	r3, [r7, #15]
    if(lin >= '0' && lin <= '9') lin = lin - '0';
 8004590:	7bbb      	ldrb	r3, [r7, #14]
 8004592:	2b2f      	cmp	r3, #47	; 0x2f
 8004594:	d905      	bls.n	80045a2 <Security_GetLockerPosition+0x48>
 8004596:	7bbb      	ldrb	r3, [r7, #14]
 8004598:	2b39      	cmp	r3, #57	; 0x39
 800459a:	d802      	bhi.n	80045a2 <Security_GetLockerPosition+0x48>
 800459c:	7bbb      	ldrb	r3, [r7, #14]
 800459e:	3b30      	subs	r3, #48	; 0x30
 80045a0:	73bb      	strb	r3, [r7, #14]

    if (col > NUM_COLUMNS || lin > NUM_ROWS) {
 80045a2:	7bfb      	ldrb	r3, [r7, #15]
 80045a4:	2b03      	cmp	r3, #3
 80045a6:	d802      	bhi.n	80045ae <Security_GetLockerPosition+0x54>
 80045a8:	7bbb      	ldrb	r3, [r7, #14]
 80045aa:	2b02      	cmp	r3, #2
 80045ac:	d901      	bls.n	80045b2 <Security_GetLockerPosition+0x58>
        return 0;  // Invalid locker
 80045ae:	2300      	movs	r3, #0
 80045b0:	e00a      	b.n	80045c8 <Security_GetLockerPosition+0x6e>
    }


    uint8_t locker_number = lin * NUM_COLUMNS + col + 1; // +1 because lockers start from 1
 80045b2:	7bbb      	ldrb	r3, [r7, #14]
 80045b4:	461a      	mov	r2, r3
 80045b6:	0052      	lsls	r2, r2, #1
 80045b8:	4413      	add	r3, r2
 80045ba:	b2da      	uxtb	r2, r3
 80045bc:	7bfb      	ldrb	r3, [r7, #15]
 80045be:	4413      	add	r3, r2
 80045c0:	b2db      	uxtb	r3, r3
 80045c2:	3301      	adds	r3, #1
 80045c4:	737b      	strb	r3, [r7, #13]

    return locker_number;
 80045c6:	7b7b      	ldrb	r3, [r7, #13]
}
 80045c8:	4618      	mov	r0, r3
 80045ca:	3714      	adds	r7, #20
 80045cc:	46bd      	mov	sp, r7
 80045ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d2:	4770      	bx	lr

080045d4 <Security_GetPin>:

uint8_t Security_GetPin(LockTypeDef *Lock, const uint8_t *array, uint8_t coord1, uint8_t coord2, uint8_t coord3, uint8_t coord4){
 80045d4:	b480      	push	{r7}
 80045d6:	b085      	sub	sp, #20
 80045d8:	af00      	add	r7, sp, #0
 80045da:	60f8      	str	r0, [r7, #12]
 80045dc:	60b9      	str	r1, [r7, #8]
 80045de:	4611      	mov	r1, r2
 80045e0:	461a      	mov	r2, r3
 80045e2:	460b      	mov	r3, r1
 80045e4:	71fb      	strb	r3, [r7, #7]
 80045e6:	4613      	mov	r3, r2
 80045e8:	71bb      	strb	r3, [r7, #6]

		Lock->PIN1[0]=array[coord1];
 80045ea:	79fb      	ldrb	r3, [r7, #7]
 80045ec:	68ba      	ldr	r2, [r7, #8]
 80045ee:	4413      	add	r3, r2
 80045f0:	781a      	ldrb	r2, [r3, #0]
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
		Lock->PIN1[1]=array[coord2];
 80045f8:	79bb      	ldrb	r3, [r7, #6]
 80045fa:	68ba      	ldr	r2, [r7, #8]
 80045fc:	4413      	add	r3, r2
 80045fe:	781a      	ldrb	r2, [r3, #0]
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
		Lock->PIN1[2]=array[coord3];
 8004606:	7e3b      	ldrb	r3, [r7, #24]
 8004608:	68ba      	ldr	r2, [r7, #8]
 800460a:	4413      	add	r3, r2
 800460c:	781a      	ldrb	r2, [r3, #0]
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
		Lock->PIN1[3]=array[coord4];
 8004614:	7f3b      	ldrb	r3, [r7, #28]
 8004616:	68ba      	ldr	r2, [r7, #8]
 8004618:	4413      	add	r3, r2
 800461a:	781a      	ldrb	r2, [r3, #0]
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

		Lock->PIN2[3]=array[coord1];
 8004622:	79fb      	ldrb	r3, [r7, #7]
 8004624:	68ba      	ldr	r2, [r7, #8]
 8004626:	4413      	add	r3, r2
 8004628:	781a      	ldrb	r2, [r3, #0]
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
		Lock->PIN2[2]=array[coord2];
 8004630:	79bb      	ldrb	r3, [r7, #6]
 8004632:	68ba      	ldr	r2, [r7, #8]
 8004634:	4413      	add	r3, r2
 8004636:	781a      	ldrb	r2, [r3, #0]
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
		Lock->PIN2[1]=array[coord3];
 800463e:	7e3b      	ldrb	r3, [r7, #24]
 8004640:	68ba      	ldr	r2, [r7, #8]
 8004642:	4413      	add	r3, r2
 8004644:	781a      	ldrb	r2, [r3, #0]
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
		Lock->PIN2[0]=array[coord4];
 800464c:	7f3b      	ldrb	r3, [r7, #28]
 800464e:	68ba      	ldr	r2, [r7, #8]
 8004650:	4413      	add	r3, r2
 8004652:	781a      	ldrb	r2, [r3, #0]
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

		return 1;
 800465a:	2301      	movs	r3, #1
}
 800465c:	4618      	mov	r0, r3
 800465e:	3714      	adds	r7, #20
 8004660:	46bd      	mov	sp, r7
 8004662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004666:	4770      	bx	lr

08004668 <Security_ComparePins>:

uint8_t Security_ComparePins(LockTypeDef *Lock, const uint8_t *array, uint8_t coord1, uint8_t coord2, uint8_t coord3, uint8_t coord4, bool clientNrecovery){
 8004668:	b480      	push	{r7}
 800466a:	b089      	sub	sp, #36	; 0x24
 800466c:	af00      	add	r7, sp, #0
 800466e:	60f8      	str	r0, [r7, #12]
 8004670:	60b9      	str	r1, [r7, #8]
 8004672:	4611      	mov	r1, r2
 8004674:	461a      	mov	r2, r3
 8004676:	460b      	mov	r3, r1
 8004678:	71fb      	strb	r3, [r7, #7]
 800467a:	4613      	mov	r3, r2
 800467c:	71bb      	strb	r3, [r7, #6]


	if(!Lock->isFull) return 0;//if locker is full don't open for client
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004684:	f083 0301 	eor.w	r3, r3, #1
 8004688:	b2db      	uxtb	r3, r3
 800468a:	2b00      	cmp	r3, #0
 800468c:	d001      	beq.n	8004692 <Security_ComparePins+0x2a>
 800468e:	2300      	movs	r3, #0
 8004690:	e04f      	b.n	8004732 <Security_ComparePins+0xca>

	uint8_t PIN[PIN_SIZE];

	PIN[0]=array[coord1];
 8004692:	79fb      	ldrb	r3, [r7, #7]
 8004694:	68ba      	ldr	r2, [r7, #8]
 8004696:	4413      	add	r3, r2
 8004698:	781b      	ldrb	r3, [r3, #0]
 800469a:	753b      	strb	r3, [r7, #20]
	PIN[1]=array[coord2];
 800469c:	79bb      	ldrb	r3, [r7, #6]
 800469e:	68ba      	ldr	r2, [r7, #8]
 80046a0:	4413      	add	r3, r2
 80046a2:	781b      	ldrb	r3, [r3, #0]
 80046a4:	757b      	strb	r3, [r7, #21]
	PIN[2]=array[coord3];
 80046a6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80046aa:	68ba      	ldr	r2, [r7, #8]
 80046ac:	4413      	add	r3, r2
 80046ae:	781b      	ldrb	r3, [r3, #0]
 80046b0:	75bb      	strb	r3, [r7, #22]
	PIN[3]=array[coord4];
 80046b2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80046b6:	68ba      	ldr	r2, [r7, #8]
 80046b8:	4413      	add	r3, r2
 80046ba:	781b      	ldrb	r3, [r3, #0]
 80046bc:	75fb      	strb	r3, [r7, #23]
		if(!clientNrecovery){
 80046be:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80046c2:	f083 0301 	eor.w	r3, r3, #1
 80046c6:	b2db      	uxtb	r3, r3
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d016      	beq.n	80046fa <Security_ComparePins+0x92>
			for (size_t i = 0; i < PIN_SIZE; i++) {
 80046cc:	2300      	movs	r3, #0
 80046ce:	61fb      	str	r3, [r7, #28]
 80046d0:	e010      	b.n	80046f4 <Security_ComparePins+0x8c>
				if (Lock->PIN1[i] != PIN[i]) {
 80046d2:	68fa      	ldr	r2, [r7, #12]
 80046d4:	69fb      	ldr	r3, [r7, #28]
 80046d6:	4413      	add	r3, r2
 80046d8:	3331      	adds	r3, #49	; 0x31
 80046da:	781a      	ldrb	r2, [r3, #0]
 80046dc:	f107 0114 	add.w	r1, r7, #20
 80046e0:	69fb      	ldr	r3, [r7, #28]
 80046e2:	440b      	add	r3, r1
 80046e4:	781b      	ldrb	r3, [r3, #0]
 80046e6:	429a      	cmp	r2, r3
 80046e8:	d001      	beq.n	80046ee <Security_ComparePins+0x86>
					return 0; // Arrays are different
 80046ea:	2300      	movs	r3, #0
 80046ec:	e021      	b.n	8004732 <Security_ComparePins+0xca>
			for (size_t i = 0; i < PIN_SIZE; i++) {
 80046ee:	69fb      	ldr	r3, [r7, #28]
 80046f0:	3301      	adds	r3, #1
 80046f2:	61fb      	str	r3, [r7, #28]
 80046f4:	69fb      	ldr	r3, [r7, #28]
 80046f6:	2b03      	cmp	r3, #3
 80046f8:	d9eb      	bls.n	80046d2 <Security_ComparePins+0x6a>
				}
			}
		}

		if(clientNrecovery){
 80046fa:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d016      	beq.n	8004730 <Security_ComparePins+0xc8>
			for (size_t i = 0; i < PIN_SIZE; i++) {
 8004702:	2300      	movs	r3, #0
 8004704:	61bb      	str	r3, [r7, #24]
 8004706:	e010      	b.n	800472a <Security_ComparePins+0xc2>
				if (Lock->PIN2[i] != PIN[i]) {
 8004708:	68fa      	ldr	r2, [r7, #12]
 800470a:	69bb      	ldr	r3, [r7, #24]
 800470c:	4413      	add	r3, r2
 800470e:	3335      	adds	r3, #53	; 0x35
 8004710:	781a      	ldrb	r2, [r3, #0]
 8004712:	f107 0114 	add.w	r1, r7, #20
 8004716:	69bb      	ldr	r3, [r7, #24]
 8004718:	440b      	add	r3, r1
 800471a:	781b      	ldrb	r3, [r3, #0]
 800471c:	429a      	cmp	r2, r3
 800471e:	d001      	beq.n	8004724 <Security_ComparePins+0xbc>
					return 0; // Arrays are different
 8004720:	2300      	movs	r3, #0
 8004722:	e006      	b.n	8004732 <Security_ComparePins+0xca>
			for (size_t i = 0; i < PIN_SIZE; i++) {
 8004724:	69bb      	ldr	r3, [r7, #24]
 8004726:	3301      	adds	r3, #1
 8004728:	61bb      	str	r3, [r7, #24]
 800472a:	69bb      	ldr	r3, [r7, #24]
 800472c:	2b03      	cmp	r3, #3
 800472e:	d9eb      	bls.n	8004708 <Security_ComparePins+0xa0>
				}
			}
		}
	    return 1; // Arrays are the same
 8004730:	2301      	movs	r3, #1
}
 8004732:	4618      	mov	r0, r3
 8004734:	3724      	adds	r7, #36	; 0x24
 8004736:	46bd      	mov	sp, r7
 8004738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473c:	4770      	bx	lr

0800473e <Security_GetMaintOpType>:

uint8_t Security_GetMaintOpType(const uint8_t *array, uint8_t coord1) {
 800473e:	b480      	push	{r7}
 8004740:	b085      	sub	sp, #20
 8004742:	af00      	add	r7, sp, #0
 8004744:	6078      	str	r0, [r7, #4]
 8004746:	460b      	mov	r3, r1
 8004748:	70fb      	strb	r3, [r7, #3]

    uint8_t Maint_Opcode = array[coord1];
 800474a:	78fb      	ldrb	r3, [r7, #3]
 800474c:	687a      	ldr	r2, [r7, #4]
 800474e:	4413      	add	r3, r2
 8004750:	781b      	ldrb	r3, [r3, #0]
 8004752:	73fb      	strb	r3, [r7, #15]
    if(Maint_Opcode >= '0' && Maint_Opcode <= '9') Maint_Opcode = Maint_Opcode - '0';
 8004754:	7bfb      	ldrb	r3, [r7, #15]
 8004756:	2b2f      	cmp	r3, #47	; 0x2f
 8004758:	d905      	bls.n	8004766 <Security_GetMaintOpType+0x28>
 800475a:	7bfb      	ldrb	r3, [r7, #15]
 800475c:	2b39      	cmp	r3, #57	; 0x39
 800475e:	d802      	bhi.n	8004766 <Security_GetMaintOpType+0x28>
 8004760:	7bfb      	ldrb	r3, [r7, #15]
 8004762:	3b30      	subs	r3, #48	; 0x30
 8004764:	73fb      	strb	r3, [r7, #15]
    return Maint_Opcode;
 8004766:	7bfb      	ldrb	r3, [r7, #15]
}
 8004768:	4618      	mov	r0, r3
 800476a:	3714      	adds	r7, #20
 800476c:	46bd      	mov	sp, r7
 800476e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004772:	4770      	bx	lr

08004774 <Security_ExecuteMaintOp>:

uint8_t Security_ExecuteMaintOp(uint8_t maint_opcode, LockTypeDef *Lock){
 8004774:	b580      	push	{r7, lr}
 8004776:	b084      	sub	sp, #16
 8004778:	af00      	add	r7, sp, #0
 800477a:	4603      	mov	r3, r0
 800477c:	6039      	str	r1, [r7, #0]
 800477e:	71fb      	strb	r3, [r7, #7]

	if(maint_opcode == OPEN_ALL_LOCKS){
 8004780:	79fb      	ldrb	r3, [r7, #7]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d135      	bne.n	80047f2 <Security_ExecuteMaintOp+0x7e>

		for(uint8_t i=0; i<NUM_OF_LOCKERS; i++){
 8004786:	2300      	movs	r3, #0
 8004788:	73fb      	strb	r3, [r7, #15]
 800478a:	e02d      	b.n	80047e8 <Security_ExecuteMaintOp+0x74>
			 bool return_value = Lock_Toggle_Wait_Toggle(&Lock[i],LOCKER_WAITVALUE);
 800478c:	7bfa      	ldrb	r2, [r7, #15]
 800478e:	4613      	mov	r3, r2
 8004790:	011b      	lsls	r3, r3, #4
 8004792:	1a9b      	subs	r3, r3, r2
 8004794:	009b      	lsls	r3, r3, #2
 8004796:	461a      	mov	r2, r3
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	4413      	add	r3, r2
 800479c:	2120      	movs	r1, #32
 800479e:	4618      	mov	r0, r3
 80047a0:	f7ff fc90 	bl	80040c4 <Lock_Toggle_Wait_Toggle>
 80047a4:	4603      	mov	r3, r0
 80047a6:	73bb      	strb	r3, [r7, #14]
             if (return_value == 0) Lock_AddErrorLog (&LogsStruct[logsCount],Lock[i].Lock_Pin1.GPIO_Init.Pin, LOCKER_FAILED_TO_OPEN);
 80047a8:	7bbb      	ldrb	r3, [r7, #14]
 80047aa:	f083 0301 	eor.w	r3, r3, #1
 80047ae:	b2db      	uxtb	r3, r3
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d012      	beq.n	80047da <Security_ExecuteMaintOp+0x66>
 80047b4:	4b11      	ldr	r3, [pc, #68]	; (80047fc <Security_ExecuteMaintOp+0x88>)
 80047b6:	781b      	ldrb	r3, [r3, #0]
 80047b8:	b2db      	uxtb	r3, r3
 80047ba:	009b      	lsls	r3, r3, #2
 80047bc:	4a10      	ldr	r2, [pc, #64]	; (8004800 <Security_ExecuteMaintOp+0x8c>)
 80047be:	1898      	adds	r0, r3, r2
 80047c0:	7bfa      	ldrb	r2, [r7, #15]
 80047c2:	4613      	mov	r3, r2
 80047c4:	011b      	lsls	r3, r3, #4
 80047c6:	1a9b      	subs	r3, r3, r2
 80047c8:	009b      	lsls	r3, r3, #2
 80047ca:	461a      	mov	r2, r3
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	4413      	add	r3, r2
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	226e      	movs	r2, #110	; 0x6e
 80047d4:	4619      	mov	r1, r3
 80047d6:	f7ff fca5 	bl	8004124 <Lock_AddErrorLog>
             HAL_Delay(MAINT_WAIT);
 80047da:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80047de:	f7fc fcfd 	bl	80011dc <HAL_Delay>
		for(uint8_t i=0; i<NUM_OF_LOCKERS; i++){
 80047e2:	7bfb      	ldrb	r3, [r7, #15]
 80047e4:	3301      	adds	r3, #1
 80047e6:	73fb      	strb	r3, [r7, #15]
 80047e8:	7bfb      	ldrb	r3, [r7, #15]
 80047ea:	2b04      	cmp	r3, #4
 80047ec:	d9ce      	bls.n	800478c <Security_ExecuteMaintOp+0x18>
		}

	return 1;
 80047ee:	2301      	movs	r3, #1
 80047f0:	e000      	b.n	80047f4 <Security_ExecuteMaintOp+0x80>

	}

	return 0;
 80047f2:	2300      	movs	r3, #0
}
 80047f4:	4618      	mov	r0, r3
 80047f6:	3710      	adds	r7, #16
 80047f8:	46bd      	mov	sp, r7
 80047fa:	bd80      	pop	{r7, pc}
 80047fc:	200005c4 	.word	0x200005c4
 8004800:	20000434 	.word	0x20000434

08004804 <WriteStructToFlash>:
 * @author Carlos Ribeiro
 */

#include "utils.h"

HAL_StatusTypeDef WriteStructToFlash(uint32_t address, void *data, size_t size) {
 8004804:	b580      	push	{r7, lr}
 8004806:	b092      	sub	sp, #72	; 0x48
 8004808:	af00      	add	r7, sp, #0
 800480a:	60f8      	str	r0, [r7, #12]
 800480c:	60b9      	str	r1, [r7, #8]
 800480e:	607a      	str	r2, [r7, #4]
    HAL_StatusTypeDef status;
    uint64_t data64 = 0;
 8004810:	f04f 0200 	mov.w	r2, #0
 8004814:	f04f 0300 	mov.w	r3, #0
 8004818:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

    // Unlock the Flash to enable the flash control register access
    HAL_FLASH_Unlock();
 800481c:	f7fc fea0 	bl	8001560 <HAL_FLASH_Unlock>

    // Clear any existing flags
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 8004820:	4b40      	ldr	r3, [pc, #256]	; (8004924 <WriteStructToFlash+0x120>)
 8004822:	699b      	ldr	r3, [r3, #24]
 8004824:	4a3f      	ldr	r2, [pc, #252]	; (8004924 <WriteStructToFlash+0x120>)
 8004826:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800482a:	6193      	str	r3, [r2, #24]
 800482c:	4b3d      	ldr	r3, [pc, #244]	; (8004924 <WriteStructToFlash+0x120>)
 800482e:	f24c 32fa 	movw	r2, #50170	; 0xc3fa
 8004832:	611a      	str	r2, [r3, #16]

    // Erase the specified flash page
    FLASH_EraseInitTypeDef eraseInitStruct;
    uint32_t pageError = 0;
 8004834:	2300      	movs	r3, #0
 8004836:	61fb      	str	r3, [r7, #28]

    eraseInitStruct.TypeErase   = FLASH_TYPEERASE_PAGES;
 8004838:	2300      	movs	r3, #0
 800483a:	623b      	str	r3, [r7, #32]
    eraseInitStruct.Page        = GetPage(address);
 800483c:	68f8      	ldr	r0, [r7, #12]
 800483e:	f000 f8cd 	bl	80049dc <GetPage>
 8004842:	4603      	mov	r3, r0
 8004844:	62bb      	str	r3, [r7, #40]	; 0x28
    eraseInitStruct.NbPages     = 1;
 8004846:	2301      	movs	r3, #1
 8004848:	62fb      	str	r3, [r7, #44]	; 0x2c

    status = HAL_FLASHEx_Erase(&eraseInitStruct, &pageError);
 800484a:	f107 021c 	add.w	r2, r7, #28
 800484e:	f107 0320 	add.w	r3, r7, #32
 8004852:	4611      	mov	r1, r2
 8004854:	4618      	mov	r0, r3
 8004856:	f7fc ff69 	bl	800172c <HAL_FLASHEx_Erase>
 800485a:	4603      	mov	r3, r0
 800485c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if (status != HAL_OK) {
 8004860:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004864:	2b00      	cmp	r3, #0
 8004866:	d004      	beq.n	8004872 <WriteStructToFlash+0x6e>
        HAL_FLASH_Lock();
 8004868:	f7fc fe9c 	bl	80015a4 <HAL_FLASH_Lock>
        return status;
 800486c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004870:	e054      	b.n	800491c <WriteStructToFlash+0x118>
    }

    // Program the flash double word by double word
    for (uint32_t i = 0; i < size; i += 8) {
 8004872:	2300      	movs	r3, #0
 8004874:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004876:	e04a      	b.n	800490e <WriteStructToFlash+0x10a>
        // Handle cases where size is not a multiple of 8
        if (i + 8 <= size) {
 8004878:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800487a:	3308      	adds	r3, #8
 800487c:	687a      	ldr	r2, [r7, #4]
 800487e:	429a      	cmp	r2, r3
 8004880:	d307      	bcc.n	8004892 <WriteStructToFlash+0x8e>
            data64 = *((uint64_t*)((uint8_t*)data + i));
 8004882:	68ba      	ldr	r2, [r7, #8]
 8004884:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004886:	4413      	add	r3, r2
 8004888:	e9d3 2300 	ldrd	r2, r3, [r3]
 800488c:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 8004890:	e026      	b.n	80048e0 <WriteStructToFlash+0xdc>
        } else {
            // For the last chunk, if less than 8 bytes, pad with 0xFF
            uint8_t tempData[8] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};
 8004892:	4a25      	ldr	r2, [pc, #148]	; (8004928 <WriteStructToFlash+0x124>)
 8004894:	f107 0314 	add.w	r3, r7, #20
 8004898:	e892 0003 	ldmia.w	r2, {r0, r1}
 800489c:	e883 0003 	stmia.w	r3, {r0, r1}
            uint32_t remainingBytes = size - i;
 80048a0:	687a      	ldr	r2, [r7, #4]
 80048a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048a4:	1ad3      	subs	r3, r2, r3
 80048a6:	633b      	str	r3, [r7, #48]	; 0x30
            for (uint32_t j = 0; j < remainingBytes; j++) {
 80048a8:	2300      	movs	r3, #0
 80048aa:	63bb      	str	r3, [r7, #56]	; 0x38
 80048ac:	e00e      	b.n	80048cc <WriteStructToFlash+0xc8>
                tempData[j] = *((uint8_t*)data + i + j);
 80048ae:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80048b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048b2:	4413      	add	r3, r2
 80048b4:	68ba      	ldr	r2, [r7, #8]
 80048b6:	4413      	add	r3, r2
 80048b8:	7819      	ldrb	r1, [r3, #0]
 80048ba:	f107 0214 	add.w	r2, r7, #20
 80048be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048c0:	4413      	add	r3, r2
 80048c2:	460a      	mov	r2, r1
 80048c4:	701a      	strb	r2, [r3, #0]
            for (uint32_t j = 0; j < remainingBytes; j++) {
 80048c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048c8:	3301      	adds	r3, #1
 80048ca:	63bb      	str	r3, [r7, #56]	; 0x38
 80048cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80048ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048d0:	429a      	cmp	r2, r3
 80048d2:	d3ec      	bcc.n	80048ae <WriteStructToFlash+0xaa>
            }
            data64 = *((uint64_t*)tempData);
 80048d4:	f107 0314 	add.w	r3, r7, #20
 80048d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048dc:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
        }

        status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, address + i, data64);
 80048e0:	68fa      	ldr	r2, [r7, #12]
 80048e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048e4:	18d1      	adds	r1, r2, r3
 80048e6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80048ea:	2000      	movs	r0, #0
 80048ec:	f7fc fdcc 	bl	8001488 <HAL_FLASH_Program>
 80048f0:	4603      	mov	r3, r0
 80048f2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        if (status != HAL_OK) {
 80048f6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d004      	beq.n	8004908 <WriteStructToFlash+0x104>
            HAL_FLASH_Lock();
 80048fe:	f7fc fe51 	bl	80015a4 <HAL_FLASH_Lock>
            return status;
 8004902:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004906:	e009      	b.n	800491c <WriteStructToFlash+0x118>
    for (uint32_t i = 0; i < size; i += 8) {
 8004908:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800490a:	3308      	adds	r3, #8
 800490c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800490e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	429a      	cmp	r2, r3
 8004914:	d3b0      	bcc.n	8004878 <WriteStructToFlash+0x74>
        }
    }

    // Lock the Flash to disable the flash control register access
    HAL_FLASH_Lock();
 8004916:	f7fc fe45 	bl	80015a4 <HAL_FLASH_Lock>

    return HAL_OK;
 800491a:	2300      	movs	r3, #0
}
 800491c:	4618      	mov	r0, r3
 800491e:	3748      	adds	r7, #72	; 0x48
 8004920:	46bd      	mov	sp, r7
 8004922:	bd80      	pop	{r7, pc}
 8004924:	40022000 	.word	0x40022000
 8004928:	08004b2c 	.word	0x08004b2c

0800492c <ConvertLockToSimplified>:



void ConvertLockToSimplified(const LockTypeDef *src, SimplifiedLockTypeDef *dst) {
 800492c:	b480      	push	{r7}
 800492e:	b083      	sub	sp, #12
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
 8004934:	6039      	str	r1, [r7, #0]
    strncpy(dst->signature, FLASH_SIGNATURE, FLASH_SIGNATURE_SIZE);
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	4910      	ldr	r1, [pc, #64]	; (800497c <ConvertLockToSimplified+0x50>)
 800493a:	461a      	mov	r2, r3
 800493c:	460b      	mov	r3, r1
 800493e:	cb03      	ldmia	r3!, {r0, r1}
 8004940:	6010      	str	r0, [r2, #0]
 8004942:	6051      	str	r1, [r2, #4]
    dst->isFull = src->isFull;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	721a      	strb	r2, [r3, #8]
    memcpy(dst->PIN1, src->PIN1, PIN_SIZE);
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	3309      	adds	r3, #9
 8004952:	687a      	ldr	r2, [r7, #4]
 8004954:	3231      	adds	r2, #49	; 0x31
 8004956:	6812      	ldr	r2, [r2, #0]
 8004958:	601a      	str	r2, [r3, #0]
    memcpy(dst->PIN2, src->PIN2, PIN_SIZE);
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	330d      	adds	r3, #13
 800495e:	687a      	ldr	r2, [r7, #4]
 8004960:	3235      	adds	r2, #53	; 0x35
 8004962:	6812      	ldr	r2, [r2, #0]
 8004964:	601a      	str	r2, [r3, #0]
    dst->isVandalized = src->isVandalized;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	745a      	strb	r2, [r3, #17]
}
 8004970:	bf00      	nop
 8004972:	370c      	adds	r7, #12
 8004974:	46bd      	mov	sp, r7
 8004976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497a:	4770      	bx	lr
 800497c:	08004b34 	.word	0x08004b34

08004980 <ReadStructFromFlash>:

void ReadStructFromFlash(uint32_t address, void *data, size_t size) {
 8004980:	b580      	push	{r7, lr}
 8004982:	b084      	sub	sp, #16
 8004984:	af00      	add	r7, sp, #0
 8004986:	60f8      	str	r0, [r7, #12]
 8004988:	60b9      	str	r1, [r7, #8]
 800498a:	607a      	str	r2, [r7, #4]
    memcpy(data, (void*)address, size);
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	687a      	ldr	r2, [r7, #4]
 8004990:	4619      	mov	r1, r3
 8004992:	68b8      	ldr	r0, [r7, #8]
 8004994:	f000 f8b0 	bl	8004af8 <memcpy>
}
 8004998:	bf00      	nop
 800499a:	3710      	adds	r7, #16
 800499c:	46bd      	mov	sp, r7
 800499e:	bd80      	pop	{r7, pc}

080049a0 <IsFlashDataValid>:


bool IsFlashDataValid(void) {
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b086      	sub	sp, #24
 80049a4:	af00      	add	r7, sp, #0
    SimplifiedLockTypeDef testLock;
    ReadStructFromFlash(FLASH_USER_START_ADDR, &testLock, sizeof(SimplifiedLockTypeDef));
 80049a6:	1d3b      	adds	r3, r7, #4
 80049a8:	2212      	movs	r2, #18
 80049aa:	4619      	mov	r1, r3
 80049ac:	4809      	ldr	r0, [pc, #36]	; (80049d4 <IsFlashDataValid+0x34>)
 80049ae:	f7ff ffe7 	bl	8004980 <ReadStructFromFlash>
    return strncmp(testLock.signature, FLASH_SIGNATURE, FLASH_SIGNATURE_SIZE) == 0;
 80049b2:	1d3b      	adds	r3, r7, #4
 80049b4:	2208      	movs	r2, #8
 80049b6:	4908      	ldr	r1, [pc, #32]	; (80049d8 <IsFlashDataValid+0x38>)
 80049b8:	4618      	mov	r0, r3
 80049ba:	f000 f867 	bl	8004a8c <strncmp>
 80049be:	4603      	mov	r3, r0
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	bf0c      	ite	eq
 80049c4:	2301      	moveq	r3, #1
 80049c6:	2300      	movne	r3, #0
 80049c8:	b2db      	uxtb	r3, r3
}
 80049ca:	4618      	mov	r0, r3
 80049cc:	3718      	adds	r7, #24
 80049ce:	46bd      	mov	sp, r7
 80049d0:	bd80      	pop	{r7, pc}
 80049d2:	bf00      	nop
 80049d4:	0801f800 	.word	0x0801f800
 80049d8:	08004b34 	.word	0x08004b34

080049dc <GetPage>:

// Helper function to get the page of a given address
uint32_t GetPage(uint32_t addr) {
 80049dc:	b480      	push	{r7}
 80049de:	b085      	sub	sp, #20
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
	  uint32_t page = 0;
 80049e4:	2300      	movs	r3, #0
 80049e6:	60fb      	str	r3, [r7, #12]

	  if (addr < (FLASH_BASE + FLASH_BANK_SIZE))
 80049e8:	4b19      	ldr	r3, [pc, #100]	; (8004a50 <GetPage+0x74>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	b29b      	uxth	r3, r3
 80049ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d007      	beq.n	8004a06 <GetPage+0x2a>
 80049f6:	4b16      	ldr	r3, [pc, #88]	; (8004a50 <GetPage+0x74>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	029a      	lsls	r2, r3, #10
 80049fc:	4b15      	ldr	r3, [pc, #84]	; (8004a54 <GetPage+0x78>)
 80049fe:	4013      	ands	r3, r2
 8004a00:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8004a04:	e000      	b.n	8004a08 <GetPage+0x2c>
 8004a06:	4b14      	ldr	r3, [pc, #80]	; (8004a58 <GetPage+0x7c>)
 8004a08:	687a      	ldr	r2, [r7, #4]
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d905      	bls.n	8004a1a <GetPage+0x3e>
	  {
	    /* Bank 1 */
	    page = (addr - FLASH_BASE) / FLASH_PAGE_SIZE;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8004a14:	0adb      	lsrs	r3, r3, #11
 8004a16:	60fb      	str	r3, [r7, #12]
 8004a18:	e013      	b.n	8004a42 <GetPage+0x66>
	  }
	  else
	  {
	    /* Bank 2 */
	    page = (addr - (FLASH_BASE + FLASH_BANK_SIZE)) / FLASH_PAGE_SIZE;
 8004a1a:	4b0d      	ldr	r3, [pc, #52]	; (8004a50 <GetPage+0x74>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	b29b      	uxth	r3, r3
 8004a20:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d007      	beq.n	8004a38 <GetPage+0x5c>
 8004a28:	4b09      	ldr	r3, [pc, #36]	; (8004a50 <GetPage+0x74>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	029a      	lsls	r2, r3, #10
 8004a2e:	4b09      	ldr	r3, [pc, #36]	; (8004a54 <GetPage+0x78>)
 8004a30:	4013      	ands	r3, r2
 8004a32:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8004a36:	e000      	b.n	8004a3a <GetPage+0x5e>
 8004a38:	4b07      	ldr	r3, [pc, #28]	; (8004a58 <GetPage+0x7c>)
 8004a3a:	687a      	ldr	r2, [r7, #4]
 8004a3c:	1ad3      	subs	r3, r2, r3
 8004a3e:	0adb      	lsrs	r3, r3, #11
 8004a40:	60fb      	str	r3, [r7, #12]
	  }

	  return page;
 8004a42:	68fb      	ldr	r3, [r7, #12]
}
 8004a44:	4618      	mov	r0, r3
 8004a46:	3714      	adds	r7, #20
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4e:	4770      	bx	lr
 8004a50:	1fff75e0 	.word	0x1fff75e0
 8004a54:	03fffc00 	.word	0x03fffc00
 8004a58:	08040000 	.word	0x08040000

08004a5c <memcmp>:
 8004a5c:	b510      	push	{r4, lr}
 8004a5e:	3901      	subs	r1, #1
 8004a60:	4402      	add	r2, r0
 8004a62:	4290      	cmp	r0, r2
 8004a64:	d101      	bne.n	8004a6a <memcmp+0xe>
 8004a66:	2000      	movs	r0, #0
 8004a68:	e005      	b.n	8004a76 <memcmp+0x1a>
 8004a6a:	7803      	ldrb	r3, [r0, #0]
 8004a6c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8004a70:	42a3      	cmp	r3, r4
 8004a72:	d001      	beq.n	8004a78 <memcmp+0x1c>
 8004a74:	1b18      	subs	r0, r3, r4
 8004a76:	bd10      	pop	{r4, pc}
 8004a78:	3001      	adds	r0, #1
 8004a7a:	e7f2      	b.n	8004a62 <memcmp+0x6>

08004a7c <memset>:
 8004a7c:	4402      	add	r2, r0
 8004a7e:	4603      	mov	r3, r0
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d100      	bne.n	8004a86 <memset+0xa>
 8004a84:	4770      	bx	lr
 8004a86:	f803 1b01 	strb.w	r1, [r3], #1
 8004a8a:	e7f9      	b.n	8004a80 <memset+0x4>

08004a8c <strncmp>:
 8004a8c:	b510      	push	{r4, lr}
 8004a8e:	b16a      	cbz	r2, 8004aac <strncmp+0x20>
 8004a90:	3901      	subs	r1, #1
 8004a92:	1884      	adds	r4, r0, r2
 8004a94:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004a98:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8004a9c:	429a      	cmp	r2, r3
 8004a9e:	d103      	bne.n	8004aa8 <strncmp+0x1c>
 8004aa0:	42a0      	cmp	r0, r4
 8004aa2:	d001      	beq.n	8004aa8 <strncmp+0x1c>
 8004aa4:	2a00      	cmp	r2, #0
 8004aa6:	d1f5      	bne.n	8004a94 <strncmp+0x8>
 8004aa8:	1ad0      	subs	r0, r2, r3
 8004aaa:	bd10      	pop	{r4, pc}
 8004aac:	4610      	mov	r0, r2
 8004aae:	e7fc      	b.n	8004aaa <strncmp+0x1e>

08004ab0 <__libc_init_array>:
 8004ab0:	b570      	push	{r4, r5, r6, lr}
 8004ab2:	4d0d      	ldr	r5, [pc, #52]	; (8004ae8 <__libc_init_array+0x38>)
 8004ab4:	4c0d      	ldr	r4, [pc, #52]	; (8004aec <__libc_init_array+0x3c>)
 8004ab6:	1b64      	subs	r4, r4, r5
 8004ab8:	10a4      	asrs	r4, r4, #2
 8004aba:	2600      	movs	r6, #0
 8004abc:	42a6      	cmp	r6, r4
 8004abe:	d109      	bne.n	8004ad4 <__libc_init_array+0x24>
 8004ac0:	4d0b      	ldr	r5, [pc, #44]	; (8004af0 <__libc_init_array+0x40>)
 8004ac2:	4c0c      	ldr	r4, [pc, #48]	; (8004af4 <__libc_init_array+0x44>)
 8004ac4:	f000 f826 	bl	8004b14 <_init>
 8004ac8:	1b64      	subs	r4, r4, r5
 8004aca:	10a4      	asrs	r4, r4, #2
 8004acc:	2600      	movs	r6, #0
 8004ace:	42a6      	cmp	r6, r4
 8004ad0:	d105      	bne.n	8004ade <__libc_init_array+0x2e>
 8004ad2:	bd70      	pop	{r4, r5, r6, pc}
 8004ad4:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ad8:	4798      	blx	r3
 8004ada:	3601      	adds	r6, #1
 8004adc:	e7ee      	b.n	8004abc <__libc_init_array+0xc>
 8004ade:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ae2:	4798      	blx	r3
 8004ae4:	3601      	adds	r6, #1
 8004ae6:	e7f2      	b.n	8004ace <__libc_init_array+0x1e>
 8004ae8:	08004b90 	.word	0x08004b90
 8004aec:	08004b90 	.word	0x08004b90
 8004af0:	08004b90 	.word	0x08004b90
 8004af4:	08004b94 	.word	0x08004b94

08004af8 <memcpy>:
 8004af8:	440a      	add	r2, r1
 8004afa:	4291      	cmp	r1, r2
 8004afc:	f100 33ff 	add.w	r3, r0, #4294967295
 8004b00:	d100      	bne.n	8004b04 <memcpy+0xc>
 8004b02:	4770      	bx	lr
 8004b04:	b510      	push	{r4, lr}
 8004b06:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004b0a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004b0e:	4291      	cmp	r1, r2
 8004b10:	d1f9      	bne.n	8004b06 <memcpy+0xe>
 8004b12:	bd10      	pop	{r4, pc}

08004b14 <_init>:
 8004b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b16:	bf00      	nop
 8004b18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b1a:	bc08      	pop	{r3}
 8004b1c:	469e      	mov	lr, r3
 8004b1e:	4770      	bx	lr

08004b20 <_fini>:
 8004b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b22:	bf00      	nop
 8004b24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b26:	bc08      	pop	{r3}
 8004b28:	469e      	mov	lr, r3
 8004b2a:	4770      	bx	lr
